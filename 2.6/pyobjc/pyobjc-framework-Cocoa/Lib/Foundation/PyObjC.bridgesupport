<?xml version='1.0'?>
<!DOCTYPE signatures SYSTEM "file://localhost/System/Library/DTDs/BridgeSupport.dtd">
<signatures version='1.0'>
  <depends_on path='/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation' />
  <depends_on path='/System/Library/Frameworks/ApplicationServices.framework/ApplicationServices' />
  <struct name='NSAffineTransformStruct' type='{_NSAffineTransformStruct="m11"f"m12"f"m21"f"m22"f"tX"f"tY"f}' type64='{_NSAffineTransformStruct="m11"d"m12"d"m21"d"m22"d"tX"d"tY"d}' />
  <struct name='NSDecimal' type='{_NSDecimal="_exponent"b8"_length"b4"_isNegative"b1"_isCompact"b1"_reserved"b18"_mantissa"[8S]}' type64='{_NSDecimal="_exponent"b8"_length"b4"_isNegative"b1"_isCompact"b1"_reserved"b18"_mantissa"[8S]}' />
  <struct name='NSPoint' type='{_NSPoint="x"f"y"f}' type64='{CGPoint="x"d"y"d}' />
  <struct name='NSRange' type='{_NSRange="location"I"length"I}' type64='{_NSRange="location"Q"length"Q}' />
  <struct name='NSRect' type='{_NSRect="origin"{_NSPoint="x"f"y"f}"size"{_NSSize="width"f"height"f}}' type64='{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}' />
  <struct name='NSSize' type='{_NSSize="width"f"height"f}' type64='{CGSize="width"d"height"d}' />
  <struct name='NSSwappedDouble' type='{_NSSwappedDouble="v"Q}' type64='{_NSSwappedDouble="v"Q}' />
  <struct name='NSSwappedFloat' type='{_NSSwappedFloat="v"I}' type64='{_NSSwappedFloat="v"I}' />
  <opaque name='NSAppleEventManagerSuspensionID' type='^{__NSAppleEventManagerSuspension=}' type64='^{__NSAppleEventManagerSuspension=}' />
  <opaque name='NSZone*' type='^{_NSZone=}' type64='^{_NSZone=}' />
  <constant name='NSURLAuthenticationMethodClientCertificate' type='@'/>
  <constant name='NSURLAuthenticationMethodServerTrust' type='@'/>
  <constant name='NSURLErrorFailingURLErrorKey' type='@'/>
  <constant name='NSURLErrorFailingURLStringErrorKey' type='@'/>
  <constant name='NSURLErrorFailingURLPeerTrustErrorKey' type='@'/>
  <constant name='NSURLNameKey' type='@'/>
  <constant name='NSURLLocalizedNameKey' type='@'/>
  <constant name='NSURLIsRegularFileKey' type='@'/>
  <constant name='NSURLIsDirectoryKey' type='@'/>
  <constant name='NSURLIsSymbolicLinkKey' type='@'/>
  <constant name='NSURLIsVolumeKey' type='@'/>
  <constant name='NSURLIsPackageKey' type='@'/>
  <constant name='NSURLIsSystemImmutableKey' type='@'/>
  <constant name='NSURLIsUserImmutableKey' type='@'/>
  <constant name='NSURLIsHiddenKey' type='@'/>
  <constant name='NSURLHasHiddenExtensionKey' type='@'/>
  <constant name='NSURLCreationDateKey' type='@'/>
  <constant name='NSURLContentAccessDateKey' type='@'/>
  <constant name='NSAssertionHandlerKey' type='@'/>
  <constant name='NSURLContentModificationDateKey' type='@'/>
  <constant name='NSURLAttributeModificationDateKey' type='@'/>
  <constant name='NSURLLinkCountKey' type='@'/>
  <constant name='NSURLParentDirectoryURLKey' type='@'/>
  <constant name='NSURLVolumeURLKey' type='@'/>
  <constant name='NSURLTypeIdentifierKey' type='@'/>
  <constant name='NSURLLocalizedTypeDescriptionKey' type='@'/>
  <constant name='NSURLLabelNumberKey' type='@'/>
  <constant name='NSURLLabelColorKey' type='@'/>
  <constant name='NSURLLocalizedLabelKey' type='@'/>
  <constant name='NSURLEffectiveIconKey' type='@'/>
  <constant name='NSURLCustomIconKey' type='@'/>
  <constant name='NSURLFileSizeKey' type='@'/>
  <constant name='NSURLFileAllocatedSizeKey' type='@'/>
  <constant name='NSURLIsAliasFileKey' type='@'/>
  <constant name='NSURLVolumeLocalizedFormatDescriptionKey' type='@'/>
  <constant name='NSURLVolumeTotalCapacityKey' type='@'/>
  <constant name='NSURLVolumeAvailableCapacityKey' type='@'/>
  <constant name='NSURLVolumeResourceCountKey' type='@'/>
  <constant name='NSURLVolumeSupportsPersistentIDsKey' type='@'/>
  <constant name='NSURLVolumeSupportsSymbolicLinksKey' type='@'/>
  <constant name='NSURLVolumeSupportsHardLinksKey' type='@'/>
  <constant name='NSURLVolumeSupportsJournalingKey' type='@'/>
  <constant name='NSURLVolumeIsJournalingKey' type='@'/>
  <constant name='NSURLVolumeSupportsSparseFilesKey' type='@'/>
  <constant name='NSURLVolumeSupportsZeroRunsKey' type='@'/>
  <constant name='NSURLVolumeSupportsCaseSensitiveNamesKey' type='@'/>
  <constant name='NSURLVolumeSupportsCasePreservedNamesKey' type='@'/>
  <constant name='NSAMPMDesignation' type='@' />
  <constant name='NSSystemClockDidChangeNotification' type='@' />
  <constant name='NSAppleEventManagerWillProcessFirstEventNotification' type='@' />
  <constant name='NSAppleEventTimeOutDefault' type='d' />
  <constant name='NSAppleEventTimeOutNone' type='d' />
  <constant name='NSAppleScriptErrorAppName' type='@' />
  <constant name='NSAppleScriptErrorBriefMessage' type='@' />
  <constant name='NSAppleScriptErrorMessage' type='@' />
  <constant name='NSAppleScriptErrorNumber' type='@' />
  <constant name='NSAppleScriptErrorRange' type='@' />
  <constant name='NSArgumentDomain' type='@' />
  <constant name='NSAverageKeyValueOperator' type='@' />
  <constant name='NSBuddhistCalendar' type='@' />
  <constant name='NSBundleDidLoadNotification' type='@' />
  <constant name='NSCharacterConversionException' type='@' />
  <constant name='NSChineseCalendar' type='@' />
  <constant name='NSClassDescriptionNeededForClassNotification' type='@' />
  <constant name='NSCocoaErrorDomain' type='@' />
  <constant name='NSConnectionDidDieNotification' type='@' />
  <constant name='NSConnectionDidInitializeNotification' type='@' />
  <constant name='NSConnectionReplyMode' type='@' />
  <constant name='NSCountKeyValueOperator' type='@' />
  <constant name='NSCurrencySymbol' type='@' />
  <constant name='NSCurrentLocaleDidChangeNotification' type='@' />
  <constant name='NSDateFormatString' type='@' />
  <constant name='NSDateTimeOrdering' type='@' />
  <constant name='NSDecimalDigits' type='@' />
  <constant name='NSDecimalNumberDivideByZeroException' type='@' />
  <constant name='NSDecimalNumberExactnessException' type='@' />
  <constant name='NSDecimalNumberOverflowException' type='@' />
  <constant name='NSDecimalNumberUnderflowException' type='@' />
  <constant name='NSDecimalSeparator' type='@' />
  <constant name='NSDefaultRunLoopMode' type='@' />
  <constant name='NSDestinationInvalidException' type='@' />
  <constant name='NSDidBecomeSingleThreadedNotification' type='@' />
  <constant name='NSDistinctUnionOfArraysKeyValueOperator' type='@' />
  <constant name='NSDistinctUnionOfObjectsKeyValueOperator' type='@' />
  <constant name='NSDistinctUnionOfSetsKeyValueOperator' type='@' />
  <constant name='NSEarlierTimeDesignations' type='@' />
  <constant name='NSErrorFailingURLStringKey' type='@' />
  <constant name='NSFTPPropertyActiveTransferModeKey' type='@' />
  <constant name='NSFTPPropertyFTPProxy' type='@' />
  <constant name='NSFTPPropertyFileOffsetKey' type='@' />
  <constant name='NSFTPPropertyUserLoginKey' type='@' />
  <constant name='NSFTPPropertyUserPasswordKey' type='@' />
  <constant name='NSFailedAuthenticationException' type='@' />
  <constant name='NSFileAppendOnly' type='@' />
  <constant name='NSFileBusy' type='@' />
  <constant name='NSFileCreationDate' type='@' />
  <constant name='NSFileDeviceIdentifier' type='@' />
  <constant name='NSFileExtensionHidden' type='@' />
  <constant name='NSFileGroupOwnerAccountID' type='@' />
  <constant name='NSFileGroupOwnerAccountName' type='@' />
  <constant name='NSFileHFSCreatorCode' type='@' />
  <constant name='NSFileHFSTypeCode' type='@' />
  <constant name='NSFileHandleConnectionAcceptedNotification' type='@' />
  <constant name='NSFileHandleDataAvailableNotification' type='@' />
  <constant name='NSFileHandleNotificationDataItem' type='@' />
  <constant name='NSFileHandleNotificationFileHandleItem' type='@' />
  <constant name='NSFileHandleNotificationMonitorModes' type='@' />
  <constant name='NSFileHandleOperationException' type='@' />
  <constant name='NSFileHandleReadCompletionNotification' type='@' />
  <constant name='NSFileHandleReadToEndOfFileCompletionNotification' type='@' />
  <constant name='NSFileImmutable' type='@' />
  <constant name='NSFileModificationDate' type='@' />
  <constant name='NSFileOwnerAccountID' type='@' />
  <constant name='NSFileOwnerAccountName' type='@' />
  <constant name='NSFilePathErrorKey' type='@' />
  <constant name='NSFilePosixPermissions' type='@' />
  <constant name='NSFileReferenceCount' type='@' />
  <constant name='NSFileSize' type='@' />
  <constant name='NSFileSystemFileNumber' type='@' />
  <constant name='NSFileSystemFreeNodes' type='@' />
  <constant name='NSFileSystemFreeSize' type='@' />
  <constant name='NSFileSystemNodes' type='@' />
  <constant name='NSFileSystemNumber' type='@' />
  <constant name='NSFileSystemSize' type='@' />
  <constant name='NSFileType' type='@' />
  <constant name='NSFileTypeBlockSpecial' type='@' />
  <constant name='NSFileTypeCharacterSpecial' type='@' />
  <constant name='NSFileTypeDirectory' type='@' />
  <constant name='NSFileTypeRegular' type='@' />
  <constant name='NSFileTypeSocket' type='@' />
  <constant name='NSFileTypeSymbolicLink' type='@' />
  <constant name='NSFileTypeUnknown' type='@' />
  <constant name='NSFoundationVersionNumber' type='d' />
  <constant name='NSGenericException' type='@' />
  <constant name='NSGlobalDomain' type='@' />
  <constant name='NSGrammarCorrections' type='@' />
  <constant name='NSGrammarRange' type='@' />
  <constant name='NSGrammarUserDescription' type='@' />
  <constant name='NSGregorianCalendar' type='@' />
  <constant name='NSHTTPCookieComment' type='@' />
  <constant name='NSHTTPCookieCommentURL' type='@' />
  <constant name='NSHTTPCookieDiscard' type='@' />
  <constant name='NSHTTPCookieDomain' type='@' />
  <constant name='NSHTTPCookieExpires' type='@' />
  <constant name='NSHTTPCookieManagerAcceptPolicyChangedNotification' type='@' />
  <constant name='NSHTTPCookieManagerCookiesChangedNotification' type='@' />
  <constant name='NSHTTPCookieMaximumAge' type='@' />
  <constant name='NSHTTPCookieName' type='@' />
  <constant name='NSHTTPCookieOriginURL' type='@' />
  <constant name='NSHTTPCookiePath' type='@' />
  <constant name='NSHTTPCookiePort' type='@' />
  <constant name='NSHTTPCookieSecure' type='@' />
  <constant name='NSHTTPCookieValue' type='@' />
  <constant name='NSHTTPCookieVersion' type='@' />
  <constant name='NSHTTPPropertyErrorPageDataKey' type='@' />
  <constant name='NSHTTPPropertyHTTPProxy' type='@' />
  <constant name='NSHTTPPropertyRedirectionHeadersKey' type='@' />
  <constant name='NSHTTPPropertyServerHTTPVersionKey' type='@' />
  <constant name='NSHTTPPropertyStatusCodeKey' type='@' />
  <constant name='NSHTTPPropertyStatusReasonKey' type='@' />
  <constant name='NSHebrewCalendar' type='@' />
  <constant name='NSHourNameDesignations' type='@' />
  <constant name='NSInconsistentArchiveException' type='@' />
  <constant name='NSIntHashCallBacks' type='{_NSHashTableCallBacks=^?^?^?^?^?}' />
  <constant name='NSIntMapKeyCallBacks' type='{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' />
  <constant name='NSIntMapValueCallBacks' type='{_NSMapTableValueCallBacks=^?^?^?}' />
  <constant name='NSIntegerHashCallBacks' type='{_NSHashTableCallBacks=^?^?^?^?^?}' />
  <constant name='NSIntegerMapKeyCallBacks' type='{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' />
  <constant name='NSIntegerMapValueCallBacks' type='{_NSMapTableValueCallBacks=^?^?^?}' />
  <constant name='NSInternalInconsistencyException' type='@' />
  <constant name='NSInternationalCurrencyString' type='@' />
  <constant name='NSInvalidArchiveOperationException' type='@' />
  <constant name='NSInvalidArgumentException' type='@' />
  <constant name='NSInvalidReceivePortException' type='@' />
  <constant name='NSInvalidSendPortException' type='@' />
  <constant name='NSInvalidUnarchiveOperationException' type='@' />
  <constant name='NSInvocationOperationCancelledException' type='@' />
  <constant name='NSInvocationOperationVoidResultException' type='@' />
  <constant name='NSIsNilTransformerName' type='@' />
  <constant name='NSIsNotNilTransformerName' type='@' />
  <constant name='NSIslamicCalendar' type='@' />
  <constant name='NSIslamicCivilCalendar' type='@' />
  <constant name='NSJapaneseCalendar' type='@' />
  <constant name='NSJavaClasses' type='@' />
  <constant name='NSJavaDidCreateVirtualMachineNotification' type='@' />
  <constant name='NSJavaDidSetupVirtualMachineNotification' type='@' />
  <constant name='NSJavaLibraryPath' type='@' />
  <constant name='NSJavaOwnVirtualMachine' type='@' />
  <constant name='NSJavaPath' type='@' />
  <constant name='NSJavaPathSeparator' type='@' />
  <constant name='NSJavaRoot' type='@' />
  <constant name='NSJavaUserPath' type='@' />
  <constant name='NSJavaWillCreateVirtualMachineNotification' type='@' />
  <constant name='NSJavaWillSetupVirtualMachineNotification' type='@' />
  <constant name='NSKeyValueChangeIndexesKey' type='@' />
  <constant name='NSKeyValueChangeKindKey' type='@' />
  <constant name='NSKeyValueChangeNewKey' type='@' />
  <constant name='NSKeyValueChangeNotificationIsPriorKey' type='@' />
  <constant name='NSKeyValueChangeOldKey' type='@' />
  <constant name='NSKeyedUnarchiveFromDataTransformerName' type='@' />
  <constant name='NSLaterTimeDesignations' type='@' />
  <constant name='NSLoadedClasses' type='@' />
  <constant name='NSLocalNotificationCenterType' type='@' />
  <constant name='NSLocaleCalendar' type='@' />
  <constant name='NSLocaleCollationIdentifier' type='@' />
  <constant name='NSLocaleCountryCode' type='@' />
  <constant name='NSLocaleCurrencyCode' type='@' />
  <constant name='NSLocaleCurrencySymbol' type='@' />
  <constant name='NSLocaleDecimalSeparator' type='@' />
  <constant name='NSLocaleExemplarCharacterSet' type='@' />
  <constant name='NSLocaleGroupingSeparator' type='@' />
  <constant name='NSLocaleIdentifier' type='@' />
  <constant name='NSLocaleLanguageCode' type='@' />
  <constant name='NSLocaleMeasurementSystem' type='@' />
  <constant name='NSLocaleScriptCode' type='@' />
  <constant name='NSLocaleUsesMetricSystem' type='@' />
  <constant name='NSLocaleVariantCode' type='@' />
  <constant name='NSLocalizedDescriptionKey' type='@' />
  <constant name='NSLocalizedFailureReasonErrorKey' type='@' />
  <constant name='NSLocalizedRecoveryOptionsErrorKey' type='@' />
  <constant name='NSLocalizedRecoverySuggestionErrorKey' type='@' />
  <constant name='NSMachErrorDomain' type='@' />
  <constant name='NSMallocException' type='@' />
  <constant name='NSMaximumKeyValueOperator' type='@' />
  <constant name='NSMetadataQueryDidFinishGatheringNotification' type='@' />
  <constant name='NSMetadataQueryDidStartGatheringNotification' type='@' />
  <constant name='NSMetadataQueryDidUpdateNotification' type='@' />
  <constant name='NSMetadataQueryGatheringProgressNotification' type='@' />
  <constant name='NSMetadataQueryLocalComputerScope' type='@' />
  <constant name='NSMetadataQueryNetworkScope' type='@' />
  <constant name='NSMetadataQueryResultContentRelevanceAttribute' type='@' />
  <constant name='NSMetadataQueryUserHomeScope' type='@' />
  <constant name='NSMinimumKeyValueOperator' type='@' />
  <constant name='NSMonthNameArray' type='@' />
  <constant name='NSNegateBooleanTransformerName' type='@' />
  <constant name='NSNegativeCurrencyFormatString' type='@' />
  <constant name='NSNetServicesErrorCode' type='@' />
  <constant name='NSNetServicesErrorDomain' type='@' />
  <constant name='NSNextDayDesignations' type='@' />
  <constant name='NSNextNextDayDesignations' type='@' />
  <constant name='NSNonOwnedPointerHashCallBacks' type='{_NSHashTableCallBacks=^?^?^?^?^?}' />
  <constant name='NSNonOwnedPointerMapKeyCallBacks' type='{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' />
  <constant name='NSNonOwnedPointerMapValueCallBacks' type='{_NSMapTableValueCallBacks=^?^?^?}' />
  <constant name='NSNonOwnedPointerOrNullMapKeyCallBacks' type='{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' />
  <constant name='NSNonRetainedObjectHashCallBacks' type='{_NSHashTableCallBacks=^?^?^?^?^?}' />
  <constant name='NSNonRetainedObjectMapKeyCallBacks' type='{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' />
  <constant name='NSNonRetainedObjectMapValueCallBacks' type='{_NSMapTableValueCallBacks=^?^?^?}' />
  <constant name='NSOSStatusErrorDomain' type='@' />
  <constant name='NSObjectHashCallBacks' type='{_NSHashTableCallBacks=^?^?^?^?^?}' />
  <constant name='NSObjectInaccessibleException' type='@' />
  <constant name='NSObjectMapKeyCallBacks' type='{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' />
  <constant name='NSObjectMapValueCallBacks' type='{_NSMapTableValueCallBacks=^?^?^?}' />
  <constant name='NSObjectNotAvailableException' type='@' />
  <constant name='NSOldStyleException' type='@' />
  <constant name='NSOperationNotSupportedForKeyException' type='@' />
  <constant name='NSOwnedObjectIdentityHashCallBacks' type='{_NSHashTableCallBacks=^?^?^?^?^?}' />
  <constant name='NSOwnedPointerHashCallBacks' type='{_NSHashTableCallBacks=^?^?^?^?^?}' />
  <constant name='NSOwnedPointerMapKeyCallBacks' type='{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' />
  <constant name='NSOwnedPointerMapValueCallBacks' type='{_NSMapTableValueCallBacks=^?^?^?}' />
  <constant name='NSPOSIXErrorDomain' type='@' />
  <constant name='NSParseErrorException' type='@' />
  <constant name='NSPointerToStructHashCallBacks' type='{_NSHashTableCallBacks=^?^?^?^?^?}' />
  <constant name='NSPortDidBecomeInvalidNotification' type='@' />
  <constant name='NSPortReceiveException' type='@' />
  <constant name='NSPortSendException' type='@' />
  <constant name='NSPortTimeoutException' type='@' />
  <constant name='NSPositiveCurrencyFormatString' type='@' />
  <constant name='NSPriorDayDesignations' type='@' />
  <constant name='NSRangeException' type='@' />
  <constant name='NSRecoveryAttempterErrorKey' type='@' />
  <constant name='NSRegistrationDomain' type='@' />
  <constant name='NSRunLoopCommonModes' type='@' />
  <constant name='NSShortDateFormatString' type='@' />
  <constant name='NSShortMonthNameArray' type='@' />
  <constant name='NSShortTimeDateFormatString' type='@' />
  <constant name='NSShortWeekDayNameArray' type='@' />
  <constant name='NSStreamDataWrittenToMemoryStreamKey' type='@' />
  <constant name='NSStreamFileCurrentOffsetKey' type='@' />
  <constant name='NSStreamSOCKSErrorDomain' type='@' />
  <constant name='NSStreamSOCKSProxyConfigurationKey' type='@' />
  <constant name='NSStreamSOCKSProxyHostKey' type='@' />
  <constant name='NSStreamSOCKSProxyPasswordKey' type='@' />
  <constant name='NSStreamSOCKSProxyPortKey' type='@' />
  <constant name='NSStreamSOCKSProxyUserKey' type='@' />
  <constant name='NSStreamSOCKSProxyVersion4' type='@' />
  <constant name='NSStreamSOCKSProxyVersion5' type='@' />
  <constant name='NSStreamSOCKSProxyVersionKey' type='@' />
  <constant name='NSStreamSocketSSLErrorDomain' type='@' />
  <constant name='NSStreamSocketSecurityLevelKey' type='@' />
  <constant name='NSStreamSocketSecurityLevelNegotiatedSSL' type='@' />
  <constant name='NSStreamSocketSecurityLevelNone' type='@' />
  <constant name='NSStreamSocketSecurityLevelSSLv2' type='@' />
  <constant name='NSStreamSocketSecurityLevelSSLv3' type='@' />
  <constant name='NSStreamSocketSecurityLevelTLSv1' type='@' />
  <constant name='NSStringEncodingErrorKey' type='@' />
  <constant name='NSSumKeyValueOperator' type='@' />
  <constant name='NSSystemTimeZoneDidChangeNotification' type='@' />
  <constant name='NSTaskDidTerminateNotification' type='@' />
  <constant name='NSThisDayDesignations' type='@' />
  <constant name='NSThousandsSeparator' type='@' />
  <constant name='NSThreadWillExitNotification' type='@' />
  <constant name='NSTimeDateFormatString' type='@' />
  <constant name='NSTimeFormatString' type='@' />
  <constant name='NSURLAuthenticationMethodDefault' type='@' />
  <constant name='NSURLAuthenticationMethodHTMLForm' type='@' />
  <constant name='NSURLAuthenticationMethodHTTPBasic' type='@' />
  <constant name='NSURLAuthenticationMethodHTTPDigest' type='@' />
  <constant name='NSURLCredentialStorageChangedNotification' type='@' />
  <constant name='NSURLErrorDomain' type='@' />
  <constant name='NSURLErrorKey' type='@' />
  <constant name='NSURLFileScheme' type='@' />
  <constant name='NSURLAuthenticationMethodServerTrust' type='@' />
  <constant name='NSURLProtectionSpaceFTPProxy' type='@' />
  <constant name='NSURLProtectionSpaceHTTPProxy' type='@' />
  <constant name='NSURLProtectionSpaceHTTPSProxy' type='@' />
  <constant name='NSURLProtectionSpaceSOCKSProxy' type='@' />
  <constant name='NSUnarchiveFromDataTransformerName' type='@' />
  <constant name='NSUndefinedKeyException' type='@' />
  <constant name='NSUnderlyingErrorKey' type='@' />
  <constant name='NSUndoManagerCheckpointNotification' type='@' />
  <constant name='NSUndoManagerDidOpenUndoGroupNotification' type='@' />
  <constant name='NSUndoManagerDidRedoChangeNotification' type='@' />
  <constant name='NSUndoManagerDidUndoChangeNotification' type='@' />
  <constant name='NSUndoManagerWillCloseUndoGroupNotification' type='@' />
  <constant name='NSUndoManagerWillRedoChangeNotification' type='@' />
  <constant name='NSUndoManagerWillUndoChangeNotification' type='@' />
  <constant name='NSUnionOfArraysKeyValueOperator' type='@' />
  <constant name='NSUnionOfObjectsKeyValueOperator' type='@' />
  <constant name='NSUnionOfSetsKeyValueOperator' type='@' />
  <constant name='NSUserDefaultsDidChangeNotification' type='@' />
  <constant name='NSWeekDayNameArray' type='@' />
  <constant name='NSWillBecomeMultiThreadedNotification' type='@' />
  <constant name='NSXMLParserErrorDomain' type='@' />
  <constant name='NSHelpAnchorErrorKey' type='@' />
  <constant name='NSYearMonthWeekDesignations' type='@' />
  <constant name='NSZeroPoint' type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
  <constant name='NSZeroRect' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  <constant name='NSZeroSize' type='{_NSSize=ff}' type64='{CGSize=dd}' />
  <constant name='NSLocaleCollatorIdentifier' type='@' />
  <constant name='NSLocaleQuotationBeginDelimiterKey' type='@' />
  <constant name='NSLocaleQuotationEndDelimiterKey' type='@' />
  <constant name='NSLocaleAlternateQuotationBeginDelimiterKey' type='@' />
  <constant name='NSLocaleAlternateQuotationEndDelimiterKey' type='@' />
  <constant name='NSRepublicOfChinaCalendar' type='@' />
  <constant name='NSPersianCalendar' type='@' />
  <constant name='NSIndianCalendar' type='@' />
  <constant name='NSISO8601Calendar' type='@' />
  <constant name='NSTextCheckingNameKey' type='@' />
  <constant name='NSTextCheckingJobTitleKey' type='@' />
  <constant name='NSTextCheckingOrganizationKey' type='@' />
  <constant name='NSTextCheckingStreetKey' type='@' />
  <constant name='NSTextCheckingCityKey' type='@' />
  <constant name='NSTextCheckingStateKey' type='@' />
  <constant name='NSTextCheckingZIPKey' type='@' />
  <constant name='NSTextCheckingCountryKey' type='@' />
  <constant name='NSTextCheckingPhoneKey' type='@' />
  <enum name='NSFileWriteVolumeReadOnlyError' value='642' />
  <enum name='NSTextCheckingTypeOrthography' value='1' />
  <enum name='NSTextCheckingTypeSpelling' value='2' />
  <enum name='NSTextCheckingTypeGrammar' value='4' />
  <enum name='NSTextCheckingTypeDate' value='8' />
  <enum name='NSTextCheckingTypeAddress' value='16' />
  <enum name='NSTextCheckingTypeLink' value='32' />
  <enum name='NSTextCheckingTypeQuote' value='64' />
  <enum name='NSTextCheckingTypeDash' value='128' />
  <enum name='NSTextCheckingTypeReplacement' value='256' />
  <enum name='NSTextCheckingTypeCorrection' value='512' />
  <enum name='NSTextCheckingAllSystemTypes' value='4294967295' />
  <enum name='NSTextCheckingAllCustomTypes' value='18446744069414584320' />
  <enum name='NSTextCheckingAllTypes' value='18446744073709551615' />
  <enum name='NSTaskTerminationReasonExit' value='1' />
  <enum name='NSTaskTerminationReasonUncaughtSignal' value='2' />
  <enum name='NSStringEnumerationByLines' value='0' />
  <enum name='NSStringEnumerationByParagraphs' value='1' />
  <enum name='NSStringEnumerationByComposedCharacterSequences' value='2' />
  <enum name='NSStringEnumerationByWords' value='3' />
  <enum name='NSStringEnumerationBySentences' value='4' />
  <enum name='NSStringEnumerationReverse' value='256' />
  <enum name='NSStringEnumerationSubstringNotRequired' value='512' />
  <enum name='NSStringEnumerationLocalized' value='1024' />
  <enum name='NSPropertyListReadCorruptError' value='3840' />
  <enum name='NSPropertyListReadUnknownVersionError' value='3841' />
  <enum name='NSPropertyListReadStreamError' value='3842' />
  <enum name='NSPropertyListWriteStreamError' value='3851' />
  <enum name='NSPropertyListErrorMinimum' value='3840' />
  <enum name='NSPropertyListErrorMaximum' value='4095' />
  <enum name='NSProprietaryStringEncoding' value='65536' />
  <enum name='NSASCIIStringEncoding' value='1' />
  <enum name='NSAdminApplicationDirectory' value='4' />
  <enum name='NSAggregateExpressionType' value='14' />
  <enum name='NSBlockExpressionType' value='19' />
  <enum name='NSAllApplicationsDirectory' value='100' />
  <enum name='NSAllDomainsMask' value='65535' />
  <enum name='NSAllLibrariesDirectory' value='101' />
  <enum name='NSAllPredicateModifier' value='1' />
  <enum name='NSAnchoredSearch' value='8' />
  <enum name='NSAndPredicateType' value='1' />
  <enum name='NSAnyPredicateModifier' value='2' />
  <enum name='NSApplicationDirectory' value='1' />
  <enum name='NSApplicationSupportDirectory' value='14' />
  <enum name='NSArgumentEvaluationScriptError' value='3' />
  <enum name='NSArgumentsWrongScriptError' value='6' />
  <enum name='NSAtomicWrite' value='1' />
  <enum name='NSDataSearchBackwards' value='1' />
  <enum name='NSDataSearchAnchored' value='2' />
  <enum name='NSBackwardsSearch' value='4' />
  <enum name='NSBeginsWithComparison' value='5' />
  <enum name='NSBeginsWithPredicateOperatorType' value='8' />
  <enum name='NSBetweenPredicateOperatorType' value='100' />
  <enum name='NSBundleExecutableArchitectureI386' value='7' />
  <enum name='NSBundleExecutableArchitecturePPC' value='18' />
  <enum name='NSBundleExecutableArchitecturePPC64' value='16777234' />
  <enum name='NSBundleExecutableArchitectureX86_64' value='16777223' />
  <enum name='NSCachesDirectory' value='13' />
  <enum name='NSCalculationDivideByZero' value='4' />
  <enum name='NSCalculationLossOfPrecision' value='1' />
  <enum name='NSCalculationNoError' value='0' />
  <enum name='NSCalculationOverflow' value='3' />
  <enum name='NSCalculationUnderflow' value='2' />
  <enum name='NSCannotCreateScriptCommandError' value='10' />
  <enum name='NSCaseInsensitivePredicateOption' value='1' />
  <enum name='NSCaseInsensitiveSearch' value='1' />
  <enum name='NSCollectorDisabledOption' value='2' />
  <enum name='NSConstantValueExpressionType' value='0' />
  <enum name='NSContainerSpecifierError' value='2' />
  <enum name='NSContainsComparison' value='7' />
  <enum name='NSContainsPredicateOperatorType' value='99' />
  <enum name='NSCoreServiceDirectory' value='10' />
  <enum name='NSAutosavedInformationDirectory' value='11' />
  <enum name='NSCustomSelectorPredicateOperatorType' value='11' />
  <enum name='NSDateFormatterBehavior10_0' value='1000' />
  <enum name='NSDateFormatterBehavior10_4' value='1040' />
  <enum name='NSDateFormatterBehaviorDefault' value='0' />
  <enum name='NSDateFormatterFullStyle' value='4' />
  <enum name='NSDateFormatterLongStyle' value='3' />
  <enum name='NSDateFormatterMediumStyle' value='2' />
  <enum name='NSDateFormatterNoStyle' value='0' />
  <enum name='NSDateFormatterShortStyle' value='1' />
  <enum name='NSDayCalendarUnit' value='16' />
  <enum name='NSDecimalMaxSize' value='8' />
  <enum name='NSDemoApplicationDirectory' value='2' />
  <enum name='NSDesktopDirectory' value='12' />
  <enum name='NSDeveloperApplicationDirectory' value='3' />
  <enum name='NSDeveloperDirectory' value='6' />
  <enum name='NSDiacriticInsensitivePredicateOption' value='2' />
  <enum name='NSDiacriticInsensitiveSearch' value='128' />
  <enum name='NSDirectPredicateModifier' value='0' />
  <enum name='NSDocumentDirectory' value='9' />
  <enum name='NSDocumentationDirectory' value='8' />
  <enum name='NSDownloadsDirectory' value='15' />
  <enum name='NSInputMethodsDirectory' value='16' />
  <enum name='NSMoviesDirectory' value='17' />
  <enum name='NSMusicDirectory' value='18' />
  <enum name='NSPicturesDirectory' value='19' />
  <enum name='NSPrinterDescriptionDirectory' value='20' />
  <enum name='NSSharedPublicDirectory' value='21' />
  <enum name='NSPreferencePanesDirectory' value='22' />
  <enum name='NSItemReplacementDirectory' value='99' />
  <enum name='NSEndsWithComparison' value='6' />
  <enum name='NSEndsWithPredicateOperatorType' value='9' />
  <enum name='NSEqualToComparison' value='0' />
  <enum name='NSEqualToPredicateOperatorType' value='4' />
  <enum name='NSEraCalendarUnit' value='2' />
  <enum name='NSEvaluatedObjectExpressionType' value='1' />
  <enum name='NSEverySubelement' value='1' />
  <enum name='NSExecutableArchitectureMismatchError' value='3585' />
  <enum name='NSExecutableErrorMaximum' value='3839' />
  <enum name='NSExecutableErrorMinimum' value='3584' />
  <enum name='NSExecutableLinkError' value='3588' />
  <enum name='NSExecutableLoadError' value='3587' />
  <enum name='NSExecutableNotLoadableError' value='3584' />
  <enum name='NSExecutableRuntimeMismatchError' value='3586' />
  <enum name='NSFileErrorMaximum' value='1023' />
  <enum name='NSFileErrorMinimum' value='0' />
  <enum name='NSFileLockingError' value='255' />
  <enum name='NSFileNoSuchFileError' value='4' />
  <enum name='NSFileReadCorruptFileError' value='259' />
  <enum name='NSFileReadInapplicableStringEncodingError' value='261' />
  <enum name='NSFileReadInvalidFileNameError' value='258' />
  <enum name='NSFileReadNoPermissionError' value='257' />
  <enum name='NSFileReadNoSuchFileError' value='260' />
  <enum name='NSFileReadTooLargeError' value='263' />
  <enum name='NSFileReadUnknownError' value='256' />
  <enum name='NSFileReadUnknownStringEncodingError' value='264' />
  <enum name='NSFileReadUnsupportedSchemeError' value='262' />
  <enum name='NSFileWriteInapplicableStringEncodingError' value='517' />
  <enum name='NSFileWriteInvalidFileNameError' value='514' />
  <enum name='NSFileWriteNoPermissionError' value='513' />
  <enum name='NSFileWriteOutOfSpaceError' value='640' />
  <enum name='NSFileWriteUnknownError' value='512' />
  <enum name='NSFileWriteUnsupportedSchemeError' value='518' />
  <enum name='NSForcedOrderingSearch' value='512' />
  <enum name='NSFormattingError' value='2048' />
  <enum name='NSFormattingErrorMaximum' value='2559' />
  <enum name='NSFormattingErrorMinimum' value='2048' />
  <enum name='NSFoundationVersionNumber10_0' value='397.39999999999998' />
  <enum name='NSFoundationVersionNumber10_1' value='425.0' />
  <enum name='NSFoundationVersionNumber10_1_1' value='425.0' />
  <enum name='NSFoundationVersionNumber10_1_2' value='425.0' />
  <enum name='NSFoundationVersionNumber10_1_3' value='425.0' />
  <enum name='NSFoundationVersionNumber10_1_4' value='425.0' />
  <enum name='NSFoundationVersionNumber10_2' value='462.0' />
  <enum name='NSFoundationVersionNumber10_2_1' value='462.0' />
  <enum name='NSFoundationVersionNumber10_2_2' value='462.0' />
  <enum name='NSFoundationVersionNumber10_2_3' value='462.0' />
  <enum name='NSFoundationVersionNumber10_2_4' value='462.0' />
  <enum name='NSFoundationVersionNumber10_2_5' value='462.0' />
  <enum name='NSFoundationVersionNumber10_2_6' value='462.0' />
  <enum name='NSFoundationVersionNumber10_2_7' value='462.69999999999999' />
  <enum name='NSFoundationVersionNumber10_2_8' value='462.69999999999999' />
  <enum name='NSFoundationVersionNumber10_3' value='500.0' />
  <enum name='NSFoundationVersionNumber10_3_1' value='500.0' />
  <enum name='NSFoundationVersionNumber10_3_2' value='500.30000000000001' />
  <enum name='NSFoundationVersionNumber10_3_3' value='500.54000000000002' />
  <enum name='NSFoundationVersionNumber10_3_4' value='500.56' />
  <enum name='NSFoundationVersionNumber10_3_5' value='500.56' />
  <enum name='NSFoundationVersionNumber10_3_6' value='500.56' />
  <enum name='NSFoundationVersionNumber10_3_7' value='500.56' />
  <enum name='NSFoundationVersionNumber10_3_8' value='500.56' />
  <enum name='NSFoundationVersionNumber10_3_9' value='500.57999999999998' />
  <enum name='NSFoundationVersionNumber10_4' value='567.0' />
  <enum name='NSFoundationVersionNumber10_4_1' value='567.0' />
  <enum name='NSFoundationVersionNumber10_4_10' value='567.28999999999996' />
  <enum name='NSFoundationVersionNumber10_4_11' value='567.36000000000001' />
  <enum name='NSFoundationVersionNumber10_4_2' value='567.12' />
  <enum name='NSFoundationVersionNumber10_4_3' value='567.21000000000004' />
  <enum name='NSFoundationVersionNumber10_4_4_Intel' value='567.23000000000002' />
  <enum name='NSFoundationVersionNumber10_4_4_PowerPC' value='567.21000000000004' />
  <enum name='NSFoundationVersionNumber10_4_5' value='567.25' />
  <enum name='NSFoundationVersionNumber10_4_6' value='567.25999999999999' />
  <enum name='NSFoundationVersionNumber10_4_7' value='567.26999999999998' />
  <enum name='NSFoundationVersionNumber10_4_8' value='567.27999999999997' />
  <enum name='NSFoundationVersionNumber10_4_9' value='567.28999999999996' />
  <enum name='NSFoundationVersionNumber10_5' value='677.00' />
  <enum name='NSFoundationVersionNumber10_5_1' value='677.10' />
  <enum name='NSFoundationVersionNumber10_5_2' value='677.15' />
  <enum name='NSFoundationVersionNumber10_5_3' value='677.19' />
  <enum name='NSFoundationVersionNumber10_5_4' value='677.19' />
  <enum name='NSFoundationVersionNumber10_5_5' value='677.21' />
  <enum name='NSFoundationVersionNumber10_5_6' value='677.22' />
  <enum name='NSFoundationVersionWithFileManagerResourceForkSupport' value='412' />
  <enum name='NSFunctionExpressionType' value='4' />
  <enum name='NSEnumerationConcurrent' value='1' />
  <enum name='NSEnumerationReverse' value='2' />
  <enum name='NSSortConcurrent' value='1' />
  <enum name='NSSortStable' value='16' />
  <enum name='NSGEOMETRY_TYPES_SAME_AS_CGGEOMETRY_TYPES' value64='1' />
  <enum name='NSGreaterThanComparison' value='4' />
  <enum name='NSGreaterThanOrEqualToComparison' value='3' />
  <enum name='NSGreaterThanOrEqualToPredicateOperatorType' value='3' />
  <enum name='NSGreaterThanPredicateOperatorType' value='2' />
  <enum name='NSHPUXOperatingSystem' value='4' />
  <enum name='NSHTTPCookieAcceptPolicyAlways' value='0' />
  <enum name='NSHTTPCookieAcceptPolicyNever' value='1' />
  <enum name='NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain' value='2' />
  <enum name='NSHashTableCopyIn' value='65536' />
  <enum name='NSHashTableObjectPointerPersonality' value='512' />
  <enum name='NSHashTableStrongMemory' value='0' />
  <enum name='NSHashTableZeroingWeakMemory' value='1' />
  <enum name='NSHourCalendarUnit' value='32' />
  <enum name='NSINTEGER_DEFINED' value='1' />
  <enum name='NSISO2022JPStringEncoding' value='21' />
  <enum name='NSISOLatin1StringEncoding' value='5' />
  <enum name='NSISOLatin2StringEncoding' value='9' />
  <enum name='NSInPredicateOperatorType' value='10' />
  <enum name='NSIndexSubelement' value='0' />
  <enum name='NSIntegerMax' value='2147483647' value64='9223372036854775807' />
  <enum name='NSIntegerMin' value='-2147483648' value64='-9223372036854775808' />
  <enum name='NSInternalScriptError' value='8' />
  <enum name='NSInternalSpecifierError' value='5' />
  <enum name='NSIntersectSetExpressionType' value='6' />
  <enum name='NSInvalidIndexSpecifierError' value='4' />
  <enum name='NSJapaneseEUCStringEncoding' value='3' />
  <enum name='NSKeyPathExpressionType' value='3' />
  <enum name='NSKeySpecifierEvaluationScriptError' value='2' />
  <enum name='NSKeyValueChangeInsertion' value='2' />
  <enum name='NSKeyValueChangeRemoval' value='3' />
  <enum name='NSKeyValueChangeReplacement' value='4' />
  <enum name='NSKeyValueChangeSetting' value='1' />
  <enum name='NSKeyValueIntersectSetMutation' value='3' />
  <enum name='NSKeyValueMinusSetMutation' value='2' />
  <enum name='NSKeyValueObservingOptionInitial' value='4' />
  <enum name='NSKeyValueObservingOptionNew' value='1' />
  <enum name='NSKeyValueObservingOptionOld' value='2' />
  <enum name='NSKeyValueObservingOptionPrior' value='8' />
  <enum name='NSKeyValueSetSetMutation' value='4' />
  <enum name='NSKeyValueUnionSetMutation' value='1' />
  <enum name='NSKeyValueValidationError' value='1024' />
  <enum name='NSLessThanComparison' value='2' />
  <enum name='NSLessThanOrEqualToComparison' value='1' />
  <enum name='NSLessThanOrEqualToPredicateOperatorType' value='1' />
  <enum name='NSLessThanPredicateOperatorType' value='0' />
  <enum name='NSLibraryDirectory' value='5' />
  <enum name='NSLikePredicateOperatorType' value='7' />
  <enum name='NSLiteralSearch' value='2' />
  <enum name='NSLocalDomainMask' value='2' />
  <enum name='NSMACHOperatingSystem' value='5' />
  <enum name='NSMacOSRomanStringEncoding' value='30' />
  <enum name='NSMachPortDeallocateNone' value='0' />
  <enum name='NSMachPortDeallocateReceiveRight' value='2' />
  <enum name='NSMachPortDeallocateSendRight' value='1' />
  <enum name='NSMapTableCopyIn' value='65536' />
  <enum name='NSMapTableObjectPointerPersonality' value='512' />
  <enum name='NSMapTableStrongMemory' value='0' />
  <enum name='NSMapTableZeroingWeakMemory' value='1' />
  <enum name='NSMappedRead' value='1' />
  <enum name='NSMatchesPredicateOperatorType' value='6' />
  <enum name='NSMaxXEdge' value='2' />
  <enum name='NSMaxXEdge' value='2' />
  <enum name='NSMaxYEdge' value='3' />
  <enum name='NSMaxYEdge' value='3' />
  <enum name='NSMiddleSubelement' value='2' />
  <enum name='NSMinXEdge' value='0' />
  <enum name='NSMinXEdge' value='0' />
  <enum name='NSMinYEdge' value='1' />
  <enum name='NSMinYEdge' value='1' />
  <enum name='NSMinusSetExpressionType' value='7' />
  <enum name='NSMinuteCalendarUnit' value='64' />
  <enum name='NSMonthCalendarUnit' value='8' />
  <enum name='NSNEXTSTEPStringEncoding' value='2' />
  <enum name='NSNetServiceNoAutoRename' value='1' />
  <enum name='NSNetServicesActivityInProgress' value='-72003' />
  <enum name='NSNetServicesBadArgumentError' value='-72004' />
  <enum name='NSNetServicesCancelledError' value='-72005' />
  <enum name='NSNetServicesCollisionError' value='-72001' />
  <enum name='NSNetServicesInvalidError' value='-72006' />
  <enum name='NSNetServicesNotFoundError' value='-72002' />
  <enum name='NSNetServicesTimeoutError' value='-72007' />
  <enum name='NSNetServicesUnknownError' value='-72000' />
  <enum name='NSNetworkDomainMask' value='4' />
  <enum name='NSNoScriptError' value='0' />
  <enum name='NSNoSpecifierError' value='0' />
  <enum name='NSNoSubelement' value='4' />
  <enum name='NSNoTopLevelContainersSpecifierError' value='1' />
  <enum name='NSNonLossyASCIIStringEncoding' value='7' />
  <enum name='NSNotEqualToPredicateOperatorType' value='5' />
  <enum name='NSNotFound' value='2147483647' value64='9223372036854775807' />
  <enum name='NSNotPredicateType' value='0' />
  <enum name='NSNotificationCoalescingOnName' value='1' />
  <enum name='NSNotificationCoalescingOnSender' value='2' />
  <enum name='NSNotificationDeliverImmediately' value='1' />
  <enum name='NSNotificationNoCoalescing' value='0' />
  <enum name='NSNotificationPostToAllSessions' value='2' />
  <enum name='NSNotificationSuspensionBehaviorCoalesce' value='2' />
  <enum name='NSNotificationSuspensionBehaviorDeliverImmediately' value='4' />
  <enum name='NSNotificationSuspensionBehaviorDrop' value='1' />
  <enum name='NSNotificationSuspensionBehaviorHold' value='3' />
  <enum name='NSNumberFormatterBehavior10_0' value='1000' />
  <enum name='NSNumberFormatterBehavior10_4' value='1040' />
  <enum name='NSNumberFormatterBehaviorDefault' value='0' />
  <enum name='NSNumberFormatterCurrencyStyle' value='2' />
  <enum name='NSNumberFormatterDecimalStyle' value='1' />
  <enum name='NSNumberFormatterNoStyle' value='0' />
  <enum name='NSNumberFormatterPadAfterPrefix' value='1' />
  <enum name='NSNumberFormatterPadAfterSuffix' value='3' />
  <enum name='NSNumberFormatterPadBeforePrefix' value='0' />
  <enum name='NSNumberFormatterPadBeforeSuffix' value='2' />
  <enum name='NSNumberFormatterPercentStyle' value='3' />
  <enum name='NSNumberFormatterRoundCeiling' value='0' />
  <enum name='NSNumberFormatterRoundDown' value='2' />
  <enum name='NSNumberFormatterRoundFloor' value='1' />
  <enum name='NSNumberFormatterRoundHalfDown' value='5' />
  <enum name='NSNumberFormatterRoundHalfEven' value='4' />
  <enum name='NSNumberFormatterRoundHalfUp' value='6' />
  <enum name='NSNumberFormatterRoundUp' value='3' />
  <enum name='NSNumberFormatterScientificStyle' value='4' />
  <enum name='NSNumberFormatterSpellOutStyle' value='5' />
  <enum name='NSNumericSearch' value='64' />
  <enum name='NSOSF1OperatingSystem' value='7' />
  <enum name='NSDecimalNoScale' value='32767' />
  <enum name='NSObjectAutoreleasedEvent' value='3' />
  <enum name='NSObjectExtraRefDecrementedEvent' value='5' />
  <enum name='NSObjectExtraRefIncrementedEvent' value='4' />
  <enum name='NSObjectInternalRefDecrementedEvent' value='7' />
  <enum name='NSObjectInternalRefIncrementedEvent' value='6' />
  <enum name='NSOpenStepUnicodeReservedBase' value='62464' />
  <enum name='NSOperationNotSupportedForKeyScriptError' value='9' />
  <enum name='NSOperationNotSupportedForKeySpecifierError' value='6' />
  <enum name='NSOperationQueueDefaultMaxConcurrentOperationCount' value='-1' />
  <enum name='NSOperationQueuePriorityHigh' value='4' />
  <enum name='NSOperationQueuePriorityLow' value='-4' />
  <enum name='NSOperationQueuePriorityNormal' value='0' />
  <enum name='NSOperationQueuePriorityVeryHigh' value='8' />
  <enum name='NSOperationQueuePriorityVeryLow' value='-8' />
  <enum name='NSOrPredicateType' value='2' />
  <enum name='NSOrderedAscending' value='-1' />
  <enum name='NSOrderedDescending' value='1' />
  <enum name='NSOrderedSame' value='0' />
  <enum name='NSPointerFunctionsCStringPersonality' value='768' />
  <enum name='NSPointerFunctionsCopyIn' value='65536' />
  <enum name='NSPointerFunctionsIntegerPersonality' value='1280' />
  <enum name='NSPointerFunctionsMachVirtualMemory' value='4' />
  <enum name='NSPointerFunctionsMallocMemory' value='3' />
  <enum name='NSPointerFunctionsObjectPersonality' value='0' />
  <enum name='NSPointerFunctionsObjectPointerPersonality' value='512' />
  <enum name='NSPointerFunctionsOpaqueMemory' value='2' />
  <enum name='NSPointerFunctionsOpaquePersonality' value='256' />
  <enum name='NSPointerFunctionsStrongMemory' value='0' />
  <enum name='NSPointerFunctionsStructPersonality' value='1024' />
  <enum name='NSPointerFunctionsZeroingWeakMemory' value='1' />
  <enum name='NSPositionAfter' value='0' />
  <enum name='NSPositionBefore' value='1' />
  <enum name='NSPositionBeginning' value='2' />
  <enum name='NSPositionEnd' value='3' />
  <enum name='NSPositionReplace' value='4' />
  <enum name='NSPostASAP' value='2' />
  <enum name='NSPostNow' value='3' />
  <enum name='NSPostWhenIdle' value='1' />
  <enum name='NSPropertyListBinaryFormat_v1_0' value='200' />
  <enum name='NSPropertyListImmutable' value='0' />
  <enum name='NSPropertyListMutableContainers' value='1' />
  <enum name='NSPropertyListMutableContainersAndLeaves' value='2' />
  <enum name='NSPropertyListOpenStepFormat' value='1' />
  <enum name='NSPropertyListXMLFormat_v1_0' value='100' />
  <enum name='NSRandomSubelement' value='3' />
  <enum name='NSReceiverEvaluationScriptError' value='1' />
  <enum name='NSReceiversCantHandleCommandScriptError' value='4' />
  <enum name='NSRelativeAfter' value='0' />
  <enum name='NSRelativeBefore' value='1' />
  <enum name='NSRequiredArgumentsMissingScriptError' value='5' />
  <enum name='NSRoundBankers' value='3' />
  <enum name='NSRoundDown' value='1' />
  <enum name='NSRoundPlain' value='0' />
  <enum name='NSRoundUp' value='2' />
  <enum name='NSSaveOptionsAsk' value='2' />
  <enum name='NSSaveOptionsNo' value='1' />
  <enum name='NSSaveOptionsYes' value='0' />
  <enum name='NSScannedOption' value='1' />
  <enum name='NSSecondCalendarUnit' value='128' />
  <enum name='NSShiftJISStringEncoding' value='8' />
  <enum name='NSSolarisOperatingSystem' value='3' />
  <enum name='NSStreamEventEndEncountered' value='16' />
  <enum name='NSStreamEventErrorOccurred' value='8' />
  <enum name='NSStreamEventHasBytesAvailable' value='2' />
  <enum name='NSStreamEventHasSpaceAvailable' value='4' />
  <enum name='NSStreamEventNone' value='0' />
  <enum name='NSStreamEventOpenCompleted' value='1' />
  <enum name='NSStreamStatusAtEnd' value='5' />
  <enum name='NSStreamStatusClosed' value='6' />
  <enum name='NSStreamStatusError' value='7' />
  <enum name='NSStreamStatusNotOpen' value='0' />
  <enum name='NSStreamStatusOpen' value='2' />
  <enum name='NSStreamStatusOpening' value='1' />
  <enum name='NSStreamStatusReading' value='3' />
  <enum name='NSStreamStatusWriting' value='4' />
  <enum name='NSStringEncodingConversionAllowLossy' value='1' />
  <enum name='NSStringEncodingConversionExternalRepresentation' value='2' />
  <enum name='NSSubqueryExpressionType' value='13' />
  <enum name='NSSunOSOperatingSystem' value='6' />
  <enum name='NSSymbolStringEncoding' value='6' />
  <enum name='NSSystemDomainMask' value='8' />
  <enum name='NSTimeIntervalSince1970' value='978307200.0' />
  <enum name='NSTimeIntervalSince1970' value='978307200.0' />
  <enum name='NSTimeZoneNameStyleGeneric' value='4' />
  <enum name='NSTimeZoneNameStyleShortGeneric' value='5' />
  <enum name='NSURLBookmarkCreationPreferFileIDResolution' value='256' />
  <enum name='NSURLBookmarkCreationMinimalBookmark' value='512' />
  <enum name='NSURLBookmarkCreationSuitableForBookmarkFile' value='1024' />
  <enum name='NSURLBookmarkResolutionWithoutUI' value='256' />
  <enum name='NSURLBookmarkResolutionWithoutMounting' value='512' />
  <enum name='NSTimeZoneNameStyleDaylightSaving' value='2' />
  <enum name='NSTimeZoneNameStyleShortDaylightSaving' value='3' />
  <enum name='NSTimeZoneNameStyleShortStandard' value='1' />
  <enum name='NSTimeZoneNameStyleStandard' value='0' />
  <enum name='NSUIntegerMax' value='4294967295' value64='18446744073709551615' />
  <enum name='NSURLCacheStorageAllowed' value='0' />
  <enum name='NSURLCacheStorageAllowedInMemoryOnly' value='1' />
  <enum name='NSURLCacheStorageNotAllowed' value='2' />
  <enum name='NSURLCredentialPersistenceForSession' value='1' />
  <enum name='NSURLCredentialPersistenceNone' value='0' />
  <enum name='NSURLCredentialPersistencePermanent' value='2' />
  <enum name='NSURLErrorBadServerResponse' value='-1011' />
  <enum name='NSURLErrorBadURL' value='-1000' />
  <enum name='NSURLErrorCancelled' value='-999' />
  <enum name='NSURLErrorCannotCloseFile' value='-3002' />
  <enum name='NSURLErrorCannotConnectToHost' value='-1004' />
  <enum name='NSURLErrorCannotCreateFile' value='-3000' />
  <enum name='NSURLErrorCannotDecodeContentData' value='-1016' />
  <enum name='NSURLErrorCannotDecodeRawData' value='-1015' />
  <enum name='NSURLErrorCannotFindHost' value='-1003' />
  <enum name='NSURLErrorCannotLoadFromNetwork' value='-2000' />
  <enum name='NSURLErrorCannotMoveFile' value='-3005' />
  <enum name='NSURLErrorCannotOpenFile' value='-3001' />
  <enum name='NSURLErrorCannotParseResponse' value='-1017' />
  <enum name='NSURLErrorCannotRemoveFile' value='-3004' />
  <enum name='NSURLErrorCannotWriteToFile' value='-3003' />
  <enum name='NSURLErrorClientCertificateRejected' value='-1205' />
  <enum name='NSURLErrorClientCertificateRequired' value='-1206' />
  <enum name='NSURLErrorDNSLookupFailed' value='-1006' />
  <enum name='NSURLErrorDataLengthExceedsMaximum' value='-1103' />
  <enum name='NSURLErrorDownloadDecodingFailedMidStream' value='-3006' />
  <enum name='NSURLErrorDownloadDecodingFailedToComplete' value='-3007' />
  <enum name='NSURLErrorFileDoesNotExist' value='-1100' />
  <enum name='NSURLErrorFileIsDirectory' value='-1101' />
  <enum name='NSURLErrorHTTPTooManyRedirects' value='-1007' />
  <enum name='NSURLErrorNetworkConnectionLost' value='-1005' />
  <enum name='NSURLErrorNoPermissionsToReadFile' value='-1102' />
  <enum name='NSURLErrorNotConnectedToInternet' value='-1009' />
  <enum name='NSURLErrorRedirectToNonExistentLocation' value='-1010' />
  <enum name='NSURLErrorResourceUnavailable' value='-1008' />
  <enum name='NSURLErrorSecureConnectionFailed' value='-1200' />
  <enum name='NSURLErrorServerCertificateHasBadDate' value='-1201' />
  <enum name='NSURLErrorServerCertificateHasUnknownRoot' value='-1203' />
  <enum name='NSURLErrorServerCertificateNotYetValid' value='-1204' />
  <enum name='NSURLErrorServerCertificateUntrusted' value='-1202' />
  <enum name='NSURLErrorTimedOut' value='-1001' />
  <enum name='NSURLErrorUnknown' value='-1' />
  <enum name='NSURLErrorUnsupportedURL' value='-1002' />
  <enum name='NSURLErrorUserAuthenticationRequired' value='-1013' />
  <enum name='NSURLErrorUserCancelledAuthentication' value='-1012' />
  <enum name='NSURLErrorZeroByteResource' value='-1014' />
  <enum name='NSURLHandleLoadFailed' value='3' />
  <enum name='NSURLHandleLoadInProgress' value='2' />
  <enum name='NSURLHandleLoadSucceeded' value='1' />
  <enum name='NSURLHandleNotLoaded' value='0' />
  <enum name='NSURLRequestReloadIgnoringCacheData' value='1' />
  <enum name='NSURLRequestReloadIgnoringLocalAndRemoteCacheData' value='4' />
  <enum name='NSURLRequestReloadIgnoringLocalCacheData' value='1' />
  <enum name='NSURLRequestReloadRevalidatingCacheData' value='5' />
  <enum name='NSURLRequestReturnCacheDataDontLoad' value='3' />
  <enum name='NSURLRequestReturnCacheDataElseLoad' value='2' />
  <enum name='NSURLRequestUseProtocolCachePolicy' value='0' />
  <enum name='NSURLResponseUnknownLength' value='-1' />
  <enum name='NSUTF16BigEndianStringEncoding' value='-1879047936' />
  <enum name='NSUTF16LittleEndianStringEncoding' value='-1811939072' />
  <enum name='NSUTF16StringEncoding' value='10' />
  <enum name='NSUTF32BigEndianStringEncoding' value='-1744830208' />
  <enum name='NSUTF32LittleEndianStringEncoding' value='-1677721344' />
  <enum name='NSUTF32StringEncoding' value='-1946156800' />
  <enum name='NSUTF8StringEncoding' value='4' />
  <enum name='NSUncachedRead' value='2' />
  <enum name='NSDataReadingMapped' value='1' />
  <enum name='NSDataReadingUncached' value='2' />
  <enum name='NSDataWritingAtomic' value='1' />
  <enum name='NSUndefinedDateComponent' value='2147483647' value64='9223372036854775807' />
  <enum name='NSUndoCloseGroupingRunLoopOrdering' value='350000' />
  <enum name='NSUnicodeStringEncoding' value='10' />
  <enum name='NSUnionSetExpressionType' value='5' />
  <enum name='NSUnknownKeyScriptError' value='7' />
  <enum name='NSUnknownKeySpecifierError' value='3' />
  <enum name='NSUserCancelledError' value='3072' />
  <enum name='NSUserDirectory' value='7' />
  <enum name='NSUserDomainMask' value='1' />
  <enum name='NSValidationErrorMaximum' value='2047' />
  <enum name='NSValidationErrorMinimum' value='1024' />
  <enum name='NSVariableExpressionType' value='2' />
  <enum name='NSWeekCalendarUnit' value='256' />
  <enum name='NSWeekdayCalendarUnit' value='512' />
  <enum name='NSWeekdayOrdinalCalendarUnit' value='1024' />
  <enum name='NSQuarterCalendarUnit' value='2048' />
  <enum name='NSWidthInsensitiveSearch' value='256' />
  <enum name='NSWindows95OperatingSystem' value='2' />
  <enum name='NSWindowsCP1250StringEncoding' value='15' />
  <enum name='NSWindowsCP1251StringEncoding' value='11' />
  <enum name='NSWindowsCP1252StringEncoding' value='12' />
  <enum name='NSWindowsCP1253StringEncoding' value='13' />
  <enum name='NSWindowsCP1254StringEncoding' value='14' />
  <enum name='NSWindowsNTOperatingSystem' value='1' />
  <enum name='NSWrapCalendarComponents' value='1' />
  <enum name='NSXMLAttributeCDATAKind' value='6' />
  <enum name='NSXMLAttributeDeclarationKind' value='10' />
  <enum name='NSXMLAttributeEntitiesKind' value='11' />
  <enum name='NSXMLAttributeEntityKind' value='10' />
  <enum name='NSXMLAttributeEnumerationKind' value='14' />
  <enum name='NSXMLAttributeIDKind' value='7' />
  <enum name='NSXMLAttributeIDRefKind' value='8' />
  <enum name='NSXMLAttributeIDRefsKind' value='9' />
  <enum name='NSXMLAttributeKind' value='3' />
  <enum name='NSXMLAttributeNMTokenKind' value='12' />
  <enum name='NSXMLAttributeNMTokensKind' value='13' />
  <enum name='NSXMLAttributeNotationKind' value='15' />
  <enum name='NSXMLCommentKind' value='6' />
  <enum name='NSXMLDTDKind' value='8' />
  <enum name='NSXMLDocumentHTMLKind' value='2' />
  <enum name='NSXMLDocumentIncludeContentTypeDeclaration' value='262144' />
  <enum name='NSXMLDocumentKind' value='1' />
  <enum name='NSXMLDocumentTextKind' value='3' />
  <enum name='NSXMLDocumentTidyHTML' value='512' />
  <enum name='NSXMLDocumentTidyXML' value='1024' />
  <enum name='NSXMLDocumentValidate' value='8192' />
  <enum name='NSXMLDocumentXHTMLKind' value='1' />
  <enum name='NSXMLDocumentXInclude' value='65536' />
  <enum name='NSXMLDocumentXMLKind' value='0' />
  <enum name='NSXMLElementDeclarationAnyKind' value='18' />
  <enum name='NSXMLElementDeclarationElementKind' value='20' />
  <enum name='NSXMLElementDeclarationEmptyKind' value='17' />
  <enum name='NSXMLElementDeclarationKind' value='11' />
  <enum name='NSXMLElementDeclarationMixedKind' value='19' />
  <enum name='NSXMLElementDeclarationUndefinedKind' value='16' />
  <enum name='NSXMLElementKind' value='2' />
  <enum name='NSXMLEntityDeclarationKind' value='9' />
  <enum name='NSXMLEntityGeneralKind' value='1' />
  <enum name='NSXMLEntityParameterKind' value='4' />
  <enum name='NSXMLEntityParsedKind' value='2' />
  <enum name='NSXMLEntityPredefined' value='5' />
  <enum name='NSXMLEntityUnparsedKind' value='3' />
  <enum name='NSXMLInvalidKind' value='0' />
  <enum name='NSXMLNamespaceKind' value='4' />
  <enum name='NSXMLNodeCompactEmptyElement' value='4' />
  <enum name='NSXMLNodeExpandEmptyElement' value='2' />
  <enum name='NSXMLNodeIsCDATA' value='1' />
  <enum name='NSXMLNodeOptionsNone' value='0' />
  <enum name='NSXMLNodePreserveAll' value='-1048546' />
  <enum name='NSXMLNodePreserveAttributeOrder' value='2097152' />
  <enum name='NSXMLNodePreserveCDATA' value='16777216' />
  <enum name='NSXMLNodePreserveCharacterReferences' value='134217728' />
  <enum name='NSXMLNodePreserveDTD' value='67108864' />
  <enum name='NSXMLNodePreserveEmptyElements' value='6' />
  <enum name='NSXMLNodePreserveEntities' value='4194304' />
  <enum name='NSXMLNodePreserveNamespaceOrder' value='1048576' />
  <enum name='NSXMLNodePreservePrefixes' value='8388608' />
  <enum name='NSXMLNodePreserveQuotes' value='24' />
  <enum name='NSXMLNodePreserveWhitespace' value='33554432' />
  <enum name='NSXMLNodePrettyPrint' value='131072' />
  <enum name='NSXMLNodeUseDoubleQuotes' value='16' />
  <enum name='NSXMLNodeUseSingleQuotes' value='8' />
  <enum name='NSXMLNotationDeclarationKind' value='12' />
  <enum name='NSXMLParserAttributeHasNoValueError' value='41' />
  <enum name='NSXMLParserAttributeListNotFinishedError' value='51' />
  <enum name='NSXMLParserAttributeListNotStartedError' value='50' />
  <enum name='NSXMLParserAttributeNotFinishedError' value='40' />
  <enum name='NSXMLParserAttributeNotStartedError' value='39' />
  <enum name='NSXMLParserAttributeRedefinedError' value='42' />
  <enum name='NSXMLParserCDATANotFinishedError' value='63' />
  <enum name='NSXMLParserCharacterRefAtEOFError' value='10' />
  <enum name='NSXMLParserCharacterRefInDTDError' value='13' />
  <enum name='NSXMLParserCharacterRefInEpilogError' value='12' />
  <enum name='NSXMLParserCharacterRefInPrologError' value='11' />
  <enum name='NSXMLParserCommentContainsDoubleHyphenError' value='80' />
  <enum name='NSXMLParserCommentNotFinishedError' value='45' />
  <enum name='NSXMLParserConditionalSectionNotFinishedError' value='59' />
  <enum name='NSXMLParserConditionalSectionNotStartedError' value='58' />
  <enum name='NSXMLParserDOCTYPEDeclNotFinishedError' value='61' />
  <enum name='NSXMLParserDelegateAbortedParseError' value='512' />
  <enum name='NSXMLParserDocumentStartError' value='3' />
  <enum name='NSXMLParserElementContentDeclNotFinishedError' value='55' />
  <enum name='NSXMLParserElementContentDeclNotStartedError' value='54' />
  <enum name='NSXMLParserEmptyDocumentError' value='4' />
  <enum name='NSXMLParserEncodingNotSupportedError' value='32' />
  <enum name='NSXMLParserEntityBoundaryError' value='90' />
  <enum name='NSXMLParserEntityIsExternalError' value='29' />
  <enum name='NSXMLParserEntityIsParameterError' value='30' />
  <enum name='NSXMLParserEntityNotFinishedError' value='37' />
  <enum name='NSXMLParserEntityNotStartedError' value='36' />
  <enum name='NSXMLParserEntityRefAtEOFError' value='14' />
  <enum name='NSXMLParserEntityRefInDTDError' value='17' />
  <enum name='NSXMLParserEntityRefInEpilogError' value='16' />
  <enum name='NSXMLParserEntityRefInPrologError' value='15' />
  <enum name='NSXMLParserEntityRefLoopError' value='89' />
  <enum name='NSXMLParserEntityReferenceMissingSemiError' value='23' />
  <enum name='NSXMLParserEntityReferenceWithoutNameError' value='22' />
  <enum name='NSXMLParserEntityValueRequiredError' value='84' />
  <enum name='NSXMLParserEqualExpectedError' value='75' />
  <enum name='NSXMLParserExternalStandaloneEntityError' value='82' />
  <enum name='NSXMLParserExternalSubsetNotFinishedError' value='60' />
  <enum name='NSXMLParserExtraContentError' value='86' />
  <enum name='NSXMLParserGTRequiredError' value='73' />
  <enum name='NSXMLParserInternalError' value='1' />
  <enum name='NSXMLParserInvalidCharacterError' value='9' />
  <enum name='NSXMLParserInvalidCharacterInEntityError' value='87' />
  <enum name='NSXMLParserInvalidCharacterRefError' value='8' />
  <enum name='NSXMLParserInvalidConditionalSectionError' value='83' />
  <enum name='NSXMLParserInvalidDecimalCharacterRefError' value='7' />
  <enum name='NSXMLParserInvalidEncodingError' value='81' />
  <enum name='NSXMLParserInvalidEncodingNameError' value='79' />
  <enum name='NSXMLParserInvalidHexCharacterRefError' value='6' />
  <enum name='NSXMLParserInvalidURIError' value='91' />
  <enum name='NSXMLParserLTRequiredError' value='72' />
  <enum name='NSXMLParserLTSlashRequiredError' value='74' />
  <enum name='NSXMLParserLessThanSymbolInAttributeError' value='38' />
  <enum name='NSXMLParserLiteralNotFinishedError' value='44' />
  <enum name='NSXMLParserLiteralNotStartedError' value='43' />
  <enum name='NSXMLParserMisplacedCDATAEndStringError' value='62' />
  <enum name='NSXMLParserMisplacedXMLDeclarationError' value='64' />
  <enum name='NSXMLParserMixedContentDeclNotFinishedError' value='53' />
  <enum name='NSXMLParserMixedContentDeclNotStartedError' value='52' />
  <enum name='NSXMLParserNAMERequiredError' value='68' />
  <enum name='NSXMLParserNMTOKENRequiredError' value='67' />
  <enum name='NSXMLParserNamespaceDeclarationError' value='35' />
  <enum name='NSXMLParserNoDTDError' value='94' />
  <enum name='NSXMLParserNotWellBalancedError' value='85' />
  <enum name='NSXMLParserNotationNotFinishedError' value='49' />
  <enum name='NSXMLParserNotationNotStartedError' value='48' />
  <enum name='NSXMLParserOutOfMemoryError' value='2' />
  <enum name='NSXMLParserPCDATARequiredError' value='69' />
  <enum name='NSXMLParserParsedEntityRefAtEOFError' value='18' />
  <enum name='NSXMLParserParsedEntityRefInEpilogError' value='20' />
  <enum name='NSXMLParserParsedEntityRefInInternalError' value='88' />
  <enum name='NSXMLParserParsedEntityRefInInternalSubsetError' value='21' />
  <enum name='NSXMLParserParsedEntityRefInPrologError' value='19' />
  <enum name='NSXMLParserParsedEntityRefMissingSemiError' value='25' />
  <enum name='NSXMLParserParsedEntityRefNoNameError' value='24' />
  <enum name='NSXMLParserPrematureDocumentEndError' value='5' />
  <enum name='NSXMLParserProcessingInstructionNotFinishedError' value='47' />
  <enum name='NSXMLParserProcessingInstructionNotStartedError' value='46' />
  <enum name='NSXMLParserPublicIdentifierRequiredError' value='71' />
  <enum name='NSXMLParserSeparatorRequiredError' value='66' />
  <enum name='NSXMLParserSpaceRequiredError' value='65' />
  <enum name='NSXMLParserStandaloneValueError' value='78' />
  <enum name='NSXMLParserStringNotClosedError' value='34' />
  <enum name='NSXMLParserStringNotStartedError' value='33' />
  <enum name='NSXMLParserTagNameMismatchError' value='76' />
  <enum name='NSXMLParserURIFragmentError' value='92' />
  <enum name='NSXMLParserURIRequiredError' value='70' />
  <enum name='NSXMLParserUndeclaredEntityError' value='26' />
  <enum name='NSXMLParserUnfinishedTagError' value='77' />
  <enum name='NSXMLParserUnknownEncodingError' value='31' />
  <enum name='NSXMLParserUnparsedEntityError' value='28' />
  <enum name='NSXMLParserXMLDeclNotFinishedError' value='57' />
  <enum name='NSXMLParserXMLDeclNotStartedError' value='56' />
  <enum name='NSXMLProcessingInstructionKind' value='5' />
  <enum name='NSXMLTextKind' value='7' />
  <enum name='NSYearCalendarUnit' value='4' />
  <enum name='NS_BigEndian' value='2' />
  <enum name='NS_LittleEndian' value='1' />
  <enum name='NS_UNICHAR_IS_EIGHT_BIT' value='0' />
  <enum name='NS_UnknownByteOrder' value='0' />
  <enum name='NSBinarySearchingFirstEqual' value='256' />
  <enum name='NSBinarySearchingLastEqual' value='512' />
  <enum name='NSBinarySearchingInsertionIndex' value='1024' />
  <enum name='NSAttributedStringEnumerationReverse' value='2' />
  <enum name='NSAttributedStringEnumerationLongestEffectiveRangeNotRequired' value='1048576' />
  <enum name='NSVolumeEnumerationSkipHiddenVolumes' value='2' />
  <enum name='NSVolumeEnumerationProduceFileReferenceURLs' value='4' />
  <enum name='NSDirectoryEnumerationSkipsSubdirectoryDescendants' value='1' />
  <enum name='NSDirectoryEnumerationSkipsPackageDescendants' value='2' />
  <enum name='NSDirectoryEnumerationSkipsHiddenFiles' value='4' />
  <enum name='NSFileManagerItemReplacementUsingNewMetadataOnly' value='1' />
  <enum name='NSFileManagerItemReplacementWithoutDeletingBackupItem' value='2' />
  <enum name='NSLocaleLanguageDirectionUnknown' value='0' />
  <enum name='NSLocaleLanguageDirectionLeftToRight' value='1' />
  <enum name='NSLocaleLanguageDirectionRightToLeft' value='2' />
  <enum name='NSLocaleLanguageDirectionTopToBottom' value='3' />
  <enum name='NSLocaleLanguageDirectionBottomToTop' value='4' />
  <function name='NSDecimalAdd' >
    <retval type='I' type64='Q' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSDecimalDivide' >
    <retval type='I' type64='Q' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSDecimalMultiply' >
    <retval type='I' type64='Q' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSDecimalSubtract' >
    <retval type='I' type64='Q' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSDecimalCopy' >
    <retval type='v' type64='v' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
  </function>
  <function name='NSDecimalCompare' >
    <retval type='i' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
  </function>
  <function name='NSDecimalRound' >
    <retval type='v' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='I' type64='Q' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSDecimalNormalize' >
    <retval type='I' type64='Q' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSDecimalPower' >
    <retval type='I' type64='Q' />
    <arg type='^{_NSDecimal=}' />
    <arg type='^{_NSDecimal=}' />
    <arg type='I' type64='Q' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSDecimalString' >
    <retval type='@' />
    <arg type='^{_NSDecimal=}' />
    <arg type='@' />
  </function>
  <function name='NSDecimalCompact' >
    <retval type='v' type64='v' />
    <arg type='^{_NSDecimal=}' />
  </function>
  <function name='NSDecimalIsNotANumber' >
    <retval type='B' type64='B' />
    <arg type='^{_NSDecimal=}' />
  </function>
  <function name='NSAllHashTableObjects'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSAllMapTableKeys'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSAllMapTableValues'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSAllocateObject'>
    <retval type='@' type64='@' />
    <arg type='#' type64='#' />
    <arg type='I' type64='Q' />
    <arg type='^{_NSZone=}' />
  </function>
  <function name='NSClassFromString'>
    <retval type='#' type64='#' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSCompareHashTables'>
    <retval type='B' type64='B' />
    <arg type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSCompareMapTables'>
    <retval type='B' type64='B' />
    <arg type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSContainsRect'>
    <retval type='B' type64='B' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function name='NSCopyHashTableWithZone'>
    <retval already_cfretained='true' type='@' type64='@' />
    <arg type='@' type64='@' />
    <arg type='^{_NSZone=}' />
  </function>
  <function name='NSCopyMapTableWithZone'>
    <retval already_cfretained='true' type='@' type64='@' />
    <arg type='@' type64='@' />
    <arg type='^{_NSZone=}' />
  </function>
  <function name='NSCopyObject'>
    <retval already_cfretained='true' type='@' type64='@' />
    <arg type='@' type64='@' />
    <arg type='I' type64='Q' />
    <arg type='^{_NSZone=}' />
  </function>
  <function name='NSCountHashTable'>
    <retval type='I' type64='Q' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSCountMapTable'>
    <retval type='I' type64='Q' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSCreateHashTable'>
    <retval already_cfretained='true' type='@' type64='@' />
    <arg type='{NSHashTableCallBacks=^?^?^?^?^?}' type64='{NSHashTableCallBacks=^?^?^?^?^?}' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSCreateHashTableWithZone'>
    <retval already_cfretained='true' type='@' type64='@' />
    <arg type='{NSHashTableCallBacks=^?^?^?^?^?}' type64='{NSHashTableCallBacks=^?^?^?^?^?}' />
    <arg type='I' type64='Q' />
    <arg type='^{_NSZone=}' />
  </function>
  <function name='NSCreateMapTable'>
    <retval already_cfretained='true' type='@' type64='@' />
    <arg type='{NSMapTableKeyCallBacks=^?^?^?^?^?^v}' type64='{NSMapTableKeyCallBacks=^?^?^?^?^?^v}' />
    <arg type='{NSMapTableValueCallBacks=^?^?^?}' type64='{NSMapTableValueCallBacks=^?^?^?}' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSCreateMapTableWithZone'>
    <retval already_cfretained='true' type='@' type64='@' />
    <arg type='{NSMapTableKeyCallBacks=^?^?^?^?^?^v}' type64='{NSMapTableKeyCallBacks=^?^?^?^?^?^v}' />
    <arg type='{NSMapTableValueCallBacks=^?^?^?}' type64='{NSMapTableValueCallBacks=^?^?^?}' />
    <arg type='I' type64='Q' />
    <arg type='^{_NSZone=}' />
  </function>
  <function name='NSCreateZone'>
    <retval type='^{_NSZone=}' />
    <arg type='I' type64='Q' />
    <arg type='I' type64='Q' />
    <arg type='B' type64='B' />
  </function>
  <function name='NSDeallocateObject'>
    <retval type='v' type64='v' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSDecrementExtraRefCountWasZero'>
    <retval type='B' type64='B' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSDefaultMallocZone'>
    <retval type='^{_NSZone=}' />
  </function>
  <function name='NSDivideRect'>
    <retval type='v' type64='v' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg null_accepted='false' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type_modifier='o' />
    <arg null_accepted='false' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type_modifier='o' />
    <arg type='f' type64='d' />
    <arg type='I' />
  </function>
  <function name='NSEnumerateHashTable'>
    <retval type='{NSHashEnumerator=II^v}' type64='{NSHashEnumerator=QQ^v}' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSEnumerateMapTable'>
    <retval type='{NSMapEnumerator=II^v}' type64='{NSMapEnumerator=QQ^v}' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSEqualPoints'>
    <retval type='B' type64='B' />
    <arg type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    <arg type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
  </function>
  <function name='NSEqualRects'>
    <retval type='B' type64='B' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function name='NSEqualSizes'>
    <retval type='B' type64='B' />
    <arg type='{_NSSize=ff}' type64='{CGSize=dd}' />
    <arg type='{_NSSize=ff}' type64='{CGSize=dd}' />
  </function>
  <function name='NSExtraRefCount'>
    <retval type='I' type64='Q' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSFileTypeForHFSTypeCode'>
    <retval type='@' type64='@' />
    <arg type='L' type64='Q' />
  </function>
  <function name='NSFreeHashTable'>
    <retval type='v' type64='v' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSFreeMapTable'>
    <retval type='v' type64='v' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSFullUserName'>
    <retval type='@' type64='@' />
  </function>
  <function name='NSGetSizeAndAlignment'>
    <retval c_array_delimited_by_null='true' type='^t' type64='^t' />
    <arg c_array_delimited_by_null='true' type='^t' type64='^t' type_modifier='n' />
    <arg type='^I' type64='^Q' type_modifier='o' />
    <arg type='^I' type64='^Q' type_modifier='o' />
  </function>
  <function name='NSHFSTypeCodeFromFileType'>
    <retval type='L' type64='Q' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSHFSTypeOfFile'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSHomeDirectory'>
    <retval type='@' type64='@' />
  </function>
  <function name='NSHomeDirectoryForUser'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSIncrementExtraRefCount'>
    <retval type='v' type64='v' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSInsetRect'>
    <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='f' type64='d' />
    <arg type='f' type64='d' />
  </function>
  <function name='NSIntegralRect'>
    <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function name='NSIntersectionRange'>
    <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
  </function>
  <function name='NSIntersectionRect'>
    <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function name='NSIntersectsRect'>
    <retval type='B' type64='B' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function name='NSIsEmptyRect'>
    <retval type='B' type64='B' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function name='NSIsFreedObject'>
    <retval type='B' type64='B' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSJavaBundleCleanup'>
    <retval type='v' type64='v' />
    <arg type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSJavaBundleSetup'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSJavaClassesForBundle'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
    <arg type='B' type64='B' />
    <arg type='^@' type_modifier='o' />
  </function>
  <function name='NSJavaClassesFromPath'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
    <arg type='@' type64='@' />
    <arg type='B' type64='B' />
    <arg type='^@' type_modifier='o' />
  </function>
  <function name='NSJavaNeedsToLoadClasses'>
    <retval type='B' type64='B' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSJavaNeedsVirtualMachine'>
    <retval type='B' type64='B' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSJavaObjectNamedInPath'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSJavaProvidesClasses'>
    <retval type='B' type64='B' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSJavaSetup'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSJavaSetupVirtualMachine'>
    <retval type='@' type64='@' />
  </function>
  <function name='NSLog' variadic='true'>
    <retval type='v' type64='v' />
    <arg printf_format='true' type='@' type64='@' />
  </function>
  <function name='NSLogPageSize'>
    <retval type='I' type64='Q' />
  </function>
  <function name='NSMouseInRect'>
    <retval type='B' type64='B' />
    <arg type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='B' type64='B' />
  </function>
  <function name='NSOffsetRect'>
    <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='f' type64='d' />
    <arg type='f' type64='d' />
  </function>
  <function name='NSOpenStepRootDirectory'>
    <retval type='@' type64='@' />
  </function>
  <function name='NSPageSize'>
    <retval type='I' type64='Q' />
  </function>
  <function name='NSPointFromString'>
    <retval type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSPointInRect'>
    <retval type='B' type64='B' />
    <arg type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function name='NSProtocolFromString'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSRangeFromString'>
    <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSRealMemoryAvailable'>
    <retval type='I' type64='Q' />
  </function>
  <function name='NSRecordAllocationEvent'>
    <retval type='v' type64='v' />
    <arg type='i' type64='i' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSRectFromString'>
    <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSRecycleZone'>
    <retval type='v' type64='v' />
    <arg type='^{_NSZone=}' />
  </function>
  <function name='NSResetHashTable'>
    <retval type='v' type64='v' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSResetMapTable'>
    <retval type='v' type64='v' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSRoundDownToMultipleOfPageSize'>
    <retval type='I' type64='Q' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSRoundUpToMultipleOfPageSize'>
    <retval type='I' type64='Q' />
    <arg type='I' type64='Q' />
  </function>
  <function name='NSSearchPathForDirectoriesInDomains'>
    <retval type='@' type64='@' />
    <arg type='I' />
    <arg type='I' />
    <arg type='B' type64='B' />
  </function>
  <function name='NSSelectorFromString'>
    <retval type=':' type64=':' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSSetZoneName'>
    <retval type='v' type64='v' />
    <arg type='^{_NSZone=}' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSShouldRetainWithZone'>
    <retval type='B' type64='B' />
    <arg type='@' type64='@' />
    <arg type='^{_NSZone=}' />
  </function>
  <function name='NSSizeFromString'>
    <retval type='{_NSSize=ff}' type64='{CGSize=dd}' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSStringFromClass'>
    <retval type='@' type64='@' />
    <arg type='#' type64='#' />
  </function>
  <function name='NSStringFromHashTable'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSStringFromMapTable'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSStringFromPoint'>
    <retval type='@' type64='@' />
    <arg type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
  </function>
  <function name='NSStringFromProtocol'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function name='NSStringFromRange'>
    <retval type='@' type64='@' />
    <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
  </function>
  <function name='NSStringFromRect'>
    <retval type='@' type64='@' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function name='NSStringFromSelector'>
    <retval type='@' type64='@' />
    <arg type=':' type64=':' />
  </function>
  <function name='NSStringFromSize'>
    <retval type='@' type64='@' />
    <arg type='{_NSSize=ff}' type64='{CGSize=dd}' />
  </function>
  <function name='NSTemporaryDirectory'>
    <retval type='@' type64='@' />
  </function>
  <function name='NSUnionRange'>
    <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
  </function>
  <function name='NSUnionRect'>
    <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function name='NSUserName'>
    <retval type='@' type64='@' />
  </function>
  <function name='NSZoneName'>
    <retval type='@' type64='@' />
    <arg type='^{_NSZone=}' />
  </function>
  <function name='NXReadNSObjectFromCoder'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function inline='true' name='NSConvertHostDoubleToSwapped'>
    <retval type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
    <arg type='d' type64='d' />
  </function>
  <function inline='true' name='NSConvertHostFloatToSwapped'>
    <retval type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
    <arg type='f' type64='f' />
  </function>
  <function inline='true' name='NSConvertSwappedDoubleToHost'>
    <retval type='d' type64='d' />
    <arg type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
  </function>
  <function inline='true' name='NSConvertSwappedFloatToHost'>
    <retval type='f' type64='f' />
    <arg type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
  </function>
  <function inline='true' name='NSEqualRanges'>
    <retval type='B' type64='B' />
    <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
  </function>
  <function inline='true' name='NSHeight'>
    <retval type='f' type64='d' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function inline='true' name='NSHostByteOrder'>
    <retval type='l' type64='q' />
  </function>
  <function inline='true' name='NSLocationInRange'>
    <retval type='B' type64='B' />
    <arg type='I' type64='Q' />
    <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
  </function>
  <function inline='true' name='NSMakeCollectable'>
    <retval type='@' type64='@' />
    <arg type='@' type64='@' />
  </function>
  <function inline='true' name='NSMakePoint'>
    <retval type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    <arg type='f' type64='d' />
    <arg type='f' type64='d' />
  </function>
  <function inline='true' name='NSMakeRange'>
    <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    <arg type='I' type64='Q' />
    <arg type='I' type64='Q' />
  </function>
  <function inline='true' name='NSMakeRect'>
    <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='f' type64='d' />
    <arg type='f' type64='d' />
    <arg type='f' type64='d' />
    <arg type='f' type64='d' />
  </function>
  <function inline='true' name='NSMakeSize'>
    <retval type='{_NSSize=ff}' type64='{CGSize=dd}' />
    <arg type='f' type64='d' />
    <arg type='f' type64='d' />
  </function>
  <function inline='true' name='NSMaxRange'>
    <retval type='I' type64='Q' />
    <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
  </function>
  <function inline='true' name='NSMaxX'>
    <retval type='f' type64='d' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function inline='true' name='NSMaxY'>
    <retval type='f' type64='d' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function inline='true' name='NSMidX'>
    <retval type='f' type64='d' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function inline='true' name='NSMidY'>
    <retval type='f' type64='d' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function inline='true' name='NSMinX'>
    <retval type='f' type64='d' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function inline='true' name='NSMinY'>
    <retval type='f' type64='d' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function inline='true' name='NSPointFromCGPoint'>
    <retval type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    <arg type='{CGPoint=ff}' type64='{CGPoint=dd}' />
  </function>
  <function inline='true' name='NSPointToCGPoint'>
    <retval type='{CGPoint=ff}' type64='{CGPoint=dd}' />
    <arg type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
  </function>
  <function inline='true' name='NSRectFromCGRect'>
    <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function inline='true' name='NSRectToCGRect'>
    <retval type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <function inline='true' name='NSSizeFromCGSize'>
    <retval type='{_NSSize=ff}' type64='{CGSize=dd}' />
    <arg type='{CGSize=ff}' type64='{CGSize=dd}' />
  </function>
  <function inline='true' name='NSSizeToCGSize'>
    <retval type='{CGSize=ff}' type64='{CGSize=dd}' />
    <arg type='{_NSSize=ff}' type64='{CGSize=dd}' />
  </function>
  <function inline='true' name='NSSwapBigDoubleToHost'>
    <retval type='d' type64='d' />
    <arg type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
  </function>
  <function inline='true' name='NSSwapBigDoubleToHost'>
    <retval type='d' type64='d' />
    <arg type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
  </function>
  <function inline='true' name='NSSwapBigFloatToHost'>
    <retval type='f' type64='f' />
    <arg type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
  </function>
  <function inline='true' name='NSSwapBigFloatToHost'>
    <retval type='f' type64='f' />
    <arg type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
  </function>
  <function inline='true' name='NSSwapBigIntToHost'>
    <retval type='I' type64='I' />
    <arg type='I' type64='I' />
  </function>
  <function inline='true' name='NSSwapBigLongLongToHost'>
    <retval type='Q' type64='Q' />
    <arg type='Q' type64='Q' />
  </function>
  <function inline='true' name='NSSwapBigLongToHost'>
    <retval type='L' type64='Q' />
    <arg type='L' type64='Q' />
  </function>
  <function inline='true' name='NSSwapBigShortToHost'>
    <retval type='S' type64='S' />
    <arg type='S' type64='S' />
  </function>
  <function inline='true' name='NSSwapDouble'>
    <retval type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
    <arg type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
  </function>
  <function inline='true' name='NSSwapFloat'>
    <retval type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
    <arg type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
  </function>
  <function inline='true' name='NSSwapHostDoubleToBig'>
    <retval type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
    <arg type='d' type64='d' />
  </function>
  <function inline='true' name='NSSwapHostDoubleToBig'>
    <retval type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
    <arg type='d' type64='d' />
  </function>
  <function inline='true' name='NSSwapHostDoubleToLittle'>
    <retval type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
    <arg type='d' type64='d' />
  </function>
  <function inline='true' name='NSSwapHostDoubleToLittle'>
    <retval type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
    <arg type='d' type64='d' />
  </function>
  <function inline='true' name='NSSwapHostFloatToBig'>
    <retval type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
    <arg type='f' type64='f' />
  </function>
  <function inline='true' name='NSSwapHostFloatToBig'>
    <retval type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
    <arg type='f' type64='f' />
  </function>
  <function inline='true' name='NSSwapHostFloatToLittle'>
    <retval type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
    <arg type='f' type64='f' />
  </function>
  <function inline='true' name='NSSwapHostFloatToLittle'>
    <retval type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
    <arg type='f' type64='f' />
  </function>
  <function inline='true' name='NSSwapHostIntToBig'>
    <retval type='I' type64='I' />
    <arg type='I' type64='I' />
  </function>
  <function inline='true' name='NSSwapHostIntToLittle'>
    <retval type='I' type64='I' />
    <arg type='I' type64='I' />
  </function>
  <function inline='true' name='NSSwapHostLongLongToBig'>
    <retval type='Q' type64='Q' />
    <arg type='Q' type64='Q' />
  </function>
  <function inline='true' name='NSSwapHostLongLongToLittle'>
    <retval type='Q' type64='Q' />
    <arg type='Q' type64='Q' />
  </function>
  <function inline='true' name='NSSwapHostLongToBig'>
    <retval type='L' type64='Q' />
    <arg type='L' type64='Q' />
  </function>
  <function inline='true' name='NSSwapHostLongToLittle'>
    <retval type='L' type64='Q' />
    <arg type='L' type64='Q' />
  </function>
  <function inline='true' name='NSSwapHostShortToBig'>
    <retval type='S' type64='S' />
    <arg type='S' type64='S' />
  </function>
  <function inline='true' name='NSSwapHostShortToLittle'>
    <retval type='S' type64='S' />
    <arg type='S' type64='S' />
  </function>
  <function inline='true' name='NSSwapInt'>
    <retval type='I' type64='I' />
    <arg type='I' type64='I' />
  </function>
  <function inline='true' name='NSSwapLittleDoubleToHost'>
    <retval type='d' type64='d' />
    <arg type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
  </function>
  <function inline='true' name='NSSwapLittleDoubleToHost'>
    <retval type='d' type64='d' />
    <arg type='{_NSSwappedDouble=Q}' type64='{_NSSwappedDouble=Q}' />
  </function>
  <function inline='true' name='NSSwapLittleFloatToHost'>
    <retval type='f' type64='f' />
    <arg type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
  </function>
  <function inline='true' name='NSSwapLittleFloatToHost'>
    <retval type='f' type64='f' />
    <arg type='{_NSSwappedFloat=I}' type64='{_NSSwappedFloat=I}' />
  </function>
  <function inline='true' name='NSSwapLittleIntToHost'>
    <retval type='I' type64='I' />
    <arg type='I' type64='I' />
  </function>
  <function inline='true' name='NSSwapLittleLongLongToHost'>
    <retval type='Q' type64='Q' />
    <arg type='Q' type64='Q' />
  </function>
  <function inline='true' name='NSSwapLittleLongToHost'>
    <retval type='L' type64='Q' />
    <arg type='L' type64='Q' />
  </function>
  <function inline='true' name='NSSwapLittleShortToHost'>
    <retval type='S' type64='S' />
    <arg type='S' type64='S' />
  </function>
  <function inline='true' name='NSSwapLong'>
    <retval type='L' type64='Q' />
    <arg type='L' type64='Q' />
  </function>
  <function inline='true' name='NSSwapLongLong'>
    <retval type='Q' type64='Q' />
    <arg type='Q' type64='Q' />
  </function>
  <function inline='true' name='NSSwapShort'>
    <retval type='S' type64='S' />
    <arg type='S' type64='S' />
  </function>
  <function inline='true' name='NSWidth'>
    <retval type='f' type64='d' />
    <arg type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
  </function>
  <informal_protocol name='NSArchiverCallback'>
    <method selector='classForArchiver' type='#@:' />
    <method selector='replacementObjectForArchiver:' type='@@:@' />
  </informal_protocol>
  <informal_protocol name='NSClassDescriptionPrimitives'>
    <method selector='attributeKeys' type='@@:' />
    <method selector='classDescription' type='@@:' />
    <method selector='inverseForRelationshipKey:' type='@@:@' />
    <method selector='toManyRelationshipKeys' type='@@:' />
    <method selector='toOneRelationshipKeys' type='@@:' />
  </informal_protocol>
  <informal_protocol name='NSCoderMethods'>
    <method selector='awakeAfterUsingCoder:' type='@@:@' />
    <method selector='classForCoder' type='#@:' />
    <method selector='replacementObjectForCoder:' type='@@:@' />
    <method class_method='true' selector='setVersion:' type='v@:i' type64='v@:q' />
    <method class_method='true' selector='version' type='i@:' type64='q@:' />
  </informal_protocol>
  <informal_protocol name='NSComparisonMethods'>
    <method selector='doesContain:' type='B@:@' />
    <method selector='isCaseInsensitiveLike:' type='B@:@' />
    <method selector='isEqualTo:' type='B@:@' />
    <method selector='isGreaterThan:' type='B@:@' />
    <method selector='isGreaterThanOrEqualTo:' type='B@:@' />
    <method selector='isLessThan:' type='B@:@' />
    <method selector='isLessThanOrEqualTo:' type='B@:@' />
    <method selector='isLike:' type='B@:@' />
    <method selector='isNotEqualTo:' type='B@:@' />
  </informal_protocol>
  <informal_protocol name='NSConnectionDelegateMethods'>
    <method selector='authenticateComponents:withData:' type='B@:@@' />
    <method selector='authenticationDataForComponents:' type='@@:@' />
    <method selector='connection:shouldMakeNewConnection:' type='B@:@@' />
    <method selector='createConversationForConnection:' type='@@:@' />
    <method selector='makeNewConnection:sender:' type='B@:@@' />
    <method selector='connection:canAuthenticateAgainstProtectionSpace:' type='B@:@@' />
    <method selector='connectionShouldUseCredentialStorage:' type='B@:@' />
    <method selector='connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:' type='B@:@iii' type64='B@:@qqq' />
  </informal_protocol>
  <informal_protocol name='NSCopyLinkMoveHandler'>
    <method selector='fileManager:shouldProceedAfterError:' type='B@:@@' />
    <method selector='fileManager:willProcessPath:' type='v@:@@' />
  </informal_protocol>
  <informal_protocol name='NSDelayedPerforming'>
    <method class_method='true' selector='cancelPreviousPerformRequestsWithTarget:' type='v@:@' />
    <method class_method='true' selector='cancelPreviousPerformRequestsWithTarget:selector:object:' type='v@:@:@' />
    <method selector='performSelector:withObject:afterDelay:' type='v@::@d' />
    <method selector='performSelector:withObject:afterDelay:inModes:' type='v@::@d@' />
  </informal_protocol>
  <informal_protocol name='NSDeprecatedKeyValueCoding'>
    <method selector='handleQueryWithUnboundKey:' type='@@:@' />
    <method selector='handleTakeValue:forUnboundKey:' type='v@:@@' />
    <method selector='storedValueForKey:' type='@@:@' />
    <method selector='takeStoredValue:forKey:' type='v@:@@' />
    <method selector='takeValue:forKey:' type='v@:@@' />
    <method selector='takeValue:forKeyPath:' type='v@:@@' />
    <method selector='takeValuesFromDictionary:' type='v@:@' />
    <method selector='unableToSetNilForKey:' type='v@:@' />
    <method class_method='true' selector='useStoredAccessor' type='B@:' />
    <method selector='valuesForKeys:' type='@@:@' />
  </informal_protocol>
  <informal_protocol name='NSDeprecatedKeyValueObservingCustomization'>
    <method class_method='true' selector='setKeys:triggerChangeNotificationsForDependentKey:' type='v@:@@' />
  </informal_protocol>
  <informal_protocol name='NSDeprecatedMethods'>
    <method class_method='true' selector='poseAsClass:' type='v@:#' />
  </informal_protocol>
  <informal_protocol name='NSDistantObjectRequestMethods'>
    <method selector='connection:handleRequest:' type='B@:@@' />
  </informal_protocol>
  <informal_protocol name='NSDistributedObjects'>
    <method selector='classForPortCoder' type='#@:' />
    <method selector='replacementObjectForPortCoder:' type='@@:@' />
  </informal_protocol>
  <informal_protocol name='NSErrorRecoveryAttempting'>
    <method selector='attemptRecoveryFromError:optionIndex:' type='B@:@I' type64='B@:@Q' />
    <method selector='attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:' type='v@:@I@:^v' type64='v@:@Q@:^v' />
  </informal_protocol>
  <informal_protocol name='NSFileManagerFileOperationAdditions'>
    <method selector='fileManager:shouldCopyItemAtPath:toPath:' type='B@:@@@' />
    <method selector='fileManager:shouldLinkItemAtPath:toPath:' type='B@:@@@' />
    <method selector='fileManager:shouldMoveItemAtPath:toPath:' type='B@:@@@' />
    <method selector='fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:' type='B@:@@@@' />
    <method selector='fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:' type='B@:@@@@' />
    <method selector='fileManager:shouldProceedAfterError:movingItemAtPath:toPath:' type='B@:@@@@' />
    <method selector='fileManager:shouldProceedAfterError:removingItemAtPath:' type='B@:@@@' />
    <method selector='fileManager:shouldRemoveItemAtPath:' type='B@:@@' />
  </informal_protocol>
  <informal_protocol name='NSKeyValueCoding'>
    <method class_method='true' selector='accessInstanceVariablesDirectly' type='B@:' />
    <method selector='dictionaryWithValuesForKeys:' type='@@:@' />
    <method selector='mutableArrayValueForKey:' type='@@:@' />
    <method selector='mutableArrayValueForKeyPath:' type='@@:@' />
    <method selector='mutableSetValueForKey:' type='@@:@' />
    <method selector='mutableSetValueForKeyPath:' type='@@:@' />
    <method selector='setNilValueForKey:' type='v@:@' />
    <method selector='setValue:forKey:' type='v@:@@' />
    <method selector='setValue:forKeyPath:' type='v@:@@' />
    <method selector='setValue:forUndefinedKey:' type='v@:@@' />
    <method selector='setValuesForKeysWithDictionary:' type='v@:@' />
    <method selector='validateValue:forKey:error:' type='B@:^@@^@' />
    <method selector='validateValue:forKeyPath:error:' type='B@:^@@^@' />
    <method selector='valueForKey:' type='@@:@' />
    <method selector='valueForKeyPath:' type='@@:@' />
    <method selector='valueForUndefinedKey:' type='@@:@' />
  </informal_protocol>
  <informal_protocol name='NSKeyValueObserverNotification'>
    <method selector='didChange:valuesAtIndexes:forKey:' type='v@:I@@' />
    <method selector='didChangeValueForKey:' type='v@:@' />
    <method selector='didChangeValueForKey:withSetMutation:usingObjects:' type='v@:@I@' />
    <method selector='willChange:valuesAtIndexes:forKey:' type='v@:I@@' />
    <method selector='willChangeValueForKey:' type='v@:@' />
    <method selector='willChangeValueForKey:withSetMutation:usingObjects:' type='v@:@I@' />
  </informal_protocol>
  <informal_protocol name='NSKeyValueObserverRegistration'>
    <method selector='addObserver:forKeyPath:options:context:' type='v@:@@I^v' />
    <method selector='removeObserver:forKeyPath:' type='v@:@@' />
  </informal_protocol>
  <informal_protocol name='NSKeyValueObserving'>
    <method selector='observeValueForKeyPath:ofObject:change:context:' type='v@:@@@^v' />
  </informal_protocol>
  <informal_protocol name='NSKeyValueObservingCustomization'>
    <method class_method='true' selector='automaticallyNotifiesObserversForKey:' type='B@:@' />
    <method class_method='true' selector='keyPathsForValuesAffectingValueForKey:' type='@@:@' />
    <method selector='observationInfo' type='^v@:' />
    <method selector='setObservationInfo:' type='v@:^v' />
  </informal_protocol>
  <informal_protocol name='NSKeyedArchiverDelegate'>
    <method selector='archiver:didEncodeObject:' type='v@:@@' />
    <method selector='archiver:willEncodeObject:' type='@@:@@' />
    <method selector='archiver:willReplaceObject:withObject:' type='v@:@@@' />
    <method selector='archiverDidFinish:' type='v@:@' />
    <method selector='archiverWillFinish:' type='v@:@' />
  </informal_protocol>
  <informal_protocol name='NSKeyedArchiverObjectSubstitution'>
    <method class_method='true' selector='classFallbacksForKeyedArchiver' type='@@:' />
    <method selector='classForKeyedArchiver' type='#@:' />
    <method selector='replacementObjectForKeyedArchiver:' type='@@:@' />
  </informal_protocol>
  <informal_protocol name='NSKeyedUnarchiverDelegate'>
    <method selector='unarchiver:cannotDecodeObjectOfClassName:originalClasses:' type='#@:@@@' />
    <method selector='unarchiver:didDecodeObject:' type='@@:@@' />
    <method selector='unarchiver:willReplaceObject:withObject:' type='v@:@@@' />
    <method selector='unarchiverDidFinish:' type='v@:@' />
    <method selector='unarchiverWillFinish:' type='v@:@' />
  </informal_protocol>
  <informal_protocol name='NSKeyedUnarchiverObjectSubstitution'>
    <method class_method='true' selector='classForKeyedUnarchiver' type='#@:' />
  </informal_protocol>
  <informal_protocol name='NSMachPortDelegateMethods'>
    <method selector='handleMachMessage:' type='v@:^v' />
  </informal_protocol>
   <informal_protocol name='NSMetadataQueryDelegate'>
    <method selector='metadataQuery:replacementObjectForResultObject:' type='@@:@@' />
    <method selector='metadataQuery:replacementValueForAttribute:value:' type='@@:@@@' />
  </informal_protocol>
  <informal_protocol name='NSNetServiceBrowserDelegateMethods'>
    <method selector='netServiceBrowser:didFindDomain:moreComing:' type='v@:@@B' />
    <method selector='netServiceBrowser:didFindService:moreComing:' type='v@:@@B' />
    <method selector='netServiceBrowser:didNotSearch:' type='v@:@@' />
    <method selector='netServiceBrowser:didRemoveDomain:moreComing:' type='v@:@@B' />
    <method selector='netServiceBrowser:didRemoveService:moreComing:' type='v@:@@B' />
    <method selector='netServiceBrowserDidStopSearch:' type='v@:@' />
    <method selector='netServiceBrowserWillSearch:' type='v@:@' />
  </informal_protocol>
  <informal_protocol name='NSNetServiceDelegateMethods'>
    <method selector='netService:didNotPublish:' type='v@:@@' />
    <method selector='netService:didNotResolve:' type='v@:@@' />
    <method selector='netService:didUpdateTXTRecordData:' type='v@:@@' />
    <method selector='netServiceDidPublish:' type='v@:@' />
    <method selector='netServiceDidResolveAddress:' type='v@:@' />
    <method selector='netServiceDidStop:' type='v@:@' />
    <method selector='netServiceWillPublish:' type='v@:@' />
    <method selector='netServiceWillResolve:' type='v@:@' />
  </informal_protocol>
  <informal_protocol name='NSPortDelegateMethods'>
    <method selector='handlePortMessage:' type='v@:@' />
  </informal_protocol>
  <informal_protocol name='NSScriptClassDescription'>
    <method selector='classCode' type='L@:' type64='I@:' />
    <method selector='className' type='@@:' />
  </informal_protocol>
  <informal_protocol name='NSScriptKeyValueCoding'>
    <method selector='coerceValue:forKey:' type='@@:@@' />
    <method selector='insertValue:atIndex:inPropertyWithKey:' type='v@:@I@' type64='v@:@Q@' />
    <method selector='insertValue:inPropertyWithKey:' type='v@:@@' />
    <method selector='removeValueAtIndex:fromPropertyWithKey:' type='v@:I@' type64='v@:Q@' />
    <method selector='replaceValueAtIndex:inPropertyWithKey:withValue:' type='v@:I@@' type64='v@:Q@@' />
    <method selector='valueAtIndex:inPropertyWithKey:' type='@@:I@' type64='@@:Q@' />
    <method selector='valueWithName:inPropertyWithKey:' type='@@:@@' />
    <method selector='valueWithUniqueID:inPropertyWithKey:' type='@@:@@' />
  </informal_protocol>
  <informal_protocol name='NSScriptObjectSpecifiers'>
    <method selector='indicesOfObjectsByEvaluatingObjectSpecifier:' type='@@:@' />
    <method selector='objectSpecifier' type='@@:' />
  </informal_protocol>
  <informal_protocol name='NSScripting'>
    <method selector='copyScriptingValue:forKey:withProperties:' type='@@:@@@' />
    <method selector='newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:' type='@@:#@@@' />
    <method selector='scriptingProperties' type='@@:' />
    <method selector='scriptingValueForSpecifier:' type='@@:@' />
    <method selector='setScriptingProperties:' type='v@:@' />
  </informal_protocol>
  <informal_protocol name='NSScriptingComparisonMethods'>
    <method selector='scriptingBeginsWith:' type='B@:@' />
    <method selector='scriptingContains:' type='B@:@' />
    <method selector='scriptingEndsWith:' type='B@:@' />
    <method selector='scriptingIsEqualTo:' type='B@:@' />
    <method selector='scriptingIsGreaterThan:' type='B@:@' />
    <method selector='scriptingIsGreaterThanOrEqualTo:' type='B@:@' />
    <method selector='scriptingIsLessThan:' type='B@:@' />
    <method selector='scriptingIsLessThanOrEqualTo:' type='B@:@' />
  </informal_protocol>
  <informal_protocol name='NSSpellServerDelegate'>
    <method selector='spellServer:checkString:offset:types:options:orthography:workdCount:' type='@@:@@Ll@@o^L' type64='@@:@@Ql@@o^Q'/>
    <method selector='spellServer:checkGrammarInString:language:details:' type='{_NSRange=II}@:@@@^@' type64='{_NSRange=QQ}@:@@@^@' />
    <method selector='spellServer:didForgetWord:inLanguage:' type='v@:@@@' />
    <method selector='spellServer:didLearnWord:inLanguage:' type='v@:@@@' />
    <method selector='spellServer:findMisspelledWordInString:language:wordCount:countOnly:' type='{_NSRange=II}@:@@@^iB' type64='{_NSRange=QQ}@:@@@^qB' />
    <method selector='spellServer:suggestCompletionsForPartialWordRange:inString:language:' type='@@:@{_NSRange=II}@@' type64='@@:@{_NSRange=QQ}@@' />
    <method selector='spellServer:suggestGuessesForWord:inLanguage:' type='@@:@@@' />
  </informal_protocol>
  <informal_protocol name='NSStreamDelegateEventExtensions'>
    <method selector='stream:handleEvent:' type='v@:@I' />
  </informal_protocol>
  <informal_protocol name='NSThreadPerformAdditions'>
    <method selector='performSelector:onThread:withObject:waitUntilDone:' type='v@::@@B' />
    <method selector='performSelector:onThread:withObject:waitUntilDone:modes:' type='v@::@@B@' />
    <method selector='performSelectorInBackground:withObject:' type='v@::@' />
    <method selector='performSelectorOnMainThread:withObject:waitUntilDone:' type='v@::@B' />
    <method selector='performSelectorOnMainThread:withObject:waitUntilDone:modes:' type='v@::@B@' />
  </informal_protocol>
  <informal_protocol name='NSURLClient'>
    <method selector='URL:resourceDataDidBecomeAvailable:' type='v@:@@' />
    <method selector='URL:resourceDidFailLoadingWithReason:' type='v@:@@' />
    <method selector='URLResourceDidCancelLoading:' type='v@:@' />
    <method selector='URLResourceDidFinishLoading:' type='v@:@' />
  </informal_protocol>
  <informal_protocol name='NSURLConnectionDelegate'>
    <method selector='connection:didCancelAuthenticationChallenge:' type='v@:@@' />
    <method selector='connection:didFailWithError:' type='v@:@@' />
    <method selector='connection:didReceiveAuthenticationChallenge:' type='v@:@@' />
    <method selector='connection:didReceiveData:' type='v@:@@' />
    <method selector='connection:didReceiveResponse:' type='v@:@@' />
    <method selector='connection:willCacheResponse:' type='@@:@@' />
    <method selector='connection:willSendRequest:redirectResponse:' type='@@:@@@' />
    <method selector='connectionDidFinishLoading:' type='v@:@' />
  </informal_protocol>
  <informal_protocol name='NSURLDownloadDelegate'>
    <method selector='download:decideDestinationWithSuggestedFilename:' type='v@:@@' />
    <method selector='download:didCancelAuthenticationChallenge:' type='v@:@@' />
    <method selector='download:didCreateDestination:' type='v@:@@' />
    <method selector='download:didFailWithError:' type='v@:@@' />
    <method selector='download:didReceiveAuthenticationChallenge:' type='v@:@@' />
    <method selector='download:didReceiveDataOfLength:' type='v@:@I' type64='v@:@Q' />
    <method selector='download:didReceiveResponse:' type='v@:@@' />
    <method selector='download:shouldDecodeSourceDataOfMIMEType:' type='B@:@@' />
    <method selector='download:willResumeWithResponse:fromByte:' type='v@:@@q' />
    <method selector='download:willSendRequest:redirectResponse:' type='@@:@@@' />
    <method selector='downloadDidBegin:' type='v@:@' />
    <method selector='downloadDidFinish:' type='v@:@' />
    <method selector='download:canAuthenticateAgainstProtectionSpace:' type='B@:@@' />
    <method selector='downloadShouldUseCredentialStorage:' type='B@:@' />
  </informal_protocol>
  <informal_protocol name='NSXMLParserDelegateEventAdditions'>
    <method selector='parser:didEndElement:namespaceURI:qualifiedName:' type='v@:@@@@' />
    <method selector='parser:didEndMappingPrefix:' type='v@:@@' />
    <method selector='parser:didStartElement:namespaceURI:qualifiedName:attributes:' type='v@:@@@@@' />
    <method selector='parser:didStartMappingPrefix:toURI:' type='v@:@@@' />
    <method selector='parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:' type='v@:@@@@@' />
    <method selector='parser:foundCDATA:' type='v@:@@' />
    <method selector='parser:foundCharacters:' type='v@:@@' />
    <method selector='parser:foundComment:' type='v@:@@' />
    <method selector='parser:foundElementDeclarationWithName:model:' type='v@:@@@' />
    <method selector='parser:foundExternalEntityDeclarationWithName:publicID:systemID:' type='v@:@@@@' />
    <method selector='parser:foundIgnorableWhitespace:' type='v@:@@' />
    <method selector='parser:foundInternalEntityDeclarationWithName:value:' type='v@:@@@' />
    <method selector='parser:foundNotationDeclarationWithName:publicID:systemID:' type='v@:@@@@' />
    <method selector='parser:foundProcessingInstructionWithTarget:data:' type='v@:@@@' />
    <method selector='parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:' type='v@:@@@@@' />
    <method selector='parser:parseErrorOccurred:' type='v@:@@' />
    <method selector='parser:resolveExternalEntityName:systemID:' type='@@:@@@' />
    <method selector='parser:validationErrorOccurred:' type='v@:@@' />
    <method selector='parserDidEndDocument:' type='v@:@' />
    <method selector='parserDidStartDocument:' type='v@:@' />
  </informal_protocol>
  <class name='NSTextCheckingResult'>
      <method class_method='true' selector='orthographyCheckingResultWithRange:orthography:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='spellCheckingResultWithRange:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='grammarCheckingResultWithRange:details:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='dateCheckingResultWithRange:date:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='dateCheckingResultWithRange:date:timeZone:duration:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='addressCheckingResultWithRange:components:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='linkCheckingResultWithRange:URL:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='quoteCheckingResultWithRange:replacementString:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='dashCheckingResultWithRange:replacementString:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='replacementCheckingResultWithRange:replacementString:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
      <method class_method='true' selector='correctionCheckingResultWithRange:replacementString:'>
        <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      </method>
  </class>
  <class name='NSCache'>
	  <method selector='evictsObjectsWithDiscardedContent'>
		  <retval type='B' />
	  </method>
	  <method selector='setEvictsObjectsWithDiscardedContent:'>
		  <arg index='0' type='B' />
	  </method>
  </class>
  <class name='NSAffineTransform'>
    <method selector='setTransformStruct:'>
      <arg index='0' type='{_NSAffineTransformStruct=ffffff}' type64='{_NSAffineTransformStruct=dddddd}' />
    </method>
    <method selector='transformPoint:'>
      <retval type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
      <arg index='0' type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    </method>
    <method selector='transformSize:'>
      <retval type='{_NSSize=ff}' type64='{CGSize=dd}' />
      <arg index='0' type='{_NSSize=ff}' type64='{CGSize=dd}' />
    </method>
    <method selector='transformStruct'>
      <retval type='{_NSAffineTransformStruct=ffffff}' type64='{_NSAffineTransformStruct=dddddd}' />
    </method>
  </class>
  <class name='NSAppleEventDescriptor'>
    <method selector='booleanValue'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='descriptorWithBoolean:'>
      <arg index='0' type='B' />
    </method>
    <method class_method='true' selector='descriptorWithDescriptorType:bytes:length:'>
      <arg c_array_length_in_arg='2' index='1' type_modifier='n' />
    </method>
    <method selector='initWithAEDescNoCopy:'>
      <arg index='0' type_modifier='n' />
    </method>
    <method selector='initWithDescriptorType:bytes:length:'>
      <arg c_array_length_in_arg='2' index='1' type_modifier='n' />
    </method>
    <method selector='dispatchRawAppleEvent:withRawReply:handlerRefCon:'>
      <retval type='s' />
      <arg index='2' type='l' type64='l' />
    </method>
    <method selector='setEventHandler:andSelector:forEventClass:andEventID:'>
      <arg index='1' sel_of_type='v@:@@' />
    </method>
  </class>
  <class name='NSAppleScript'>
    <method selector='compileAndReturnError:'>
      <retval type='B' />
      <arg index='0' type_modifier='o' />
    </method>
    <method selector='executeAndReturnError:'>
      <arg index='0' type_modifier='o' />
    </method>
    <method selector='executeAppleEvent:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='initWithContentsOfURL:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='isCompiled'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSArchiver'>
    <method class_method='true' selector='archiveRootObject:toFile:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSArray'>
	  <method selector='enumerateObjectsUsingBlock:'>
		  <arg index='0' block='true'>
			  <retval type='v'/>
			  <arg type='@' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='enumerateObjectsWithOptions:usingBlock:'>
		  <arg index='1' block='true'>
			  <retval type='v'/>
			  <arg type='@' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='enumerateObjectsAtIndexes:options:usingBlock:'>
		  <arg index='2' block='true'>
			  <retval type='v'/>
			  <arg type='@' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='indexOfObjectPassingTest:'>
		  <arg index='0' block='true'>
			  <retval type='B' />
			  <arg type='@' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='indexOfObjectWithOptions:passingTest:'>
		  <arg index='1' block='true'>
			  <retval type='B' />
			  <arg type='@' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='indexOfObjectAtIndexes:options:passingTest:'>
		  <arg index='2' block='true'>
			  <retval type='B' />
			  <arg type='@' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='indexesOfObjectsPassingTest:'>
		  <arg index='0' block='true'>
			  <retval type='B' />
			  <arg type='@' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='indexesOfObjectsWithOptions:passingTest:'>
		  <arg index='1' block='true'>
			  <retval type='B' />
			  <arg type='@' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='indexesOfObjectsAtIndexes:options:passingTest:'>
		  <arg index='2' block='true'>
			  <retval type='B' />
			  <arg type='@' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='sortedArrayUsingComparator:'>
		  <arg index='0' block='true' >
			  <retval type='l'/>
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
	  </method>
	  <method selector='sortedArrayWithOptions:usingComparator:'>
		  <arg index='1' block='true' >
			  <retval type='l'/>
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
	  </method>
	  <method selector='indexOfObject:inSortedRange:options:usingComparator:'>
		  <arg index='3' block='true' >
			  <retval type='l'/>
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
	  </method>
	  <method selector='sortedArrayUsingFunction:context:' >
		  <arg index='0' function_pointer='true' function_pointer_retained='false'>
			  <retval type='l'/>
			  <arg type='@' />
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
		  <arg index='1' type='@' />
	  </method>
	  <method selector='sortedArrayUsingFunction:context:hint:' >
		  <arg index='0' function_pointer='true' function_pointer_retained='false'>
			  <retval type='l'/>
			  <arg type='@' />
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
		  <arg index='1' type='@' />
	  </method>
    <method c_array_delimited_by_null='true' class_method='true' selector='arrayWithObjects:' variadic='true'>
    </method>
    <method c_array_delimited_by_null='true' selector='initWithObjects:' variadic='true'>
    </method>
    <method class_method='true' selector='arrayWithObjects:count:'>
      <arg index='0' type_modifier='n' c_array_length_in_arg='1' />
    </method>
    <method selector='containsObject:'>
      <retval type='B' />
    </method>
    <method selector='getObjects:' suggestion='convert to Python list instead' />
    <method selector='getObjects:range:'>
      <retval type='v' />
      <arg c_array_length_in_arg='1' index='0' type_modifier='o' />
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='indexOfObject:inRange:'>
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='indexOfObjectIdenticalTo:inRange:'>
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='initWithArray:copyItems:'>
      <arg index='1' type='B' />
    </method>
    <method selector='initWithObjects:count:'>
      <arg index='0' type_modifier='n' c_array_length_in_arg='1'/>
    </method>
    <method selector='isEqualToArray:'>
      <retval type='B' />
    </method>
    <method selector='makeObjectsPerformSelector:'>
      <arg index='0' sel_of_type='v@:' />
    </method>
    <method selector='makeObjectsPerformSelector:withObject:'>
      <arg index='0' sel_of_type='v@:@' />
    </method>
    <method selector='sortedArrayUsingSelector:'>
      <arg index='0' sel_of_type='i@:@' />
    </method>
    <method selector='subarrayWithRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='writeToFile:atomically:'>
      <retval type='B' />
      <arg index='1' type='B' />
    </method>
    <method selector='writeToURL:atomically:'>
      <retval type='B' />
      <arg index='1' type='B' />
    </method>
  </class>
  <class name='NSAssertionHandler'>
    <method selector='handleFailureInFunction:file:lineNumber:description:' variadic='true'>
      <arg index='3' printf_format='true' type='@' />
    </method>
    <method selector='handleFailureInMethod:object:file:lineNumber:description:' variadic='true'>
      <arg index='4' printf_format='true' type='@' />
    </method>
  </class>
  <class name='NSAttributedString'>
	  <method selector='enumerateAttributesInRange:options:usingBlock:'>
		  <arg index='2' block='true'>
			  <retval type='v' />
			  <arg type='@' />
			  <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='enumerateAttribute:inRange:options:usingBlock:'>
		  <arg index='3' block='true'>
			  <retval type='v' />
			  <arg type='@' />
			  <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>

    <method selector='attribute:atIndex:effectiveRange:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='attribute:atIndex:longestEffectiveRange:inRange:'>
      <arg index='2' type_modifier='o' />
      <arg index='3' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='attributedSubstringFromRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='attributesAtIndex:effectiveRange:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='attributesAtIndex:longestEffectiveRange:inRange:'>
      <arg index='1' type_modifier='o' />
      <arg index='2' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='isEqualToAttributedString:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSAutoreleasePool'>
    <method class_method='true' selector='enableFreedObjectCheck:'>
      <arg index='0' type='B' />
    </method>
    <method class_method='true' selector='enableRelease:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSBundle'>
    <method selector='isLoaded'>
      <retval type='B' />
    </method>
    <method selector='load'>
      <retval type='B' />
    </method>
    <method selector='loadAndReturnError:'>
      <retval type='B' />
      <arg index='0' type_modifier='o' />
    </method>
    <method selector='preflightAndReturnError:'>
      <retval type='B' />
      <arg index='0' type_modifier='o' />
    </method>
    <method selector='unload'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSCalendar'>
    <method selector='maximumRangeOfUnit:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='minimumRangeOfUnit:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfUnit:inUnit:forDate:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfUnit:startDate:interval:forDate:'>
      <retval type='B' />
      <arg index='1' type_modifier='o' />
      <arg index='2' type_modifier='o' />
    </method>
  </class>
  <class name='NSCalendarDate'>
    <method selector='years:months:days:hours:minutes:seconds:sinceDate:'>
      <retval type='v' />
      <arg index='0' type_modifier='o' />
      <arg index='1' type_modifier='o' />
      <arg index='2' type_modifier='o' />
      <arg index='3' type_modifier='o' />
      <arg index='4' type_modifier='o' />
      <arg index='5' type_modifier='o' />
      <arg index='6' type='@' />
    </method>
  </class>
  <class name='NSCharacterSet'>
    <method selector='characterIsMember:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='characterSetWithRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='hasMemberInPlane:'>
      <retval type='B' />
    </method>
    <method selector='isSupersetOfSet:'>
      <retval type='B' />
    </method>
    <method selector='longCharacterIsMember:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSCoder'>
    <method selector='allowsKeyedCoding'>
      <retval type='B' />
    </method>
    <method selector='containsValueForKey:'>
      <retval type='B' />
    </method>
    <method selector='decodeBoolForKey:'>
      <retval type='B' />
    </method>
    <method selector='decodeBytesForKey:returnedLength:'>
      <retval c_array_length_in_arg='1' type='^v' type64='^v' />
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='decodeBytesWithReturnedLength:'>
      <retval c_array_length_in_arg='0' />
      <arg index='0' type_modifier='o' />
    </method>
    <method selector='decodePoint'>
      <retval type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    </method>
    <method selector='decodePointForKey:'>
      <retval type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
      <arg index='0' type='@' />
    </method>
    <method selector='decodeRect'>
      <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    </method>
    <method selector='decodeRectForKey:'>
      <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
      <arg index='0' type='@' />
    </method>
    <method selector='decodeSize'>
      <retval type='{_NSSize=ff}' type64='{CGSize=dd}' />
    </method>
    <method selector='decodeSizeForKey:'>
      <retval type='{_NSSize=ff}' type64='{CGSize=dd}' />
      <arg index='0' type='@' />
    </method>
    <method selector='decodeValueOfObjCType:at:'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type64='^t' type_modifier='n' />
      <arg index='1' type='^v' />
    </method>
    <method selector='decodeValuesOfObjCTypes:' variadic='true'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type64='^t' type_modifier='n' />
    </method>
    <method selector='encodeArrayOfObjCType:count:at:'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type64='^t' type_modifier='n' />
      <arg index='2' type='^v' />
    </method>
    <method selector='encodeBool:forKey:'>
      <arg index='0' type='B' />
    </method>
    <method selector='encodeBytes:length:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
    </method>
    <method selector='encodeBytes:length:forKey:'>
      <arg c_array_length_in_arg='1' index='0' type='^v' type64='^v' type_modifier='n' />
    </method>
    <method selector='encodePoint:'>
      <arg index='0' type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    </method>
    <method selector='encodePoint:forKey:'>
      <arg index='0' type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    </method>
    <method selector='encodeRect:'>
      <arg index='0' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    </method>
    <method selector='encodeRect:forKey:'>
      <arg index='0' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    </method>
    <method selector='encodeSize:'>
      <arg index='0' type='{_NSSize=ff}' type64='{CGSize=dd}' />
    </method>
    <method selector='encodeSize:forKey:'>
      <arg index='0' type='{_NSSize=ff}' type64='{CGSize=dd}' />
    </method>
    <method selector='encodeValueOfObjCType:at:'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type64='^t' type_modifier='n' />
      <arg index='1' type='^v' />
    </method>
    <method selector='encodeValuesOfObjCTypes:' variadic='true'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type64='^t' type_modifier='n' />
    </method>
  </class>
  <class name='NSComparisonPredicate'>
    <method selector='initWithLeftExpression:rightExpression:customSelector:'>
      <arg index='2' sel_of_type='B@:@' />
    </method>
    <method class_method='true' selector='predicateWithLeftExpression:rightExpression:customSelector:'>
      <arg index='2' sel_of_type='B@:@' />
    </method>
  </class>
  <class name='NSCondition'>
    <method selector='waitUntilDate:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSConditionLock'>
    <method selector='lockBeforeDate:'>
      <retval type='B' />
    </method>
    <method selector='lockWhenCondition:beforeDate:'>
      <retval type='B' />
    </method>
    <method selector='tryLock'>
      <retval type='B' />
    </method>
    <method selector='tryLockWhenCondition:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSConnection'>
    <method selector='independentConversationQueueing'>
      <retval type='B' />
    </method>
    <method selector='isValid'>
      <retval type='B' />
    </method>
    <method selector='multipleThreadsEnabled'>
      <retval type='B' />
    </method>
    <method selector='registerName:'>
      <retval type='B' />
    </method>
    <method selector='registerName:withNameServer:'>
      <retval type='B' />
    </method>
    <method selector='setIndependentConversationQueueing:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSData'>
    <method selector='rangeOfData:options:range:' >
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method class_method='true' selector='dataWithBytes:length:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' type='^v' />
    </method>
    <method class_method='true' selector='dataWithBytesNoCopy:length:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' type='^v' />
    </method>
    <method class_method='true' selector='dataWithBytesNoCopy:length:freeWhenDone:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
      <arg index='2' type='B' />
    </method>
    <method class_method='true' selector='dataWithContentsOfFile:options:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method class_method='true' selector='dataWithContentsOfURL:options:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='getBytes:' suggestion='use -bytes instead' />
    <method selector='getBytes:length:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='o' />
    </method>
    <method selector='getBytes:range:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='o' />
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='initWithBytes:length:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
    </method>
    <method selector='initWithBytesNoCopy:length:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
    </method>
    <method selector='initWithBytesNoCopy:length:freeWhenDone:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
      <arg index='2' type='B' />
    </method>
    <method selector='initWithContentsOfFile:options:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='initWithContentsOfURL:options:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='isEqualToData:'>
      <retval type='B' />
    </method>
    <method selector='subdataWithRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='writeToFile:atomically:'>
      <retval type='B' />
      <arg index='1' type='B' />
    </method>
    <method selector='writeToFile:options:error:'>
      <retval type='B' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='writeToURL:atomically:'>
      <retval type='B' />
      <arg index='1' type='B' />
    </method>
    <method selector='writeToURL:options:error:'>
      <retval type='B' />
      <arg index='2' type_modifier='o' />
    </method>
  </class>
  <class name='NSDate'>
    <method selector='isEqualToDate:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSDateFormatter'>
    <method selector='doesRelativeDateFormatting'>
	    <retval type='B' />
    </method>
    <method selector='setDoesRelativeDateFormatting:'>
	    <arg index='0' type='B' />
    </method>
    <method selector='allowsNaturalLanguage'>
      <retval type='B' />
    </method>
    <method selector='generatesCalendarDates'>
      <retval type='B' />
    </method>
    <method selector='getObjectValue:forString:range:error:'>
      <retval type='B' />
      <arg index='0' type_modifier='o' />
      <arg index='2' type='^{_NSRange=II}' type64='^{_NSRange=QQ}' type_modifier='N' />
      <arg index='3' type_modifier='o' />
    </method>
    <method selector='initWithDateFormat:allowNaturalLanguage:'>
      <arg index='1' type='B' />
    </method>
    <method selector='isLenient'>
      <retval type='B' />
    </method>
    <method selector='setGeneratesCalendarDates:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setLenient:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSDecimalNumber'>
    <method class_method='true' selector='decimalNumberWithDecimal:'>
      <arg index='0' type='{NSDecimal=b8b4b1b1b18[8S]}' />
    </method>
    <method class_method='true' selector='decimalNumberWithMantissa:exponent:isNegative:'>
      <arg index='2' type='B' />
    </method>
    <method selector='initWithDecimal:'>
      <arg index='0' type='{NSDecimal=b8b4b1b1b18[8S]}' />
    </method>
    <method selector='initWithMantissa:exponent:isNegative:'>
      <arg index='2' type='B' />
    </method>
    <method selector='objCType'>
      <retval c_array_delimited_by_null='true' type='^t' />
    </method>
  </class>
  <class name='NSDecimalNumberHandler'>
    <method class_method='true' selector='decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:'>
      <arg index='2' type='B' />
      <arg index='3' type='B' />
      <arg index='4' type='B' />
      <arg index='5' type='B' />
    </method>
    <method selector='initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:'>
      <arg index='2' type='B' />
      <arg index='3' type='B' />
      <arg index='4' type='B' />
      <arg index='5' type='B' />
    </method>
  </class>
  <class name='NSDictionary'>
	  <method selector='enumerateKeysAndObjectsUsingBlock:'>
		  <arg index='0' block='true'>
			  <retval type='v' />
			  <arg type='@' />
			  <arg type='@' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='enumerateKeysAndObjectsWithOptions:usingBlock:'>
		  <arg index='1' block='true'>
			  <retval type='v' />
			  <arg type='@' />
			  <arg type='@' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='keysSortedByValueUsingComparator:'>
		  <arg index='0' block='true' >
			  <retval type='i'/>
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
	  </method>
	  <method selector='keysSortedByValueWithOptions:usingComparator:'>
		  <arg index='1' block='true' >
			  <retval type='i' type64='q'/>
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
	  </method>
	  <method selector='keysOfEntriesPassingTest:'>
		  <arg index='0' block='true' >
			  <retval type='B'/>
			  <arg type='@' />
			  <arg type='@' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='keysOfEntriesWithOptions:passingTest:'>
		  <arg index='1' block='true' >
			  <retval type='B'/>
			  <arg type='@' />
			  <arg type='@' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
    <method c_array_delimited_by_null='true' selector='dictionaryWithObjectsAndKeys:' variadic='true'>
    </method>
    <method class_method='true' selector='dictionaryWithObjects:forKeys:count:'>
      <arg c_array_length_in_arg='2' index='0' type_modifier='n' />
      <arg c_array_length_in_arg='2' index='1' type_modifier='n' />
    </method>
    <method selector='fileExtensionHidden'>
      <retval type='B' />
    </method>
    <method selector='fileIsAppendOnly'>
      <retval type='B' />
    </method>
    <method selector='fileIsImmutable'>
      <retval type='B' />
    </method>
    <method selector='getObjects:andKeys:' suggestion='convert to a python dict instead' />
    <method selector='initWithDictionary:copyItems:'>
      <arg index='1' type='B' />
    </method>
    <method c_array_delimited_by_null='true' selector='initWithObjectsAndKeys:' variadic='true' />
    <method selector='initWithObjects:forKeys:count:'>
      <arg c_array_length_in_arg='2' index='0' type_modifier='n' />
      <arg c_array_length_in_arg='2' index='1' type_modifier='n' />
    </method>
    <method selector='isEqualToDictionary:'>
      <retval type='B' />
    </method>
    <method selector='keysSortedByValueUsingSelector:'>
      <arg index='0' sel_of_type='i@:@' />
    </method>
    <method selector='writeToFile:atomically:'>
      <retval type='B' />
      <arg index='1' type='B' />
    </method>
    <method selector='writeToURL:atomically:'>
      <retval type='B' />
      <arg index='1' type='B' />
    </method>
  </class>
  <class name='NSDistributedLock'>
    <method selector='tryLock'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSDistributedNotificationCenter'>
    <method selector='addObserver:selector:name:object:'>
      <arg index='1' sel_of_type='v@:@' />
    </method>
    <method selector='addObserver:selector:name:object:suspensionBehavior:'>
      <arg index='1' sel_of_type='v@:@' />
    </method>
    <method selector='postNotificationName:object:userInfo:deliverImmediately:'>
      <arg index='3' type='B' />
    </method>
    <method selector='setSuspended:'>
      <arg index='0' type='B' />
    </method>
    <method selector='suspended'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSException'>
    <method class_method='true' selector='raise:format:' variadic='true'>
      <arg index='1' printf_format='true' type='@' />
    </method>
    <method class_method='true' selector='raise:format:arguments:' suggestion='use raise:format:' />
  </class>
  <class name='NSExpression'>
    <method selector='expressionForBlock:arguments:'>
	    <arg index='0' block='true' >
		    <retval type='@' />
		    <arg type='@' />
		    <arg type='@' />
		    <arg type='@' />
	    </arg>
    </method>
    <method selector='expressionBlock' >
	    <retval block='true' >
		    <retval type='@' />
		    <arg type='@' />
		    <arg type='@' />
		    <arg type='@' />
	    </retval>
    </method>
  </class>
  <class name='NSFileHandle'>
	  <method selector='fileHandleForReadingFromURL:error:' >
		  <arg index='1' type_modifier='o' />
	  </method>
	  <method selector='fileHandleForWritingToURL:error:' >
		  <arg index='1' type_modifier='o' />
	  </method>
	  <method selector='fileHandleForUpdatingURL:error:' >
		  <arg index='1' type_modifier='o' />
	  </method>

    <method selector='initWithFileDescriptor:closeOnDealloc:'>
      <arg index='1' type='B' />
    </method>
  </class>
  <class name='NSFileManager'>
    <method selector='attributesOfFileSystemForPath:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='attributesOfItemAtPath:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='changeCurrentDirectoryPath:'>
      <retval type='B' />
    </method>
    <method selector='changeFileAttributes:atPath:'>
      <retval type='B' />
    </method>
    <method selector='contentsEqualAtPath:andPath:'>
      <retval type='B' />
    </method>
    <method selector='contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:'>
	    <arg index='3' type_modifier='o' />
    </method>
    <method selector='contentsOfDirectoryAtPath:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='copyItemAtPath:toPath:error:'>
      <retval type='B' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='copyPath:toPath:handler:'>
      <retval type='B' />
    </method>
    <method selector='createDirectoryAtPath:attributes:'>
      <retval type='B' />
    </method>
    <method selector='createDirectoryAtPath:withIntermediateDirectories:attributes:error:'>
      <retval type='B' />
      <arg index='1' type='B' />
      <arg index='3' type_modifier='o' />
    </method>
    <method selector='createFileAtPath:contents:attributes:'>
      <retval type='B' />
    </method>
    <method selector='createSymbolicLinkAtPath:pathContent:'>
      <retval type='B' />
    </method>
    <method selector='createSymbolicLinkAtPath:withDestinationPath:error:'>
      <retval type='B' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='destinationOfSymbolicLinkAtPath:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='fileAttributesAtPath:traverseLink:'>
      <arg index='1' type='B' />
    </method>
    <method selector='fileExistsAtPath:'>
      <retval type='B' />
    </method>
    <method selector='fileExistsAtPath:isDirectory:'>
      <retval type='B' />
      <arg index='1' type='^B' type_modifier='o' />
    </method>
    <method selector='fileSystemRepresentationWithPath:'>
      <retval c_array_delimited_by_null='true' type='^t' />
    </method>
    <method selector='isDeletableFileAtPath:'>
      <retval type='B' />
    </method>
    <method selector='isExecutableFileAtPath:'>
      <retval type='B' />
    </method>
    <method selector='isReadableFileAtPath:'>
      <retval type='B' />
    </method>
    <method selector='isWritableFileAtPath:'>
      <retval type='B' />
    </method>
    <method selector='linkItemAtPath:toPath:error:'>
      <retval type='B' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='linkPath:toPath:handler:'>
      <retval type='B' />
    </method>
    <method selector='moveItemAtPath:toPath:error:'>
      <retval type='B' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='movePath:toPath:handler:'>
      <retval type='B' />
    </method>
    <method selector='removeFileAtPath:handler:'>
      <retval type='B' />
    </method>
    <method selector='removeItemAtPath:error:'>
      <retval type='B' />
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='setAttributes:ofItemAtPath:error:'>
      <retval type='B' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='stringWithFileSystemRepresentation:length:'>
      <arg c_array_length_in_arg='1' index='0' type='^t' type_modifier='n' />
    </method>
    <method selector='subpathsOfDirectoryAtPath:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='URLForDirectory:inDomain:appropriateForURL:create:error:'>
      <arg index='3' type='B' />
      <arg index='4' type_modifier='o' />
    </method>
    <method selector='copyItemAtURL:toURL:error:'>
	    <retval type='B'/>
	    <arg index='2' type_modifier='o' />
    </method>
    <method selector='moveItemAtURL:toURL:error:'>
	    <retval type='B'/>
	    <arg index='2' type_modifier='o' />
    </method>
    <method selector='linkItemAtURL:toURL:error:'>
	    <retval type='B'/>
	    <arg index='2' type_modifier='o' />
    </method>
    <method selector='removeItemAtURL:error:'>
	    <retval type='B'/>
	    <arg index='1' type_modifier='o' />
    </method>
    <method selector='enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:'>
	    <arg index='3' block='true' >
		    <retval type='B' />
		    <arg type='@' />
		    <arg type='@' />
	    </arg>
    </method>
    <method selector='replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:'>
	    <retval type='B'/>
	    <arg index='4' type_modifier='o' />
	    <arg index='5' type_modifier='o' />
    </method>
  </class>
  <class name='NSFormatter'>
    <method selector='getObjectValue:forString:errorDescription:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='isPartialStringValid:newEditingString:errorDescription:'>
      <retval type='B' />
      <arg index='1' null_accepted='false' type_modifier='N' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='N' />
      <arg index='1' null_accepted='false' type_modifier='N' />
      <arg index='3' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='4' type_modifier='o' />
    </method>
  </class>
  <class name='NSGarbageCollector'>
    <method selector='isCollecting'>
      <retval type='B' />
    </method>
    <method selector='isEnabled'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSHTTPCookie'>
    <method selector='isHTTPOnly'>
      <retval type='B' />
    </method>
    <method selector='isSecure'>
      <retval type='B' />
    </method>
    <method selector='isSessionOnly'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSHashTable'>
    <method selector='containsObject:'>
      <retval type='B' />
    </method>
    <method selector='intersectsHashTable:'>
      <retval type='B' />
    </method>
    <method selector='isEqualToHashTable:'>
      <retval type='B' />
    </method>
    <method selector='isSubsetOfHashTable:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSHost'>
    <method selector='isEqualToHost:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='isHostCacheEnabled'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='setHostCacheEnabled:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSIndexPath'>
    <method selector='getIndexes:' >
      <arg index='0' c_array_of_variable_length='true' type_modifier='o'  />
    </method>
    <method class_method='true' selector='indexPathWithIndexes:length:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
    </method>
    <method selector='initWithIndexes:length:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
    </method>
  </class>
  <class name='NSIndexSet'>
    <method selector='containsIndex:'>
      <retval type='B' />
    </method>
    <method selector='containsIndexes:'>
      <retval type='B' />
    </method>
    <method selector='containsIndexesInRange:'>
      <retval type='B' />
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='countOfIndexesInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='getIndexes:maxCount:inIndexRange:'>
      <arg c_array_length_in_arg='1' index='0' null_accepted='false' type_modifier='o' c_array_length_in_result='true' />
      <arg index='2' null_accepted='false' type_modifier='N' />
    </method>
    <method class_method='true' selector='indexSetWithIndexesInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='initWithIndexesInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='intersectsIndexesInRange:'>
      <retval type='B' />
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='isEqualToIndexSet:'>
      <retval type='B' />
    </method>
    <method selector='enumerateIndexesUsingBlock:'>
	    <arg index='0' block='true' >
		    <retval type='v' />
		    <arg type='I' type64='Q' />
		    <arg type='^B' type_modifier='o' />
	    </arg>
    </method>
    <method selector='enumerateIndexesWithOptions:usingBlock:'>
	    <arg index='1' block='true' >
		    <retval type='v' />
		    <arg type='I' type64='Q' />
		    <arg type='^B' type_modifier='o' />
	    </arg>
    </method>
    <method selector='enumerateIndexesInRange:options:usingBlock:'>
	    <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
	    <arg index='2' block='true' >
		    <retval type='v' />
		    <arg type='I' type64='Q' />
		    <arg type='^B' type_modifier='o' />
	    </arg>
    </method>
    <method selector='indexPassingTest:'>
	    <arg index='0' block='true'>
		    <retval type='B' />
		    <arg type='I' type64='Q' />
		    <arg type='^B' type_modifier='o' />
	    </arg>
    </method>
    <method selector='indexWithOptions:passingTest:'>
	    <arg index='1' block='true'>
		    <retval type='B' />
		    <arg type='I' type64='Q' />
		    <arg type='^B' type_modifier='o' />
	    </arg>
    </method>
    <method selector='indexInRange:options:passingTest:'>
	    <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
	    <arg index='2' block='true'>
		    <retval type='B' />
		    <arg type='I' type64='Q' />
		    <arg type='^B' type_modifier='o' />
	    </arg>
    </method>
	  <method selector='indexesPassingTest:'>
		  <arg index='0' block='true'>
			  <retval type='B' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='indexesWithOptions:passingTest:'>
		  <arg index='1' block='true'>
			  <retval type='B' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='indexesInRange:options:passingTest:'>
	    <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
		  <arg index='2' block='true'>
			  <retval type='B' />
			  <arg type='I' type64='Q' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
  </class>
  <class name='NSInputStream'>
    <method selector='getBuffer:length:' suggestion='Not supported at the moment' />
    <method selector='hasBytesAvailable'>
      <retval type='B' />
    </method>
    <method selector='read:maxLength:'>
      <arg c_array_length_in_arg='1' c_array_length_in_result='true' index='0' type='^v' type64='^v' type_modifier='o' />
    </method>
  </class>
  <class name='NSInvocation'>
    <method selector='argumentsRetained'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSInvocationOperation'>
    <method selector='initWithTarget:selector:object:'>
      <arg index='1' sel_of_type='v@:@' />
    </method>
  </class>
  <class name='NSKeyedArchiver'>
    <method class_method='true' selector='archiveRootObject:toFile:'>
      <retval type='B' />
    </method>
    <method selector='encodeBool:forKey:'>
      <arg index='0' type='B' />
    </method>
    <method selector='encodeBytes:length:forKey:'>
      <arg c_array_length_in_arg='1' index='0' type='^v' type64='^v' type_modifier='n' />
    </method>
  </class>
  <class name='NSKeyedUnarchiver'>
    <method selector='containsValueForKey:'>
      <retval type='B' />
    </method>
    <method selector='decodeBoolForKey:'>
      <retval type='B' />
    </method>
    <method selector='decodeBytesForKey:returnedLength:'>
      <retval c_array_length_in_arg='1' type='^v' type64='^v' />
      <arg index='1' type_modifier='o' />
    </method>
  </class>
  <class name='NSLock'>
    <method selector='lockBeforeDate:'>
      <retval type='B' />
    </method>
    <method selector='tryLock'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSMachBootstrapServer'>
    <method selector='registerPort:name:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSMetadataQuery'>
    <method selector='isGathering'>
      <retval type='B' />
    </method>
    <method selector='isStarted'>
      <retval type='B' />
    </method>
    <method selector='isStopped'>
      <retval type='B' />
    </method>
    <method selector='startQuery'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSMethodSignature'>
    <method selector='getArgumentTypeAtIndex:'>
      <retval c_array_delimited_by_null='true' type='^t' type64='^t' />
    </method>
    <method selector='isOneway'>
      <retval type='B' />
    </method>
    <method selector='methodReturnType'>
      <retval c_array_delimited_by_null='true' type='^t' type64='^t' />
    </method>
    <method class_method='true' selector='signatureWithObjCTypes:'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type_modifier='n' />
    </method>
  </class>
  <class name='NSMutableArray'>
	  <method selector='sortUsingComparator:'>
		  <arg index='0' block='true' >
			  <retval type='l'/>
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
	  </method>
	  <method selector='sortWithOptions:usingComparator:'>
		  <arg index='1' block='true' >
			  <retval type='l'/>
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
	  </method>
	  <method selector='sortUsingFunction:context:' >
		  <arg index='0' function_pointer='true' function_pointer_retained='false' >
			  <retval type='l' />
			  <arg type='@' />
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
		  <arg index='1' type='@' />
	  </method>
	  <method selector='sortUsingFunction:context:range:' >
		  <arg index='0' function_pointer='true' function_pointer_retained='false' >
			  <retval type='l' />
			  <arg type='@' />
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
		  <arg index='1' type='@' />
      		  <arg index='2' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
	  </method>
    <method selector='removeObject:inRange:'>
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='removeObjectIdenticalTo:inRange:'>
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='removeObjectsFromIndices:numIndices:'>
      <arg index='0' type_modifier='n' c_array_length_in_arg='1' />
    </method>
    <method selector='removeObjectsInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='replaceObjectsInRange:withObjectsFromArray:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='replaceObjectsInRange:withObjects:count:'>
	<arg index='1' type_modifier='n' c_array_length_in_arg='2' />
    </method>
    <method selector='replaceObjectsInRange:withObjectsFromArray:range:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='2' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='sortUsingSelector:'>
      <arg index='0' sel_of_type='i@:@' />
    </method>
  </class>
  <class name='NSMutableAttributedString'>
    <method selector='addAttribute:value:range:'>
      <arg index='2' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='addAttributes:range:'>
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='deleteCharactersInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='removeAttribute:range:'>
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='replaceCharactersInRange:withAttributedString:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='replaceCharactersInRange:withString:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='setAttributes:range:'>
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
  </class>
  <class name='NSMutableCharacterSet'>
    <method selector='addCharactersInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='removeCharactersInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
  </class>
  <class name='NSMutableData'>
    <method selector='appendBytes:length:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
    </method>
    <method selector='replaceBytesInRange:withBytes:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg c_array_length_in_arg='0' index='1' type_modifier='n' />
    </method>
    <method selector='replaceBytesInRange:withBytes:length:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg c_array_length_in_arg='2' index='1' type_modifier='n' />
    </method>
    <method selector='resetBytesInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
  </class>
  <class name='NSMutableIndexSet'>
    <method selector='addIndexesInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='removeIndexesInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
  </class>
  <class name='NSMutableString'>
    <method selector='appendFormat:' variadic='true'>
      <arg index='0' printf_format='true' type='@' />
    </method>
    <method selector='deleteCharactersInRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='replaceCharactersInRange:withString:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='replaceOccurrencesOfString:withString:options:range:'>
      <arg index='3' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
  </class>
  <class name='NSMutableURLRequest'>
    <method selector='setHTTPShouldHandleCookies:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSNetService'>
    <method selector='getInputStream:outputStream:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
      <arg index='1' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='setTXTRecordData:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSNotificationCenter'>
	  <method selector='addObserverForName:object:usingBlock:'>
		  <arg index='2' block='true' >
			  <retval type='v'/>
			  <arg type='@'/>
		  </arg>
	  </method>
	  <method selector='addObserverForName:object:queue:usingBlock:'>
		  <arg index='3' block='true' >
			  <retval type='v' />
			  <arg index='@' />
		  </arg>
	  </method>
    <method selector='addObserver:selector:name:object:'>
      <arg index='1' sel_of_type='v@:@' />
    </method>
  </class>
  <class name='NSNumber'>
    <method selector='boolValue'>
      <retval type='B' />
    </method>
    <method selector='charValue'>
      <retval type='z' />
    </method>
    <method selector='decimalValue'>
      <retval type='{NSDecimal=b8b4b1b1b18[8S]}' />
    </method>
    <method selector='initWithBool:'>
      <arg index='0' type='B' />
    </method>
    <method selector='initWithChar:'>
      <arg index='0' type='z' type64='z' />
    </method>
    <method selector='isEqualToNumber:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='numberWithBool:'>
      <arg index='0' type='B' />
    </method>
    <method class_method='true' selector='numberWithChar:'>
      <arg index='0' type='z' type64='z' />
    </method>
  </class>
  <class name='NSNumberFormatter'>
    <method selector='allowsFloats'>
      <retval type='B' />
    </method>
    <method selector='alwaysShowsDecimalSeparator'>
      <retval type='B' />
    </method>
    <method selector='generatesDecimalNumbers'>
      <retval type='B' />
    </method>
    <method selector='getObjectValue:forString:range:error:'>
      <retval type='B' />
      <arg index='0' type_modifier='o' />
      <arg index='2' type_modifier='N' />
      <arg index='3' type_modifier='o' null_accepted='true' />
    </method>
    <method selector='hasThousandSeparators'>
      <retval type='B' />
    </method>
    <method selector='isLenient'>
      <retval type='B' />
    </method>
    <method selector='usesSignificantDigits'>
      <retval type='B' />
    </method>
    <method selector='isPartialStringValidationEnabled'>
      <retval type='B' />
    </method>
    <method selector='localizesFormat'>
      <retval type='B' />
    </method>
    <method selector='setAllowsFloats:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setAlwaysShowsDecimalSeparator:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setGeneratesDecimalNumbers:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setHasThousandSeparators:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setLenient:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setLocalizesFormat:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setPartialStringValidationEnabled:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setUsesGroupingSeparator:'>
      <retval type='v' />
      <arg index='0' type='B' />
    </method>
    <method selector='setUsesSignificantDigits:'>
      <retval type='v' />
      <arg index='0' type='B' />
    </method>
    <method selector='usesGroupingSeparator'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSObject'>
	  <method selector='beginContentAccess'>
		  <retval type='B'/>
	  </method>
	  <method selector='isContentDiscarded'>
		  <retval type='B'/>
	  </method>
    <method selector='mutableCopyWithZone:'>
      <retval type='@' />
      <arg index='0' type='^{_NSZone=}' />
    </method>
    <method class_method='true' selector='mutableCopyWithZone:'>
      <retval type='@' />
      <arg index='0' type='^{_NSZone=}' />
    </method>
    <method selector='URL:resourceDataDidBecomeAvailable:'>
      <retval type='v' />
    </method>
    <method selector='URL:resourceDidFailLoadingWithReason:'>
      <retval type='v' />
    </method>
    <method selector='URLHandle:resourceDataDidBecomeAvailable:'>
      <retval type='v' />
    </method>
    <method selector='URLHandle:resourceDidFailLoadingWithReason:'>
      <retval type='v' />
    </method>
    <method selector='URLHandleResourceDidBeginLoading:'>
      <retval type='v' />
    </method>
    <method selector='URLHandleResourceDidCancelLoading:'>
      <retval type='v' />
    </method>
    <method selector='URLHandleResourceDidFinishLoading:'>
      <retval type='v' />
    </method>
    <method selector='URLProtocol:cachedResponseIsValid:'>
      <retval type='v' />
    </method>
    <method selector='URLProtocol:didCancelAuthenticationChallenge:'>
      <retval type='v' />
    </method>
    <method selector='URLProtocol:didFailWithError:'>
      <retval type='v' />
    </method>
    <method selector='URLProtocol:didLoadData:'>
      <retval type='v' />
    </method>
    <method selector='URLProtocol:didReceiveAuthenticationChallenge:'>
      <retval type='v' />
    </method>
    <method selector='URLProtocol:didReceiveResponse:cacheStoragePolicy:'>
      <retval type='v' />
      <arg index='2' type='I' />
    </method>
    <method selector='URLProtocol:wasRedirectedToRequest:redirectResponse:'>
      <retval type='v' />
    </method>
    <method selector='URLProtocolDidFinishLoading:'>
      <retval type='v' />
    </method>
    <method selector='URLResourceDidCancelLoading:'>
      <retval type='v' />
    </method>
    <method selector='URLResourceDidFinishLoading:'>
      <retval type='v' />
    </method>
    <method class_method='true' selector='accessInstanceVariablesDirectly'>
      <retval type='B' />
    </method>
    <method selector='addObserver:forKeyPath:options:context:'>
      <retval type='v' />
      <arg index='2' type='I' />
      <arg index='3' type='^v' />
    </method>
    <method selector='archiver:didEncodeObject:'>
      <retval type='v' />
    </method>
    <method selector='archiver:willReplaceObject:withObject:'>
      <retval type='v' />
    </method>
    <method selector='archiverDidFinish:'>
      <retval type='v' />
    </method>
    <method selector='archiverWillFinish:'>
      <retval type='v' />
    </method>
    <method selector='attemptRecoveryFromError:optionIndex:'>
      <retval type='B' />
      <arg index='1' type='I' type64='Q' />
    </method>
    <method selector='attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:'>
      <retval type='v' />
      <arg index='1' type='I' type64='Q' />
      <arg index='3' sel_of_type='v@:B^v' />
      <arg index='4' type='^v' />
    </method>
    <method selector='authenticateComponents:withData:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='automaticallyNotifiesObserversForKey:'>
      <retval type='B' />
    </method>
    <method selector='cancelAuthenticationChallenge:'>
      <retval type='v' />
    </method>
    <method class_method='true' selector='cancelPreviousPerformRequestsWithTarget:'>
      <retval type='v' />
    </method>
    <method class_method='true' selector='cancelPreviousPerformRequestsWithTarget:selector:object:'>
      <retval type='v' />
      <arg index='1' sel_of_type='v@:@' />
    </method>
    <method selector='classCode'>
      <retval type='L' type64='Q' />
    </method>
    <method selector='classForArchiver'>
      <retval type='#' />
    </method>
    <method selector='classForCoder'>
      <retval type='#' />
    </method>
    <method selector='classForKeyedArchiver'>
      <retval type='#' />
    </method>
    <method class_method='true' selector='classForKeyedUnarchiver'>
      <retval type='#' />
    </method>
    <method selector='classForPortCoder'>
      <retval type='#' />
    </method>
    <method selector='conformsToProtocol:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='conformsToProtocol:'>
      <retval type='B' />
    </method>
    <method selector='connection:didCancelAuthenticationChallenge:'>
      <retval type='v' />
    </method>
    <method selector='connection:didFailWithError:'>
      <retval type='v' />
    </method>
    <method selector='connection:didReceiveAuthenticationChallenge:'>
      <retval type='v' />
    </method>
    <method selector='connection:didReceiveData:'>
      <retval type='v' />
    </method>
    <method selector='connection:didReceiveResponse:'>
      <retval type='v' />
    </method>
    <method selector='connection:handleRequest:'>
      <retval type='B' />
    </method>
    <method selector='connection:shouldMakeNewConnection:'>
      <retval type='B' />
    </method>
    <method selector='connection:willCacheResponse:'>
      <retval type='@' />
    </method>
    <method selector='connection:willSendRequest:redirectResponse:'>
      <retval type='@' />
    </method>
    <method selector='connectionDidFinishLoading:'>
      <retval type='v' />
    </method>
    <method selector='continueWithoutCredentialForAuthenticationChallenge:'>
      <retval type='v' />
    </method>
    <method selector='copyWithZone:'>
      <arg index='0' type='^{_NSZone=}' />
    </method>
    <method class_method='true' selector='copyWithZone:'>
      <arg index='0' type='^{_NSZone=}' />
    </method>
    <method selector='countByEnumeratingWithState:objects:count:' suggestion='use python iteration' />
    <method selector='didChange:valuesAtIndexes:forKey:'>
      <retval type='v' />
      <arg index='0' type='I' />
    </method>
    <method selector='didChangeValueForKey:'>
      <retval type='v' />
    </method>
    <method selector='didChangeValueForKey:withSetMutation:usingObjects:'>
      <retval type='v' />
      <arg index='1' type='I' />
    </method>
    <method selector='doesContain:'>
      <retval type='B' />
    </method>
    <method selector='doesNotRecognizeSelector:'>
      <retval type='v' />
      <arg index='0' type=':' />
    </method>
    <method selector='download:decideDestinationWithSuggestedFilename:'>
      <retval type='v' />
    </method>
    <method selector='download:didCancelAuthenticationChallenge:'>
      <retval type='v' />
    </method>
    <method selector='download:didCreateDestination:'>
      <retval type='v' />
    </method>
    <method selector='download:didFailWithError:'>
      <retval type='v' />
    </method>
    <method selector='download:didReceiveAuthenticationChallenge:'>
      <retval type='v' />
    </method>
    <method selector='download:didReceiveDataOfLength:'>
      <retval type='v' />
      <arg index='1' type='I' type64='Q' />
    </method>
    <method selector='download:didReceiveResponse:'>
      <retval type='v' />
    </method>
    <method selector='download:shouldDecodeSourceDataOfMIMEType:'>
      <retval type='B' />
    </method>
    <method selector='download:willResumeWithResponse:fromByte:'>
      <retval type='v' />
      <arg index='2' type='q' />
    </method>
    <method selector='downloadDidBegin:'>
      <retval type='v' />
    </method>
    <method selector='downloadDidFinish:'>
      <retval type='v' />
    </method>
    <method selector='encodeWithCoder:'>
      <retval type='v' />
    </method>
    <method selector='exceptionDuringOperation:error:leftOperand:rightOperand:'>
      <retval type='@' />
      <arg index='0' type=':' />
      <arg index='1' type='I' />
    </method>
    <method selector='fileManager:shouldCopyItemAtURL:toURL:'>
	    <retval type='B' />
    </method>
    <method selector='fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:'>
	    <retval type='B' />
    </method>
    <method selector='fileManager:shouldMoveItemAtURL:toURL:'>
	    <retval type='B' />
    </method>
    <method selector='fileManager:shouldProceedAfterError:movingItemAtURL:toURL:'>
	    <retval type='B' />
    </method>
    <method selector='fileManager:shouldLinkItemAtURL:toURL:'>
	    <retval type='B' />
    </method>
    <method selector='fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:'>
	    <retval type='B' />
    </method>
    <method selector='fileManager:shouldRemoveItemAtURL:'>
	    <retval type='B' />
    </method>
    <method selector='fileManager:shouldProceedAfterError:removingItemAtURL:'>
	    <retval type='B' />
    </method>

    <method selector='fileManager:shouldCopyItemAtPath:toPath:'>
      <retval type='B' />
    </method>
    <method selector='fileManager:shouldLinkItemAtPath:toPath:'>
      <retval type='B' />
    </method>
    <method selector='fileManager:shouldMoveItemAtPath:toPath:'>
      <retval type='B' />
    </method>
    <method selector='fileManager:shouldProceedAfterError:'>
      <retval type='B' />
    </method>
    <method selector='fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:'>
      <retval type='B' />
    </method>
    <method selector='fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:'>
      <retval type='B' />
    </method>
    <method selector='fileManager:shouldProceedAfterError:movingItemAtPath:toPath:'>
      <retval type='B' />
    </method>
    <method selector='fileManager:shouldProceedAfterError:removingItemAtPath:'>
      <retval type='B' />
    </method>
    <method selector='fileManager:shouldRemoveItemAtPath:'>
      <retval type='B' />
    </method>
    <method selector='fileManager:willProcessPath:'>
      <retval type='v' />
    </method>
    <method selector='forwardInvocation:'>
      <retval type='v' />
    </method>
    <method selector='handleMachMessage:'>
      <retval type='v' />
      <arg index='0' type='^v' />
    </method>
    <method selector='handlePortMessage:'>
      <retval type='v' />
    </method>
    <method selector='handleTakeValue:forUnboundKey:'>
      <retval type='v' />
    </method>
    <method selector='hash'>
      <retval type='I' type64='Q' />
    </method>
    <method class_method='true' selector='initialize'>
      <retval type='v' />
    </method>
    <method selector='insertValue:atIndex:inPropertyWithKey:'>
      <retval type='v' />
      <arg index='1' type='I' type64='Q' />
    </method>
    <method selector='insertValue:inPropertyWithKey:'>
      <retval type='v' />
    </method>
    <method class_method='true' selector='instanceMethodSignatureForSelector:'>
      <arg index='0' type=':' />
    </method>
    <method class_method='true' selector='instancesRespondToSelector:'>
      <retval type='B' />
      <arg index='0' type=':' />
    </method>
    <method selector='isCaseInsensitiveLike:'>
      <retval type='B' />
    </method>
    <method selector='isEqual:'>
      <retval type='B' />
    </method>
    <method selector='isEqualTo:'>
      <retval type='B' />
    </method>
    <method selector='isGreaterThan:'>
      <retval type='B' />
    </method>
    <method selector='isGreaterThanOrEqualTo:'>
      <retval type='B' />
    </method>
    <method selector='isKindOfClass:'>
      <retval type='B' />
      <arg index='0' type='#' />
    </method>
    <method selector='isLessThan:'>
      <retval type='B' />
    </method>
    <method selector='isLessThanOrEqualTo:'>
      <retval type='B' />
    </method>
    <method selector='isLike:'>
      <retval type='B' />
    </method>
    <method selector='isMemberOfClass:'>
      <retval type='B' />
      <arg index='0' type='#' />
    </method>
    <method selector='isNotEqualTo:'>
      <retval type='B' />
    </method>
    <method selector='isProxy'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='isSubclassOfClass:'>
      <retval type='B' />
      <arg index='0' type='#' />
    </method>
    <method class_method='true' selector='keyPathsForValuesAffectingValueForKey:'>
      <retval type='@' />
    </method>
    <method class_method='true' selector='load'>
      <retval type='v' />
    </method>
    <method selector='lock'>
      <retval type='v' />
    </method>
    <method selector='makeNewConnection:sender:'>
      <retval type='B' />
    </method>
    <method selector='methodSignatureForSelector:'>
      <arg index='0' type=':' />
    </method>
    <method selector='mutableCopyWithZone:'>
      <arg index='0' type='^{_NSZone=}' />
    </method>
    <method class_method='true' selector='mutableCopyWithZone:'>
      <arg index='0' type='^{_NSZone=}' />
    </method>
    <method selector='netService:didNotPublish:'>
      <retval type='v' />
    </method>
    <method selector='netService:didNotResolve:'>
      <retval type='v' />
    </method>
    <method selector='netService:didUpdateTXTRecordData:'>
      <retval type='v' />
    </method>
    <method selector='netServiceBrowser:didFindDomain:moreComing:'>
      <retval type='v' />
      <arg index='2' type='B' />
    </method>
    <method selector='netServiceBrowser:didFindService:moreComing:'>
      <retval type='v' />
      <arg index='2' type='B' />
    </method>
    <method selector='netServiceBrowser:didNotSearch:'>
      <retval type='v' />
    </method>
    <method selector='netServiceBrowser:didRemoveDomain:moreComing:'>
      <retval type='v' />
      <arg index='2' type='B' />
    </method>
    <method selector='netServiceBrowser:didRemoveService:moreComing:'>
      <retval type='v' />
      <arg index='2' type='B' />
    </method>
    <method selector='netServiceBrowserDidStopSearch:'>
      <retval type='v' />
    </method>
    <method selector='netServiceBrowserWillSearch:'>
      <retval type='v' />
    </method>
    <method selector='netServiceDidResolveAddress:'>
      <retval type='v' />
    </method>
    <method selector='netServiceDidStop:'>
      <retval type='v' />
    </method>
    <method selector='netServiceWillPublish:'>
      <retval type='v' />
    </method>
    <method selector='netServiceWillResolve:'>
      <retval type='v' />
    </method>
    <method selector='newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:'>
      <arg index='0' type='#' />
    </method>
    <method selector='observeValueForKeyPath:ofObject:change:context:'>
      <retval type='v' />
      <arg index='3' type='^v' />
    </method>
    <method selector='parser:didEndElement:namespaceURI:qualifiedName:'>
      <retval type='v' />
    </method>
    <method selector='parser:didEndMappingPrefix:'>
      <retval type='v' />
    </method>
    <method selector='parser:didStartElement:namespaceURI:qualifiedName:attributes:'>
      <retval type='v' />
    </method>
    <method selector='parser:didStartMappingPrefix:toURI:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundCDATA:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundCharacters:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundComment:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundElementDeclarationWithName:model:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundExternalEntityDeclarationWithName:publicID:systemID:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundIgnorableWhitespace:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundInternalEntityDeclarationWithName:value:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundNotationDeclarationWithName:publicID:systemID:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundProcessingInstructionWithTarget:data:'>
      <retval type='v' />
    </method>
    <method selector='parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:'>
      <retval type='v' />
    </method>
    <method selector='parser:parseErrorOccurred:'>
      <retval type='v' />
    </method>
    <method selector='parser:validationErrorOccurred:'>
      <retval type='v' />
    </method>
    <method selector='parserDidEndDocument:'>
      <retval type='v' />
    </method>
    <method selector='parserDidStartDocument:'>
      <retval type='v' />
    </method>
    <method selector='performSelector:'>
      <arg index='0' type=':' />
    </method>
    <method selector='performSelector:onThread:withObject:waitUntilDone:'>
      <retval type='v' />
      <arg index='0' sel_of_type='v@:@' />
      <arg index='3' type='B' />
    </method>
    <method selector='performSelector:onThread:withObject:waitUntilDone:modes:'>
      <retval type='v' />
      <arg index='0' sel_of_type='v@:@' />
      <arg index='3' type='B' />
    </method>
    <method selector='performSelector:withObject:'>
      <arg index='0' type=':' />
    </method>
    <method selector='performSelector:withObject:afterDelay:'>
      <retval type='v' />
      <arg index='0' sel_of_type='v@:@' />
      <arg index='2' type='d' />
    </method>
    <method selector='performSelector:withObject:afterDelay:inModes:'>
      <retval type='v' />
      <arg index='0' sel_of_type='v@:@' />
      <arg index='2' type='d' />
    </method>
    <method selector='performSelector:withObject:withObject:'>
      <arg index='0' type=':' />
    </method>
    <method selector='performSelectorInBackground:withObject:'>
      <retval type='v' />
      <arg index='0' sel_of_type='v@:@' />
    </method>
    <method selector='performSelectorOnMainThread:withObject:waitUntilDone:'>
      <retval type='v' />
      <arg index='0' sel_of_type='v@:@' />
      <arg index='2' type='B' />
    </method>
    <method selector='performSelectorOnMainThread:withObject:waitUntilDone:modes:'>
      <retval type='v' />
      <arg index='0' sel_of_type='v@:@' />
      <arg index='2' type='B' />
    </method>
    <method class_method='true' selector='poseAsClass:'>
      <retval type='v' />
      <arg index='0' type='#' />
    </method>
    <method selector='release'>
      <retval type='Vv' />
    </method>
    <method selector='removeObserver:forKeyPath:'>
      <retval type='v' />
    </method>
    <method selector='removeValueAtIndex:fromPropertyWithKey:'>
      <retval type='v' />
      <arg index='0' type='I' type64='Q' />
    </method>
    <method selector='replaceValueAtIndex:inPropertyWithKey:withValue:'>
      <retval type='v' />
      <arg index='0' type='I' type64='Q' />
    </method>
    <method class_method='true' selector='resolveClassMethod:'>
      <retval type='B' />
      <arg index='0' type=':' />
    </method>
    <method class_method='true' selector='resolveInstanceMethod:'>
      <retval type='B' />
      <arg index='0' type=':' />
    </method>
    <method selector='respondsToSelector:'>
      <retval type='B' />
      <arg index='0' type=':' />
    </method>
    <method selector='retainCount'>
      <retval type='I' type64='Q' />
    </method>
    <method selector='roundingMode'>
      <retval type='I' />
    </method>
    <method selector='scale'>
      <retval type='s' />
    </method>
    <method selector='scriptingBeginsWith:'>
      <retval type='B' />
    </method>
    <method selector='scriptingContains:'>
      <retval type='B' />
    </method>
    <method selector='scriptingEndsWith:'>
      <retval type='B' />
    </method>
    <method selector='scriptingIsEqualTo:'>
      <retval type='B' />
    </method>
    <method selector='scriptingIsGreaterThan:'>
      <retval type='B' />
    </method>
    <method selector='scriptingIsGreaterThanOrEqualTo:'>
      <retval type='B' />
    </method>
    <method selector='scriptingIsLessThan:'>
      <retval type='B' />
    </method>
    <method selector='scriptingIsLessThanOrEqualTo:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='setKeys:triggerChangeNotificationsForDependentKey:'>
      <retval type='v' />
    </method>
    <method selector='setNilValueForKey:'>
      <retval type='v' />
    </method>
    <method selector='setObservationInfo:'>
      <retval type='v' />
      <arg index='0' type='^v' />
    </method>
    <method selector='setScriptingProperties:'>
      <retval type='v' />
    </method>
    <method selector='setValue:forKey:'>
      <retval type='v' />
    </method>
    <method selector='setValue:forKeyPath:'>
      <retval type='v' />
    </method>
    <method selector='setValue:forUndefinedKey:'>
      <retval type='v' />
    </method>
    <method selector='setValuesForKeysWithDictionary:'>
      <retval type='v' />
    </method>
    <method class_method='true' selector='setVersion:'>
      <retval type='v' />
      <arg index='0' type='i' type64='q' />
    </method>
    <method selector='spellServer:checkString:offset:types:options:orthography:wordCount:'>
	    <arg index='2' type='I' type64='Q' />
	    <arg index='3' type='i' type64='q' />
	    <arg index='6' type='^i' type64='^q' type_modifier='o'/>
    </method>
    <method selector='spellServer:checkGrammarInString:language:details:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='3' type_modifier='o' type="^@" />
    </method>
    <method selector='spellServer:didForgetWord:inLanguage:'>
      <retval type='v' />
    </method>
    <method selector='spellServer:didLearnWord:inLanguage:'>
      <retval type='v' />
    </method>
    <method selector='spellServer:findMisspelledWordInString:language:wordCount:countOnly:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='3' type_modifier='o' type="^i" type64="^q" />
      <arg index='4' type='B' />
    </method>
    <method selector='spellServer:suggestCompletionsForPartialWordRange:inString:language:'>
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='stream:handleEvent:'>
      <retval type='v' />
      <arg index='1' type='I' type64='Q' />
    </method>
    <method selector='superclass'>
      <retval type='#' />
    </method>
    <method class_method='true' selector='superclass'>
      <retval type='#' />
    </method>
    <method selector='takeStoredValue:forKey:'>
      <retval type='v' />
    </method>
    <method selector='takeValue:forKey:'>
      <retval type='v' />
    </method>
    <method selector='takeValue:forKeyPath:'>
      <retval type='v' />
    </method>
    <method selector='takeValuesFromDictionary:'>
      <retval type='v' />
    </method>
    <method selector='unableToSetNilForKey:'>
      <retval type='v' />
    </method>
    <method selector='unarchiver:cannotDecodeObjectOfClassName:originalClasses:'>
      <retval type='#' />
    </method>
    <method selector='unarchiver:willReplaceObject:withObject:'>
      <retval type='v' />
    </method>
    <method selector='unarchiverDidFinish:'>
      <retval type='v' />
    </method>
    <method selector='unarchiverWillFinish:'>
      <retval type='v' />
    </method>
    <method selector='unlock'>
      <retval type='v' />
    </method>
    <method selector='useCredential:forAuthenticationChallenge:'>
      <retval type='v' />
    </method>
    <method class_method='true' selector='useStoredAccessor'>
      <retval type='B' />
    </method>
    <method selector='validateValue:forKey:error:'>
      <retval type='B' />
      <arg index='0' type_modifier='N' type="^@"/>
      <arg index='2' type_modifier='o' type="^@"/>
    </method>
    <method selector='validateValue:forKeyPath:error:'>
      <retval type='B' />
      <arg index='0' type_modifier='N' type="^@"/>
      <arg index='1' type='@' />
      <arg index='2' type_modifier='o' type="^@"/>
    </method>
    <method selector='valueAtIndex:inPropertyWithKey:'>
      <arg index='0' type='I' type64='Q' />
    </method>
    <method class_method='true' selector='version'>
      <retval type='i' type64='q' />
    </method>
    <method selector='willChange:valuesAtIndexes:forKey:'>
      <retval type='v' />
      <arg index='0' type='I' />
    </method>
    <method selector='willChangeValueForKey:'>
      <retval type='v' />
    </method>
    <method selector='willChangeValueForKey:withSetMutation:usingObjects:'>
      <retval type='v' />
      <arg index='1' type='I' />
    </method>
  </class>
  <class name='NSBlockOperation'>
	  <method class_method='true' selector='blockOperationWithBlock:'>
		  <arg index='0' block='true'>
			  <retval type='v' />
		  </arg>
	  </method>
	  <method selector='addExecutionBlock:'>
		  <arg index='0' block='true'>
			  <retval type='v' />
		  </arg>
	  </method>

  </class>
  <class name='NSOperation'>
	  <method selector='completionBlock' >
		  <retval block='true'>
			  <retval type='v' />
		  </retval>
	  </method>
	  <method selector='setCompletionBlock:' >
		  <arg index='0' block='true'>
			  <retval type='v' />
		  </arg>
	  </method>

    <method selector='isCancelled'>
      <retval type='B' />
    </method>
    <method selector='isConcurrent'>
      <retval type='B' />
    </method>
    <method selector='isExecuting'>
      <retval type='B' />
    </method>
    <method selector='isFinished'>
      <retval type='B' />
    </method>
    <method selector='isReady'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSOperationQueue'>
	  <method selector='addOperations:waitUntilFinished:'>
		  <arg index='1' type='B' />
	  </method>
	  <method selector='addOperationWithBlock:'>
		  <arg index='0' block='true'>
			  <retval type='v'/>
		  </arg>
	  </method>
    <method selector='isSuspended'>
      <retval type='B' />
    </method>
    <method selector='setSuspended:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSOutputStream'>
	  <method selector='initWithURL:append:'>
		  <arg index='1' type='B'/>
	  </method>
	  <method class_method='true' selector='outputStreamWithURL:append:'>
		  <arg index='1' type='B'/>
	  </method>
    <method selector='hasSpaceAvailable'>
      <retval type='B' />
    </method>
    <method selector='initToBuffer:capacity:'>
      <arg c_array_length_in_arg='1' index='0' type='^v' type_modifier='o' />
    </method>
    <method selector='initToFileAtPath:append:'>
      <arg index='1' type='B' />
    </method>
    <method class_method='true' selector='outputStreamToBuffer:capacity:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='o' type='^v'/>
    </method>
    <method class_method='true' selector='outputStreamToFileAtPath:append:'>
      <arg index='1' type='B' />
    </method>
    <method selector='write:maxLength:'>
      <arg c_array_length_in_arg='1' index='0' type='^v' type_modifier='n' />
    </method>
  </class>
  <class name='NSPointerFunctions'>
	  <method selector='usesStrongWriteBarrier'>
		  <retval type='B'/>
	  </method>
	  <method selector='usesWeakReadAndWriteBarriers'>
		  <retval type='B'/>
	  </method>
  </class>
  <class name='NSPointerArray'>
	  <method selector='addPointer:'>
		  <arg index='0' type='@' type64='@' />
	  </method>
    <method selector='insertPointer:atIndex:' >
		  <arg index='0' type='@' type64='@' />
	  </method>

    <method selector='pointerAtIndex:' >
	    <retval type='@' type64='@' />
    </method>
    <method selector='replacePointerAtIndex:withPointer:' suggestion='use NSMutableArray' >
		  <arg index='1' type='@' type64='@' />
	  </method>
  </class>
  <class name='NSPort'>
    <method selector='isValid'>
      <retval type='B' />
    </method>
    <method selector='sendBeforeDate:components:from:reserved:'>
      <retval type='B' />
    </method>
    <method selector='sendBeforeDate:msgid:components:from:reserved:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSPortCoder'>
    <method selector='isBycopy'>
      <retval type='B' />
    </method>
    <method selector='isByref'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSPortMessage'>
    <method selector='sendBeforeDate:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSPortNameServer'>
    <method selector='registerPort:name:'>
      <retval type='B' />
    </method>
    <method selector='removePortForName:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSPositionalSpecifier'>
    <method selector='insertionReplaces'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSPredicate'>
	  <method selector='predicateWithBlock:'>
		  <arg index='0' block='true'>
			  <retval type='B' />
			  <arg type='@'/>
			  <arg type='@'/>
		  </arg>
	  </method>
    <method selector='evaluateWithObject:'>
      <retval type='B' />
    </method>
    <method selector='evaluateWithObject:substitutionVariables:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='predicateWithFormat:' variadic='true'>
      <arg index='0' printf_format='true' type='@' />
    </method>
    <method class_method='true' selector='predicateWithFormat:arguments:' suggestion='use predicateWithFormat:' />
    <method class_method='true' selector='predicateWithValue:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSProcessInfo'>
  </class>
  <class name='NSPropertyListSerialization'>
	  <method class_method='true' selector='dataWithPropertyList:format:options:error:' >
		  <arg index='3' type_modifier='o' />
	  </method>
	  <method class_method='true' selector='writePropertyList:toStream:format:options:error:' >
		  <arg index='4' type_modifier='o' />
	  </method>
	  <method class_method='true' selector='propertyListWithData:options:format:error:' >
		  <arg index='2' type_modifier='o' />
		  <arg index='3' type_modifier='o' />
	  </method>
	  <method class_method='true' selector='propertyListWithStream:options:format:error:' >
		  <arg index='2' type_modifier='o' />
		  <arg index='3' type_modifier='o' />
	  </method>

    <method class_method='true' selector='dataFromPropertyList:format:errorDescription:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method class_method='true' selector='propertyList:isValidForFormat:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='propertyListFromData:mutabilityOption:format:errorDescription:'>
      <arg index='2' type_modifier='o' />
      <arg index='3' type_modifier='o' />
    </method>
  </class>
  <class name='NSProxy'>
    <method class_method='true' selector='respondsToSelector:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSRecursiveLock'>
    <method selector='lockBeforeDate:'>
      <retval type='B' />
    </method>
    <method selector='tryLock'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSRunLoop'>
    <method selector='cancelPerformSelector:target:argument:'>
      <arg index='0' sel_of_type='v@:@' />
    </method>
    <method selector='performSelector:target:argument:order:modes:'>
      <arg index='0' sel_of_type='v@:@' />
    </method>
    <method selector='runMode:beforeDate:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSScanner'>
    <method selector='caseSensitive'>
      <retval type='B' />
    </method>
    <method selector='isAtEnd'>
      <retval type='B' />
    </method>
    <method selector='scanCharactersFromSet:intoString:'>
      <retval type='B' />
      <arg index='1' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanDecimal:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' />
    </method>
    <method selector='scanDouble:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanFloat:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanHexDouble:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanHexFloat:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanHexInt:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanHexLongLong:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanInt:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanInteger:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanLongLong:'>
      <retval type='B' />
      <arg index='0' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanString:intoString:'>
      <retval type='B' />
      <arg index='1' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanUpToCharactersFromSet:intoString:'>
      <retval type='B' />
      <arg index='1' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='scanUpToString:intoString:'>
      <retval type='B' />
      <arg index='1' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='setCaseSensitive:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSScriptClassDescription'>
    <method selector='hasOrderedToManyRelationshipForKey:'>
      <retval type='B' />
    </method>
    <method selector='hasPropertyForKey:'>
      <retval type='B' />
    </method>
    <method selector='hasReadablePropertyForKey:'>
      <retval type='B' />
    </method>
    <method selector='hasWritablePropertyForKey:'>
      <retval type='B' />
    </method>
    <method selector='isLocationRequiredToCreateForKey:'>
      <retval type='B' />
    </method>
    <method selector='isReadOnlyKey:'>
      <retval type='B' />
    </method>
    <method selector='matchesAppleEventCode:'>
      <retval type='B' />
    </method>
    <method selector='supportsCommand:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSScriptCoercionHandler'>
    <method selector='registerCoercer:selector:toConvertFromClass:toClass:'>
      <arg index='1' sel_of_type='@@:@#' />
    </method>
  </class>
  <class name='NSScriptCommand'>
    <method selector='isWellFormed'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSScriptCommandDescription'>
    <method selector='isOptionalArgumentWithName:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSScriptObjectSpecifier'>
    <method selector='containerIsObjectBeingTested'>
      <retval type='B' />
    </method>
    <method selector='containerIsRangeContainerObject'>
      <retval type='B' />
    </method>
    <method selector='indicesOfObjectsByEvaluatingWithContainer:count:'>
      <retval c_array_length_in_arg='1' />
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='setContainerIsObjectBeingTested:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setContainerIsRangeContainerObject:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSScriptWhoseTest'>
    <method selector='isTrue'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSSet'>
	  <method selector='enumerateObjectsUsingBlock:'>
		  <arg index='0' block='true'>
			  <retval type='v' />
			  <arg type='@' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='enumerateObjectsWithOptions:usingBlock:'>
		  <arg index='1' block='true'>
			  <retval type='v' />
			  <arg type='@' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='objectsPassingTest:'>
		  <arg index='0' block='true'>
			  <retval type='B' />
			  <arg type='@' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
	  <method selector='objectsWithOptions:passingTest:'>
		  <arg index='1' block='true'>
			  <retval type='B' />
			  <arg type='@' />
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
    <method selector='containsObject:'>
      <retval type='B' />
    </method>
    <method c_array_delimited_by_null='true' selector='initWithObjects:' variadic='true'>
    </method>
    <method selector='initWithObjects:count:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
    </method>
    <method selector='initWithSet:copyItems:'>
      <arg index='1' type='B' />
    </method>
    <method selector='intersectsSet:'>
      <retval type='B' />
    </method>
    <method selector='isEqualToSet:'>
      <retval type='B' />
    </method>
    <method selector='isSubsetOfSet:'>
      <retval type='B' />
    </method>
    <method selector='makeObjectsPerformSelector:'>
      <arg index='0' sel_of_type='v@:' />
    </method>
    <method selector='makeObjectsPerformSelector:withObject:'>
      <arg index='0' sel_of_type='v@:@' />
    </method>
    <method c_array_delimited_by_null='true' class_method='true' selector='setWithObjects:' variadic='true'>
    </method>
    <method class_method='true' selector='setWithObjects:count:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
    </method>
  </class>
  <class name='NSSocketPortNameServer'>
    <method selector='registerPort:name:'>
      <retval type='B' />
    </method>
    <method selector='registerPort:name:nameServerPortNumber:'>
      <retval type='B' />
    </method>
    <method selector='removePortForName:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSSortDescriptor'>
	  <method class_method='true' selector='sortDescriptorWithKey:ascending:' >
		  <arg index='1' type='B' />
	  </method>
	  <method class_method='true' selector='sortDescriptorWithKey:ascending:selector:' >
		  <arg index='1' type='B' />
	  </method>
	  <method class_method='true' selector='sortDescriptorWithKey:ascending:comparator:' >
		  <arg index='1' type='B' />
		  <arg index='2' block='true' >
			  <retval type='i'/>
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
	  </method>
	  <method selector='initWithKey:ascending:comparator:' >
		  <arg index='1' type='B' />
		  <arg index='2' block='true' >
			  <retval type='i'/>
			  <arg type='@' />
			  <arg type='@' />
		  </arg>
	  </method>
	  <method selector='comparator' >
		  <retval block='true' >
			  <retval type='i'/>
			  <arg type='@' />
			  <arg type='@' />
		  </retval>
	  </method>
    <method selector='ascending'>
      <retval type='B' />
    </method>
    <method selector='initWithKey:ascending:'>
      <arg index='1' type='B' />
    </method>
    <method selector='initWithKey:ascending:selector:'>
      <arg index='1' type='B' />
      <arg index='2' sel_of_type='i@:@' />
    </method>
  </class>
  <class name='NSSpellServer'>
    <method selector='isWordInUserDictionaries:caseSensitive:'>
      <retval type='B' />
      <arg index='1' type='B' />
    </method>
    <method selector='registerLanguage:byVendor:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSStream'>
    <method class_method='true' selector='getStreamsToHost:port:inputStream:outputStream:'>
      <arg index='2' null_accepted='false' type_modifier='o' />
      <arg index='3' null_accepted='false' type_modifier='o' />
    </method>
    <method selector='setProperty:forKey:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSString'>
	  <method selector='enumerateSubstringsInRange:options:usingBlock:'>
	      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
	      <arg index='2' block='true' >
		      <retval type='v'/>
		      <arg type='@' />
	      	      <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
	      	      <arg type='{_NSRange=II}' type64='{_NSRange=QQ}' />
		      <arg type='^B' type_modifier='o' />
	      </arg>
          </method>
	  <method selector='enumerateLinesUsingBlock:'>
		  <arg index='0' block='true'>
			  <retval type='v'/>
			  <arg type='@'/>
			  <arg type='^B' type_modifier='o' />
		  </arg>
	  </method>
    <method selector='UTF8String'>
      <retval c_array_delimited_by_null='true' type='^t' type64='^t' />
    </method>
    <method selector='boolValue'>
      <retval type='B' />
    </method>
    <method selector='cStringUsingEncoding:'>
      <retval c_array_delimited_by_null='true' type='^v' />
    </method>
    <method selector='canBeConvertedToEncoding:'>
      <retval type='B' />
    </method>
    <method selector='characterAtIndex:'>
      <retval type='T' />
    </method>
    <method selector='compare:options:range:'>
      <arg index='2' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='compare:options:range:locale:'>
      <arg index='2' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:'>
      <arg index='0' type_modifier='o' />
      <arg index='1' type='B' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='dataUsingEncoding:allowLossyConversion:'>
      <arg index='1' type='B' />
    </method>
    <method selector='fileSystemRepresentation'>
      <retval c_array_delimited_by_null='true' type='^t' type64='^t' />
    </method>
    <method selector='availableStringEncodings'>
	    <retval c_array_delimited_by_null='true' />
    </method>
    <method selector='getBytes:maxLength:usedLength:encoding:options:range:remainingRange:'>
      <retval type='B' />
      <arg c_array_length_in_arg='1,2' index='0' type_modifier='o' />
      <arg index='2' type_modifier='o' />
      <arg index='5' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='6' type_modifier='o' />
    </method>
    <method selector='cString'>
	    <retval type='^t' c_array_delimited_by_null='true' />
    </method>
    <method selector='lossyCString'>
	    <retval type='^t' c_array_delimited_by_null='true' />
    </method>
    <method selector='getCString:' suggestion='use -cString' />
    <method selector='getCString:maxLength:' >
	    <retval type='B' />
	    <arg index='0' type='^v' type_modifier='o' c_array_length_in_arg='1' />
    </method>
    <method selector='getCString:maxLength:encoding:' >
	    <retval type='B' />
	    <arg index='0' type='^v' type_modifier='o' c_array_length_in_arg='1' />
    </method>
    <method selector='getCString:maxLength:range:remainingRange:' >
	    <retval type='B' />
	    <arg index='0' type='^v' type_modifier='o' c_array_length_in_arg='1' />
	    <arg index='3' type_modifier='o' />
    </method>
    <method selector='getCharacters:'>
      <retval type='v' />
      <arg c_array_of_variable_length='true' index='0' type='^T' type_modifier='o' />
    </method>
    <method selector='getCharacters:range:'>
      <retval type='v' />
      <arg c_array_length_in_arg='1' index='0' type='^T' type_modifier='o' />
      <arg index='1' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='getFileSystemRepresentation:maxLength:' >
	    <retval type='B' />
	    <arg index='0' c_array_length_in_arg='1' type_modifier='o' type='^t' />
    </method>
    <method selector='getLineStart:end:contentsEnd:forRange:'>
      <retval type='v' />
      <arg index='0' type_modifier='o' />
      <arg index='1' type_modifier='o' />
      <arg index='2' type_modifier='o' />
      <arg index='3' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='getParagraphStart:end:contentsEnd:forRange:'>
      <retval type='v' />
      <arg index='0' type_modifier='o' />
      <arg index='1' type_modifier='o' />
      <arg index='2' type_modifier='o' />
      <arg index='3' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='hasPrefix:'>
      <retval type='B' />
    </method>
    <method selector='hasSuffix:'>
      <retval type='B' />
    </method>
    <method selector='initWithBytes:length:encoding:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
    </method>
    <method selector='initWithBytesNoCopy:length:encoding:freeWhenDone:'>
      <arg c_array_length_in_arg='1' index='0' type_modifier='n' />
      <arg index='3' type='B' />
    </method>
    <method selector='initWithCString:'>
      <arg c_array_delimited_by_null='true' index='0' type='^v' type_modifier='n' />
    </method>
    <method selector='initWithCString:encoding:'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type_modifier='n' />
    </method>
    <method selector='initWithCString:length:'>
      <arg c_array_length_in_arg='1' index='0' type='^v' type_modifier='n' />
    </method>
    <method selector='initWithCStringNoCopy:length:freeWhenDone:'>
      <arg c_array_length_in_arg='1' index='0' type='^v' type_modifier='n' />
      <arg index='2' type='B' />
    </method>
    <method selector='initWithCharacters:length:'>
      <arg index='0' type='^T' type_modifier='n' c_array_length_in_arg='1'  />
    </method>
    <method selector='initWithCharactersNoCopy:length:freeWhenDone:'>
      <retval type='@' />
      <arg index='0' type='^T' type_modifier='n' c_array_length_in_arg='1' />
      <arg index='2' type='B' />
    </method>
    <method selector='initWithContentsOfFile:encoding:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='initWithContentsOfFile:usedEncoding:error:'>
      <arg index='1' type_modifier='o' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='initWithContentsOfURL:'>
      <arg index='0' type='@' />
    </method>
    <method selector='initWithContentsOfURL:encoding:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='initWithContentsOfURL:usedEncoding:error:'>
      <arg index='1' type_modifier='o' />
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='initWithFormat:' variadic='true'>
      <arg index='0' printf_format='true' type='@' />
    </method>
    <method selector='initWithFormat:arguments:' suggestion='use -initWithFormat:' />
    <method selector='initWithFormat:locale:' variadic='true'>
      <arg index='0' printf_format='true' type='@' />
    </method>
    <method selector='initWithFormat:locale:arguments:' suggestion='use -initWithFormat:locale:' />
    <method selector='initWithUTF8String:'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type_modifier='n' />
    </method>
    <method selector='isAbsolutePath'>
      <retval type='B' />
    </method>
    <method selector='isEqualToString:'>
      <retval type='B' />
    </method>
    <method selector='lineRangeForRange:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method class_method='true' selector='localizedStringWithFormat:' variadic='true'>
      <arg index='0' printf_format='true' type='@' />
    </method>
    <method selector='paragraphRangeForRange:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfCharacterFromSet:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfCharacterFromSet:options:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfCharacterFromSet:options:range:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='2' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfComposedCharacterSequenceAtIndex:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfComposedCharacterSequencesForRange:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfString:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfString:options:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfString:options:range:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='2' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rangeOfString:options:range:locale:'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
      <arg index='2' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='stringByAppendingFormat:' variadic='true'>
      <arg index='0' printf_format='true' type='@' />
    </method>
    <method selector='stringByReplacingCharactersInRange:withString:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='stringByReplacingOccurrencesOfString:withString:options:range:'>
      <arg index='3' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method class_method='true' selector='stringWithCString:'>
      <arg c_array_delimited_by_null='true' index='0' type='^v' type_modifier='n' />
    </method>
    <method class_method='true' selector='stringWithCString:encoding:'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type_modifier='n' />
    </method>
    <method class_method='true' selector='stringWithCString:length:'>
      <arg c_array_length_in_arg='1' index='0' type='^v' type_modifier='n' />
    </method>
    <method class_method='true' selector='stringWithCharacters:length:'>
      <arg c_array_length_in_arg='1' index='0' type='r^T' type_modifier='n' />
    </method>
    <method class_method='true' selector='stringWithContentsOfFile:encoding:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method class_method='true' selector='stringWithContentsOfFile:usedEncoding:error:'>
      <arg index='1' type_modifier='o' />
      <arg index='2' type_modifier='o' />
    </method>
    <method class_method='true' selector='stringWithContentsOfURL:encoding:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method class_method='true' selector='stringWithContentsOfURL:usedEncoding:error:'>
      <arg index='1' type_modifier='o' />
      <arg index='2' type_modifier='o' />
    </method>
    <method class_method='true' selector='stringWithFormat:' variadic='true'>
      <arg index='0' type='@' printf_format='true' />
    </method>
    <method class_method='true' selector='stringWithUTF8String:'>
      <arg c_array_delimited_by_null='true' index='0' type='^t' type_modifier='n' />
    </method>
    <method selector='substringWithRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='writeToFile:atomically:'>
      <retval type='B' />
      <arg index='1' type='B' />
    </method>
    <method selector='writeToFile:atomically:encoding:error:'>
      <retval type='B' />
      <arg index='1' type='B' />
      <arg index='3' type_modifier='o' />
    </method>
    <method selector='writeToURL:atomically:'>
      <retval type='B' />
      <arg index='1' type='B' />
    </method>
    <method selector='writeToURL:atomically:encoding:error:'>
      <retval type='B' />
      <arg index='1' type='B' />
      <arg index='3' type_modifier='o' />
    </method>
  </class>
  <class name='NSTask'>
    <method selector='isRunning'>
      <retval type='B' />
    </method>
    <method selector='resume'>
      <retval type='B' />
    </method>
    <method selector='suspend'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSThread'>
    <method class_method='true' selector='detachNewThreadSelector:toTarget:withObject:'>
      <arg index='0' sel_of_type='v@:@' />
    </method>
    <method selector='initWithTarget:selector:object:'>
      <arg index='1' sel_of_type='v@:@' />
    </method>
    <method selector='isCancelled'>
      <retval type='B' />
    </method>
    <method selector='isExecuting'>
      <retval type='B' />
    </method>
    <method selector='isFinished'>
      <retval type='B' />
    </method>
    <method selector='isMainThread'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='isMainThread'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='isMultiThreaded'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='setThreadPriority:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSTimeZone'>
    <method selector='isEqualToTimeZone:'>
      <retval type='B' />
    </method>
    <method selector='isDaylightSavingTimeForDate:'>
      <retval type='B' />
    </method>
    <method selector='isDaylightSavingTime'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSTimer'>
    <method selector='initWithFireDate:interval:target:selector:userInfo:repeats:'>
      <arg index='3' sel_of_type='v@:@' />
      <arg index='5' type='B' />
    </method>
    <method selector='isValid'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='scheduledTimerWithTimeInterval:invocation:repeats:'>
      <arg index='2' type='B' />
    </method>
    <method class_method='true' selector='scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:'>
      <arg index='2' sel_of_type='v@:@' />
      <arg index='4' type='B' />
    </method>
    <method class_method='true' selector='timerWithTimeInterval:invocation:repeats:'>
      <arg index='2' type='B' />
    </method>
    <method class_method='true' selector='timerWithTimeInterval:target:selector:userInfo:repeats:'>
      <arg index='2' sel_of_type='v@:@' />
      <arg index='4' type='B' />
    </method>
  </class>
  <class name='NSURL'>
	  <method selector='resourceValuesForKeys:error:'>
		  <arg index='1' type_modifier='o' />
	  </method>
    <method selector='getResourceValue:forKey:error:'>
	    <retval type='B' />
	    <arg index='0' type_modifier='o' />
	    <arg index='2' type_modifier='o' />
    </method>
    <method selector='setResourceValue:forKey:error:'>
	    <retval type='B' />
	    <arg index='2' type_modifier='o' />
    </method>
    <method selector='setResourceValues:error:'>
	    <retval type='B' />
	    <arg index='1' type_modifier='o' />
    </method>
    <method selector='checkResourceIsReachableAndReturnError:'>
	    <retval type='B' />
	    <arg index='0' type_modifier='o' />
    </method>
    <method selector='isFileReferenceURL'>
	    <retval type='B' />
    </method>
    <method selector='bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:'>
	    <arg index='3' type_modifier='o' />
    </method>
    <method selector='initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:'>
	    <arg index='3' type='^B' type_modifier='o' />
	    <arg index='4' type_modifier='o' />
    </method>
    <method class_method='true' selector='URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:'>
	    <arg index='3' type='^B' type_modifier='o' />
	    <arg index='4' type_modifier='o' />
    </method>
    <method class_method='true' selector='writeBookmarkData:toURL:options:error:'>
	    <retval type='B' />
	    <arg index='3' type_modifier='o' />
    </method>
    <method class_method='true' selector='bookmarkDataWithContentsOfURL:error:'>
	    <arg index='1' type_modifier='o' />
    </method>
    <method selector='URLHandleUsingCache:'>
      <arg index='0' type='B' />
    </method>
    <method class_method='true' selector='fileURLWithPath:isDirectory:'>
      <arg index='1' type='B' />
    </method>
    <method selector='initFileURLWithPath:isDirectory:'>
      <arg index='1' type='B' />
    </method>
    <method selector='isFileURL'>
      <retval type='B' />
    </method>
    <method selector='loadResourceDataNotifyingClient:usingCache:'>
      <arg index='1' type='B' />
    </method>
    <method selector='resourceDataUsingCache:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setProperty:forKey:'>
      <retval type='B' />
    </method>
    <method selector='setResourceData:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSURLConnection'>
    <method class_method='true' selector='canHandleRequest:'>
      <retval type='B' />
    </method>
    <method selector='initWithRequest:delegate:startImmediately:'>
      <arg index='2' type='B' />
    </method>
    <method class_method='true' selector='sendSynchronousRequest:returningResponse:error:'>
      <arg index='1' type_modifier='o' />
      <arg index='2' type_modifier='o' />
    </method>
  </class>
  <class name='NSURLCredential'>
    <method selector='hasPassword'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSURLDownload'>
    <method class_method='true' selector='canResumeDownloadDecodedWithEncodingMIMEType:'>
      <retval type='B' />
    </method>
    <method selector='deletesFileUponFailure'>
      <retval type='B' />
    </method>
    <method selector='setDeletesFileUponFailure:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setDestination:allowOverwrite:'>
      <arg index='1' type='B' />
    </method>
  </class>
  <class name='NSURLHandle'>
    <method class_method='true' selector='canInitWithURL:'>
      <retval type='B' />
    </method>
    <method selector='didLoadBytes:loadComplete:'>
      <arg index='1' type='B' />
    </method>
    <method selector='initWithURL:cached:'>
      <arg index='1' type='B' />
    </method>
    <method selector='writeData:'>
      <retval type='B' />
    </method>
    <method selector='writeProperty:forKey:'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSURLProtectionSpace'>
    <method selector='isProxy'>
      <retval type='B' />
    </method>
    <method selector='receivesCredentialSecurely'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSURLProtocol'>
    <method class_method='true' selector='canInitWithRequest:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='registerClass:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='requestIsCacheEquivalent:toRequest:'>
      <retval type='B' />
    </method>
    <method class_method='true' selector='setProperty:forKey:inRequest:'>
    </method>
  </class>
  <class name='NSURLRequest'>
    <method selector='HTTPShouldHandleCookies'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSUnarchiver'>
    <method selector='isAtEnd'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSUndoManager'>
    <method selector='canRedo'>
      <retval type='B' />
    </method>
    <method selector='canUndo'>
      <retval type='B' />
    </method>
    <method selector='groupsByEvent'>
      <retval type='B' />
    </method>
    <method selector='isRedoing'>
      <retval type='B' />
    </method>
    <method selector='isUndoRegistrationEnabled'>
      <retval type='B' />
    </method>
    <method selector='isUndoing'>
      <retval type='B' />
    </method>
    <method selector='redoMenuTitleForUndoActionName:'>
      <arg index='0' type='@' />
    </method>
    <method selector='registerUndoWithTarget:selector:object:'>
      <arg index='1' sel_of_type='v@:@' />
    </method>
  </class>
  <class name='NSUserDefaults'>
  <method selector='synchronize'>
	  <retval type='B'/>
  </method>
  <method selector='objectIsForcedForKey:'>
	  <retval type='B'/>
  </method>
    <method selector='boolForKey:'>
      <retval type='B' />
    </method>
    <method selector='objectIsForcedForKey:inDomain:'>
      <retval type='B' />
    </method>
    <method selector='setBool:forKey:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSValue'>
    <method selector='getValue:' suggestion='use another method' />
    <method selector='initWithBytes:objCType:'>
      <arg c_array_of_variable_length='true' index='0' type_modifier='n' />
      <arg c_array_delimited_by_null='true' index='1' type='^t' type_modifier='n' />
    </method>
    <method selector='isEqualToValue:'>
      <retval type='B' />
    </method>
    <method selector='objCType'>
      <retval c_array_delimited_by_null='true' type='^t' />
    </method>
    <method selector='pointValue'>
      <retval type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    </method>
    <method selector='rangeValue'>
      <retval type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method selector='rectValue'>
      <retval type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    </method>
    <method selector='sizeValue'>
      <retval type='{_NSSize=ff}' type64='{CGSize=dd}' />
    </method>
    <method class_method='true' selector='value:withObjCType:'>
      <arg index='0' type='^v' type_modifier='n' c_array_of_variable_length='true' />
      <arg c_array_delimited_by_null='true' index='1' type='^t' type_modifier='n' />
    </method>
    <method class_method='true' selector='valueWithBytes:objCType:'>
      <arg index='0' type='^v' type_modifier='n' c_array_of_variable_length='true' />
      <arg c_array_delimited_by_null='true' index='1' type='^t' type_modifier='n' />
    </method>
    <method class_method='true' selector='valueWithPoint:'>
      <arg index='0' type='{_NSPoint=ff}' type64='{CGPoint=dd}' />
    </method>
    <method class_method='true' selector='valueWithPointer:' suggestion='use some other method' />
    <method class_method='true' selector='valueWithRange:'>
      <arg index='0' type='{_NSRange=II}' type64='{_NSRange=QQ}' />
    </method>
    <method class_method='true' selector='valueWithRect:'>
      <arg index='0' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' />
    </method>
    <method class_method='true' selector='valueWithSize:'>
      <arg index='0' type='{_NSSize=ff}' type64='{CGSize=dd}' />
    </method>
  </class>
  <class name='NSValueTransformer'>
    <method class_method='true' selector='allowsReverseTransformation'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSXMLDTD'>
    <method selector='initWithContentsOfURL:options:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='initWithData:options:error:'>
      <arg index='2' type_modifier='o' />
    </method>
  </class>
  <class name='NSXMLDTDNode'>
    <method selector='isExternal'>
      <retval type='B' />
    </method>
  </class>
  <class name='NSXMLDocument'>
    <method selector='initWithContentsOfURL:options:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='initWithData:options:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='initWithXMLString:options:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='isStandalone'>
      <retval type='B' />
    </method>
    <method selector='objectByApplyingXSLT:arguments:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='objectByApplyingXSLTAtURL:arguments:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='objectByApplyingXSLTString:arguments:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='setStandalone:'>
      <arg index='0' type='B' />
    </method>
    <method selector='validateAndReturnError:'>
      <retval type='B' />
      		<arg index='0' type_modifier='o' />
    </method>
  </class>
  <class name='NSXMLElement'>
    <method selector='initWithXMLString:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='normalizeAdjacentTextNodesPreservingCDATA:'>
      <arg index='0' type='B' />
    </method>
  </class>
  <class name='NSXMLNode'>
    <method selector='canonicalXMLStringPreservingComments:'>
      <arg index='0' type='B' />
    </method>
    <method selector='objectsForXQuery:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='objectsForXQuery:error:'>
      <arg index='1' type_modifier='o' />
    </method>
    <method selector='objectsForXQuery:constants:error:'>
      <arg index='2' type_modifier='o' />
    </method>
    <method selector='setStringValue:resolvingEntities:'>
      <arg index='1' type='B' />
    </method>
    <method selector='nodesForXPath:error:'>
	    <arg index='1' type_modifier='o' />
    </method>
  </class>
  <class name='NSXMLParser'>
    <method selector='parse'>
      <retval type='B' />
    </method>
    <method selector='setShouldProcessNamespaces:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setShouldReportNamespacePrefixes:'>
      <arg index='0' type='B' />
    </method>
    <method selector='setShouldResolveExternalEntities:'>
      <arg index='0' type='B' />
    </method>
    <method selector='shouldProcessNamespaces'>
      <retval type='B' />
    </method>
    <method selector='shouldReportNamespacePrefixes'>
      <retval type='B' />
    </method>
    <method selector='shouldResolveExternalEntities'>
      <retval type='B' />
    </method>
  </class>
</signatures>
