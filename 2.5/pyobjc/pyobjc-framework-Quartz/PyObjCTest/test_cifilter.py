
from PyObjCTools.TestSupport import *
from Quartz.QuartzCore import *

class TestCIFilter (TestCase):
    def testConstants(self):
        self.failUnlessIsInstance(kCIAttributeFilterName, unicode)
        self.failUnlessIsInstance(kCIAttributeFilterDisplayName, unicode)
        self.failUnlessIsInstance(kCIAttributeFilterCategories, unicode)
        self.failUnlessIsInstance(kCIAttributeClass, unicode)
        self.failUnlessIsInstance(kCIAttributeType, unicode)
        self.failUnlessIsInstance(kCIAttributeMin, unicode)
        self.failUnlessIsInstance(kCIAttributeMax, unicode)
        self.failUnlessIsInstance(kCIAttributeSliderMin, unicode)
        self.failUnlessIsInstance(kCIAttributeSliderMax, unicode)
        self.failUnlessIsInstance(kCIAttributeDefault, unicode)
        self.failUnlessIsInstance(kCIAttributeIdentity, unicode)
        self.failUnlessIsInstance(kCIAttributeName, unicode)
        self.failUnlessIsInstance(kCIAttributeDisplayName, unicode)
        self.failUnlessIsInstance(kCIAttributeTypeTime, unicode)
        self.failUnlessIsInstance(kCIAttributeTypeScalar, unicode)
        self.failUnlessIsInstance(kCIAttributeTypeDistance, unicode)
        self.failUnlessIsInstance(kCIAttributeTypeAngle, unicode)
        self.failUnlessIsInstance(kCIAttributeTypeBoolean, unicode)
        self.failUnlessIsInstance(kCIAttributeTypePosition, unicode)
        self.failUnlessIsInstance(kCIAttributeTypeOffset, unicode)
        self.failUnlessIsInstance(kCIAttributeTypePosition3, unicode)
        self.failUnlessIsInstance(kCIAttributeTypeRectangle, unicode)
        self.failUnlessIsInstance(kCIAttributeTypeOpaqueColor, unicode)
        self.failUnlessIsInstance(kCIAttributeTypeGradient, unicode)
        self.failUnlessIsInstance(kCICategoryDistortionEffect, unicode)
        self.failUnlessIsInstance(kCICategoryGeometryAdjustment, unicode)
        self.failUnlessIsInstance(kCICategoryCompositeOperation, unicode)
        self.failUnlessIsInstance(kCICategoryHalftoneEffect, unicode)
        self.failUnlessIsInstance(kCICategoryColorAdjustment, unicode)
        self.failUnlessIsInstance(kCICategoryColorEffect, unicode)
        self.failUnlessIsInstance(kCICategoryTransition, unicode)
        self.failUnlessIsInstance(kCICategoryTileEffect, unicode)
        self.failUnlessIsInstance(kCICategoryGenerator, unicode)
        self.failUnlessIsInstance(kCICategoryReduction, unicode)
        self.failUnlessIsInstance(kCICategoryGradient, unicode)
        self.failUnlessIsInstance(kCICategoryStylize, unicode)
        self.failUnlessIsInstance(kCICategorySharpen, unicode)
        self.failUnlessIsInstance(kCICategoryBlur, unicode)
        self.failUnlessIsInstance(kCICategoryVideo, unicode)
        self.failUnlessIsInstance(kCICategoryStillImage, unicode)
        self.failUnlessIsInstance(kCICategoryInterlaced, unicode)
        self.failUnlessIsInstance(kCICategoryNonSquarePixels, unicode)
        self.failUnlessIsInstance(kCICategoryHighDynamicRange, unicode)
        self.failUnlessIsInstance(kCICategoryBuiltIn, unicode)
        self.failUnlessIsInstance(kCIApplyOptionExtent, unicode)
        self.failUnlessIsInstance(kCIApplyOptionDefinition, unicode)
        self.failUnlessIsInstance(kCIApplyOptionUserInfo, unicode)






        @min_os_level('10.5')
        def testConstants10_5(self):
            
            self.failUnlessIsInstance(kCIAttributeDescription, unicode)
            self.failUnlessIsInstance(kCIAttributeReferenceDocumentation, unicode)
            self.failUnlessIsInstance(kCIUIParameterSet, unicode)
            self.failUnlessIsInstance(kCIUISetBasic, unicode)
            self.failUnlessIsInstance(kCIUISetIntermediate, unicode)
            self.failUnlessIsInstance(kCIUISetAdvanced, unicode)
            self.failUnlessIsInstance(kCIUISetDevelopment, unicode)
            self.failUnlessIsInstance(kCIAttributeTypeInteger, unicode)
            self.failUnlessIsInstance(kCIAttributeTypeCount, unicode)
            self.failUnlessIsInstance(kCICategoryFilterGenerator, unicode)
            self.failUnlessIsInstance(kCIOutputImageKey, unicode)
            self.failUnlessIsInstance(kCIInputBackgroundImageKey, unicode)
            self.failUnlessIsInstance(kCIInputImageKey, unicode)
            self.failUnlessIsInstance(kCIInputTimeKey, unicode)
            self.failUnlessIsInstance(kCIInputTransformKey, unicode)
            self.failUnlessIsInstance(kCIInputScaleKey, unicode)
            self.failUnlessIsInstance(kCIInputAspectRatioKey, unicode)
            self.failUnlessIsInstance(kCIInputCenterKey, unicode)
            self.failUnlessIsInstance(kCIInputRadiusKey, unicode)
            self.failUnlessIsInstance(kCIInputAngleKey, unicode)
            self.failUnlessIsInstance(kCIInputRefractionKey, unicode)
            self.failUnlessIsInstance(kCIInputWidthKey, unicode)
            self.failUnlessIsInstance(kCIInputSharpnessKey, unicode)
            self.failUnlessIsInstance(kCIInputIntensityKey, unicode)
            self.failUnlessIsInstance(kCIInputEVKey, unicode)
            self.failUnlessIsInstance(kCIInputSaturationKey, unicode)
            self.failUnlessIsInstance(kCIInputColorKey, unicode)
            self.failUnlessIsInstance(kCIInputBrightnessKey, unicode)
            self.failUnlessIsInstance(kCIInputContrastKey, unicode)
            self.failUnlessIsInstance(kCIInputGradientImageKey, unicode)
            self.failUnlessIsInstance(kCIInputMaskImageKey, unicode)
            self.failUnlessIsInstance(kCIInputShadingImageKey, unicode)
            self.failUnlessIsInstance(kCIInputTargetImageKey, unicode)
            self.failUnlessIsInstance(kCIInputExtentKey, unicode)

    def testMethods(self):
        self.failUnlessIsNullTerminated(CIFilter.apply_)
        self.failUnlessIsNullTerminated(CIFilter.filterWithName_keysAndValues_)


if __name__ == "__main__":
    main()
