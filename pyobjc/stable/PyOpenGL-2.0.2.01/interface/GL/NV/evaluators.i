/*
# AUTOGENERATED DO NOT EDIT

# If you edit this file, delete the AUTOGENERATED line to prevent re-generation
# BUILD api_versions [0x001]
*/

%module evaluators

#define __version__ "$Revision: 1.1.2.1 $"
#define __date__ "$Date: 2004/11/15 07:38:07 $"
#define __api_version__ API_VERSION
#define __author__ "PyOpenGL Developers <pyopengl-devel@lists.sourceforge.net>"
#define __doc__ ""

%{
/**
 *
 * GL.NV.evaluators Module for PyOpenGL
 * 
 * Authors: PyOpenGL Developers <pyopengl-devel@lists.sourceforge.net>
 * 
***/
%}

%include util.inc
%include gl_exception_handler.inc

%{
#ifdef CGL_PLATFORM
# include <OpenGL/glext.h>
#else
# include <GL/glext.h>
#endif

#if !EXT_DEFINES_PROTO || !defined(GL_NV_evaluators)
DECLARE_VOID_EXT(glMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points), (target, index, type, ustride, vstride, uorder, vorder, packed, points))
DECLARE_VOID_EXT(glMapParameterivNV, (GLenum target, GLenum pname, const GLint *params), (target, pname, params))
DECLARE_VOID_EXT(glMapParameterfvNV, (GLenum target, GLenum pname, const GLfloat *params), (target, pname, params))
DECLARE_VOID_EXT(glGetMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points), (target, index, type, ustride, vstride, packed, points))
DECLARE_VOID_EXT(glGetMapParameterivNV, (GLenum target, GLenum pname, GLint *params), (target, pname, params))
DECLARE_VOID_EXT(glGetMapParameterfvNV, (GLenum target, GLenum pname, GLfloat *params), (target, pname, params))
DECLARE_VOID_EXT(glGetMapAttribParameterivNV, (GLenum target, GLuint index, GLenum pname, GLint *params), (target, index, pname, params))
DECLARE_VOID_EXT(glGetMapAttribParameterfvNV, (GLenum target, GLuint index, GLenum pname, GLfloat *params), (target, index, pname, params))
DECLARE_VOID_EXT(glEvalMapsNV, (GLenum target, GLenum mode), (target, mode))
#endif
%}

/* FUNCTION DECLARATIONS */
void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
DOC(glMapControlPointsNV, "glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points)")
void glMapParameterivNV(GLenum target, GLenum pname, const GLint *params);
DOC(glMapParameterivNV, "glMapParameterivNV(target, pname, params)")
void glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params);
DOC(glMapParameterfvNV, "glMapParameterfvNV(target, pname, params)")
void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
DOC(glGetMapControlPointsNV, "glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points)")
void glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params);
DOC(glGetMapParameterivNV, "glGetMapParameterivNV(target, pname, params)")
void glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params);
DOC(glGetMapParameterfvNV, "glGetMapParameterfvNV(target, pname, params)")
void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params);
DOC(glGetMapAttribParameterivNV, "glGetMapAttribParameterivNV(target, index, pname, params)")
void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params);
DOC(glGetMapAttribParameterfvNV, "glGetMapAttribParameterfvNV(target, index, pname, params)")
void glEvalMapsNV(GLenum target, GLenum mode);
DOC(glEvalMapsNV, "glEvalMapsNV(target, mode)")

/* CONSTANT DECLARATIONS */
#define                  GL_EVAL_2D_NV 0x86C0
#define       GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#define         GL_MAP_TESSELLATION_NV 0x86C2
#define       GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#define       GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#define      GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#define      GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#define      GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#define      GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#define      GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#define      GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#define      GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#define      GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#define      GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#define      GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#define     GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#define     GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#define     GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#define     GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#define     GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#define     GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#define     GL_MAX_MAP_TESSELLATION_NV 0x86D6
#define  GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7


%{
static char *proc_names[] =
{
#if !EXT_DEFINES_PROTO || !defined(GL_NV_evaluators)
"glMapControlPointsNV",
"glMapParameterivNV",
"glMapParameterfvNV",
"glGetMapControlPointsNV",
"glGetMapParameterivNV",
"glGetMapParameterfvNV",
"glGetMapAttribParameterivNV",
"glGetMapAttribParameterfvNV",
"glEvalMapsNV",
#endif
	NULL
};

#define glInitEvaluatorsNV() InitExtension("GL_NV_evaluators", proc_names)
%}

int glInitEvaluatorsNV();
DOC(glInitEvaluatorsNV, "glInitEvaluatorsNV() -> bool")

%{
PyObject *__info()
{
	if (glInitEvaluatorsNV())
	{
		PyObject *info = PyList_New(0);
		return info;
	}
	
	Py_INCREF(Py_None);
	return Py_None;
}
%}

PyObject *__info();

