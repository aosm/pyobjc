/*
# AUTOGENERATED DO NOT EDIT

# If you edit this file, delete the AUTOGENERATED line to prevent re-generation
# BUILD api_versions [0x001]
*/

%module occlusion_query

#define __version__ "$Revision: 1.1.2.1 $"
#define __date__ "$Date: 2004/11/15 07:38:07 $"
#define __api_version__ API_VERSION
#define __author__ "PyOpenGL Developers <pyopengl-devel@lists.sourceforge.net>"
#define __doc__ ""

%{
/**
 *
 * GL.ARB.occlusion_query Module for PyOpenGL
 * 
 * Authors: PyOpenGL Developers <pyopengl-devel@lists.sourceforge.net>
 * 
***/
%}

%include util.inc
%include gl_exception_handler.inc

%{
#ifdef CGL_PLATFORM
# include <OpenGL/glext.h>
#else
# include <GL/glext.h>
#endif

#if !EXT_DEFINES_PROTO || !defined(GL_ARB_occlusion_query)
DECLARE_VOID_EXT(glGenQueriesARB, (GLsizei n, GLuint *ids), (n, ids))
DECLARE_VOID_EXT(glDeleteQueriesARB, (GLsizei n, const GLuint *ids), (n, ids))
DECLARE_EXT(glIsQueryARB, GLboolean, 0, (GLuint id), (id))
DECLARE_VOID_EXT(glBeginQueryARB, (GLenum target, GLuint id), (target, id))
DECLARE_VOID_EXT(glEndQueryARB, (GLenum target), (target))
DECLARE_VOID_EXT(glGetQueryivARB, (GLenum target, GLenum pname, GLint *params), (target, pname, params))
DECLARE_VOID_EXT(glGetQueryObjectivARB, (GLuint id, GLenum pname, GLint *params), (id, pname, params))
DECLARE_VOID_EXT(glGetQueryObjectuivARB, (GLuint id, GLenum pname, GLuint *params), (id, pname, params))
#endif
%}

/* FUNCTION DECLARATIONS */
void glGenQueriesARB(GLsizei n, GLuint *ids);
DOC(glGenQueriesARB, "glGenQueriesARB(n, ids)")
void glDeleteQueriesARB(GLsizei n, const GLuint *ids);
DOC(glDeleteQueriesARB, "glDeleteQueriesARB(n, ids)")
GLboolean glIsQueryARB(GLuint id);
DOC(glIsQueryARB, "glIsQueryARB(id)")
void glBeginQueryARB(GLenum target, GLuint id);
DOC(glBeginQueryARB, "glBeginQueryARB(target, id)")
void glEndQueryARB(GLenum target);
DOC(glEndQueryARB, "glEndQueryARB(target)")
void glGetQueryivARB(GLenum target, GLenum pname, GLint *params);
DOC(glGetQueryivARB, "glGetQueryivARB(target, pname, params)")
void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params);
DOC(glGetQueryObjectivARB, "glGetQueryObjectivARB(id, pname, params)")
void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params);
DOC(glGetQueryObjectuivARB, "glGetQueryObjectuivARB(id, pname, params)")

/* CONSTANT DECLARATIONS */
#define      GL_QUERY_COUNTER_BITS_ARB 0x8864
#define           GL_CURRENT_QUERY_ARB 0x8865
#define            GL_QUERY_RESULT_ARB 0x8866
#define  GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define          GL_SAMPLES_PASSED_ARB 0x8914


%{
static char *proc_names[] =
{
#if !EXT_DEFINES_PROTO || !defined(GL_ARB_occlusion_query)
"glGenQueriesARB",
"glDeleteQueriesARB",
"glIsQueryARB",
"glBeginQueryARB",
"glEndQueryARB",
"glGetQueryivARB",
"glGetQueryObjectivARB",
"glGetQueryObjectuivARB",
#endif
	NULL
};

#define glInitOcclusionQueryARB() InitExtension("GL_ARB_occlusion_query", proc_names)
%}

int glInitOcclusionQueryARB();
DOC(glInitOcclusionQueryARB, "glInitOcclusionQueryARB() -> bool")

%{
PyObject *__info()
{
	if (glInitOcclusionQueryARB())
	{
		PyObject *info = PyList_New(0);
		return info;
	}
	
	Py_INCREF(Py_None);
	return Py_None;
}
%}

PyObject *__info();

