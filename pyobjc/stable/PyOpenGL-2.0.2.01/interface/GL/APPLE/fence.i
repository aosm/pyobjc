/*
# AUTOGENERATED DO NOT EDIT

# If you edit this file, delete the AUTOGENERATED line to prevent re-generation
# BUILD api_versions [0x001]
*/

%module fence

#define __version__ "$Revision: 1.1.2.1 $"
#define __date__ "$Date: 2004/11/15 07:38:07 $"
#define __api_version__ API_VERSION
#define __author__ "PyOpenGL Developers <pyopengl-devel@lists.sourceforge.net>"
#define __doc__ ""

%{
/**
 *
 * GL.APPLE.fence Module for PyOpenGL
 * 
 * Authors: PyOpenGL Developers <pyopengl-devel@lists.sourceforge.net>
 * 
***/
%}

%include util.inc
%include gl_exception_handler.inc

%{
#ifdef CGL_PLATFORM
# include <OpenGL/glext.h>
#else
# include <GL/glext.h>
#endif

#if !EXT_DEFINES_PROTO || !defined(GL_APPLE_fence)
DECLARE_VOID_EXT(glGenFencesAPPLE, (GLsizei n, GLuint *fences), (n, fences))
DECLARE_VOID_EXT(glDeleteFencesAPPLE, (GLsizei n, const GLuint *fences), (n, fences))
DECLARE_VOID_EXT(glSetFenceAPPLE, (GLuint fence), (fence))
DECLARE_EXT(glIsFenceAPPLE, GLboolean, 0, (GLuint fence), (fence))
DECLARE_EXT(glTestFenceAPPLE, GLboolean, 0, (GLuint fence), (fence))
DECLARE_VOID_EXT(glFinishFenceAPPLE, (GLuint fence), (fence))
DECLARE_EXT(glTestObjectAPPLE, GLboolean, 0, (GLenum object, GLuint name), (object, name))
DECLARE_VOID_EXT(glFinishObjectAPPLE, (GLenum object, GLint name), (object, name))
#endif
%}

/* FUNCTION DECLARATIONS */
void glGenFencesAPPLE(GLsizei n, GLuint *fences);
DOC(glGenFencesAPPLE, "glGenFencesAPPLE(n, fences)")
void glDeleteFencesAPPLE(GLsizei n, const GLuint *fences);
DOC(glDeleteFencesAPPLE, "glDeleteFencesAPPLE(n, fences)")
void glSetFenceAPPLE(GLuint fence);
DOC(glSetFenceAPPLE, "glSetFenceAPPLE(fence)")
GLboolean glIsFenceAPPLE(GLuint fence);
DOC(glIsFenceAPPLE, "glIsFenceAPPLE(fence)")
GLboolean glTestFenceAPPLE(GLuint fence);
DOC(glTestFenceAPPLE, "glTestFenceAPPLE(fence)")
void glFinishFenceAPPLE(GLuint fence);
DOC(glFinishFenceAPPLE, "glFinishFenceAPPLE(fence)")
GLboolean glTestObjectAPPLE(GLenum object, GLuint name);
DOC(glTestObjectAPPLE, "glTestObjectAPPLE(object, name)")
void glFinishObjectAPPLE(GLenum object, GLint name);
DOC(glFinishObjectAPPLE, "glFinishObjectAPPLE(object, name)")

/* CONSTANT DECLARATIONS */
#define           GL_DRAW_PIXELS_APPLE 0x8A0A
#define                 GL_FENCE_APPLE 0x8A0B


%{
static char *proc_names[] =
{
#if !EXT_DEFINES_PROTO || !defined(GL_APPLE_fence)
"glGenFencesAPPLE",
"glDeleteFencesAPPLE",
"glSetFenceAPPLE",
"glIsFenceAPPLE",
"glTestFenceAPPLE",
"glFinishFenceAPPLE",
"glTestObjectAPPLE",
"glFinishObjectAPPLE",
#endif
	NULL
};

#define glInitFenceAPPLE() InitExtension("GL_APPLE_fence", proc_names)
%}

int glInitFenceAPPLE();
DOC(glInitFenceAPPLE, "glInitFenceAPPLE() -> bool")

%{
PyObject *__info()
{
	if (glInitFenceAPPLE())
	{
		PyObject *info = PyList_New(0);
		return info;
	}
	
	Py_INCREF(Py_None);
	return Py_None;
}
%}

PyObject *__info();

