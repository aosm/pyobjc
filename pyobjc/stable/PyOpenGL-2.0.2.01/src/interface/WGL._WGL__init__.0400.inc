/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.23
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#include <Python.h>

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#define SWIGRUNTIME(x) static x

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif


/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *swig_type_list_handle;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *swig_type_list_handle;
  *swig_type_list_handle = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/* Check the typename */
static swig_type_info *
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
static SWIGINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
static swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
static SWIGINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
static const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = *swig_type_list_handle;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
static char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
static char *
SWIG_UnpackData(char *c, void *ptr, size_t sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientData(tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#define SWIGINTERN static 
#endif

#ifndef SWIGINTERNSHORT
#ifdef __cplusplus
#define SWIGINTERNSHORT static inline 
#else /* C case */
#define SWIGINTERNSHORT static 
#endif /* __cplusplus */
#endif

    
/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 
/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)();           /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

static PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,                                  /* Number of items in variable part (ob_size) */
  (char *)"swigvarlink",              /* Type name (tp_name) */
  sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
  0,                                  /* Itemsize (tp_itemsize) */
  0,                                  /* Deallocator (tp_dealloc) */ 
  (printfunc) swig_varlink_print,     /* Print (tp_print) */
  (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
  (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
  0,                                  /* tp_compare */
  (reprfunc) swig_varlink_repr,       /* tp_repr */
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_sequence */
  0,                                  /* tp_as_mapping */
  0,                                  /* tp_hash */
  0,                                  /* tp_call */
  0,                                  /* tp_str */
  0,                                  /* tp_getattro */
  0,                                  /* tp_setattro */
  0,                                  /* tp_as_buffer */
  0,                                  /* tp_flags */
  0,                                  /* tp_doc */
  0,                                  /* tp_traverse */
  0,                                  /* tp_clear */
  0,                                  /* tp_richcompare */
  0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
  0,                                  /* tp_iter */
  0,                                  /* tp_iternext */
  0,                                  /* tp_methods */
  0,                                  /* tp_members */
  0,                                  /* tp_getset */
  0,                                  /* tp_base */
  0,                                  /* tp_dict */
  0,                                  /* tp_descr_get */
  0,                                  /* tp_descr_set */
  0,                                  /* tp_dictoffset */
  0,                                  /* tp_init */
  0,                                  /* tp_alloc */
  0,                                  /* tp_new */
  0,                                  /* tp_free */
  0,                                  /* tp_is_gc */
  0,                                  /* tp_bases */
  0,                                  /* tp_mro */
  0,                                  /* tp_cache */
  0,                                  /* tp_subclasses */
  0,                                  /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
  0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
  /* these must be last */
  0,                                  /* tp_alloc */
  0,                                  /* tp_free */
  0,                                  /* tp_maxalloc */
  0,                                  /*  tp_next */
#endif
};

/* Create a variable linking object for use later */
static PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

static void
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

static void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
    if (!PyCObject_Check(obj)) {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_DECREF(str);
	return;
      }
    } else {
      const char *otype = (char *) PyCObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PyCObject(%s)' is received",
		     type, otype);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);

  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

static SWIGINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

static int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

static int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    sprintf(mesg, "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
static int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      *ptr = (void *) 0;
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,&vptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

type_check:

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c += 10;
	if (*c == '_') {
	  c++;
	  c = SWIG_UnpackData(c,&vptr,sizeof(void *));
	  goto type_check;
	}
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
static void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
static int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}

/* Create a new pointer string */
static char *
SWIG_Python_PointerStr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}
  

/* Create a new pointer object */
static PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    SWIG_Python_PointerStr(result, ptr, type->name, 1024);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

static PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 2 + strlen(type->name)) > 1024) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}


/* -----------------------------------------------------------------------------
 * constants/methods manipulation
 * ----------------------------------------------------------------------------- */

/* Install Constants */
static void
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      if (constants[i].pvalue) {
	obj = PyString_FromString((char *) constants[i].pvalue);
      } else {
	Py_INCREF(Py_None);
	obj = Py_None;
      }
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

/* Fix SwigMethods to carry the callback ptrs when needed */
static void
SWIG_Python_FixMethods(PyMethodDef *methods,
		       swig_const_info *const_table,
		       swig_type_info **types,
		       swig_type_info **types_initial) {
  int i;
  for (i = 0; methods[i].ml_name; ++i) {
    char *c = methods[i].ml_doc;
    if (c && (c = strstr(c, "swig_ptr: "))) {
      int j;
      swig_const_info *ci = 0;
      char *name = c + 10;
      for (j = 0; const_table[j].type; j++) {
	if (strncmp(const_table[j].name, name, 
		    strlen(const_table[j].name)) == 0) {
	  ci = &(const_table[j]);
	  break;
	}
      }
      if (ci) {
	size_t shift = (ci->ptype) - types;
	swig_type_info *ty = types_initial[shift];
	size_t ldoc = (c - methods[i].ml_doc);
	size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
	char *ndoc = (char*)malloc(ldoc + lptr + 10);
	char *buff = ndoc;
	void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
	strncpy(buff, methods[i].ml_doc, ldoc);
	buff += ldoc;
	strncpy(buff, "swig_ptr: ", 10);
	buff += 10;
	SWIG_Python_PointerStr(buff, ptr, ty->name, lptr);
	methods[i].ml_doc = ndoc;
      }
    }
  }
}


/* -----------------------------------------------------------------------------
 * Lookup type pointer 
 * ----------------------------------------------------------------------------- */
#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
is copied out of Python/modsupport.c in python version 2.3.4 */
static int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
	PyObject *dict;
	if (!PyModule_Check(m)) {
		PyErr_SetString(PyExc_TypeError,
			    "PyModule_AddObject() needs module as first arg");
		return -1;
	}
	if (!o) {
		PyErr_SetString(PyExc_TypeError,
				"PyModule_AddObject() needs non-NULL value");
		return -1;
	}

	dict = PyModule_GetDict(m);
	if (dict == NULL) {
		/* Internal error -- modules must have a dict! */
		PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
			     PyModule_GetName(m));
		return -1;
	}
	if (PyDict_SetItemString(dict, name, o))
		return -1;
	Py_DECREF(o);
	return 0;
}
#endif
static PyMethodDef swig_empty_runtime_method_table[] = {
    {NULL, NULL, 0, NULL}        /* Sentinel */
};

static void
SWIG_Python_LookupTypePointer(swig_type_info ***type_list_handle) {
  PyObject *module, *pointer;
  void *type_pointer;

  /* first check if module already created */
  type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
  if (type_pointer) {
    *type_list_handle = (swig_type_info **) type_pointer;
  } else {
    PyErr_Clear();
    /* create a new module and variable */
    module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
    pointer = PyCObject_FromVoidPtr((void *) (*type_list_handle), NULL);
    if (pointer && module) {
      PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
    }
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_BOOL swig_types[0] 
#define  SWIGTYPE_p_GLYPHMETRICSFLOAT swig_types[1] 
#define  SWIGTYPE_size_t swig_types[2] 
#define  SWIGTYPE_p_HGLRC swig_types[3] 
#define  SWIGTYPE_p_DOUBLE swig_types[4] 
#define  SWIGTYPE_p_UINT swig_types[5] 
#define  SWIGTYPE_p_HDC swig_types[6] 
#define  SWIGTYPE_p_COLORREF swig_types[7] 
#define  SWIGTYPE_p_PIXELFORMATDESCRIPTOR swig_types[8] 
#define  SWIGTYPE_p_LAYERPLANEDESCRIPTOR swig_types[9] 
#define  SWIGTYPE_p_WORD swig_types[10] 
#define  SWIGTYPE_p_BYTE swig_types[11] 
#define  SWIGTYPE_p_POINTFLOAT swig_types[12] 
#define  SWIGTYPE_p_char swig_types[13] 
#define  SWIGTYPE_p_PROC swig_types[14] 
#define  SWIGTYPE_p_FLOAT swig_types[15] 
#define  SWIGTYPE_p_DWORD swig_types[16] 
#define  SWIGTYPE_p_HENHMETAFILE swig_types[17] 
#define  SWIGTYPE_ptrdiff_t swig_types[18] 
#define  SWIGTYPE_p_VOID swig_types[19] 
static swig_type_info *swig_types[21];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _WGL__init__.so
  ------------------------------------------------*/
#define SWIG_init    init_WGL__init__

#define SWIG_name    "_WGL__init__"

SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj((char*)(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}


  /*@C:\\bin\\SWIG-1.3.23\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


/**
 *
 * WGL Module for PyOpenGL
 * 
 * Date: May 2001
 *
 * Authors: Tarn Weisner Burton <twburton@users.sourceforge.net>
 * 
***/


#if PY_MAJOR_VERSION < 2
#define PyExc_WindowsError PyExc_OSError
#endif

int WGLErrOccurred()
{
	DWORD error = GetLastError();
	if (error != ERROR_SUCCESS)
	{
		LPSTR buffer;
		FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ALLOCATE_BUFFER, NULL, error, 0, (LPSTR)&buffer, 0, NULL);
		PyErr_SetObject(PyExc_WindowsError, Py_BuildValue("is", error, buffer));
		LocalFree(buffer);
		return 1;
	}

	return 0;
}


#include <limits.h>


SWIGINTERNSHORT int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_short(PyObject *obj, unsigned short *val)
{ 
  const char* errmsg = val ? "unsigned short" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, USHRT_MAX, errmsg)) {
      if (val) *val = (unsigned short)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNSHORT unsigned short
SWIG_As_unsigned_SS_short(PyObject* obj)
{
  unsigned short v;
  if (!SWIG_AsVal_unsigned_SS_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned short));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_short(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_short(obj, (unsigned short*)0);
}


  /*@C:\\bin\\SWIG-1.3.23\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_short PyInt_FromLong
/*@@*/


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = (unsigned int)(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNSHORT unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


  /*@C:\\bin\\SWIG-1.3.23\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


SWIGINTERNSHORT PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


#if UINT_MAX < LONG_MAX
/*@C:\\bin\\SWIG-1.3.23\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@C:\\bin\\SWIG-1.3.23\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_char(PyObject *obj, unsigned char *val)
{ 
  const char* errmsg = val ? "unsigned char" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, UCHAR_MAX,errmsg)) {
      if (val) *val = (unsigned char)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNSHORT unsigned char
SWIG_As_unsigned_SS_char(PyObject* obj)
{
  unsigned char v;
  if (!SWIG_AsVal_unsigned_SS_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned char));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_char(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_char(obj, (unsigned char*)0);
}


  /*@C:\\bin\\SWIG-1.3.23\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_char PyInt_FromLong
/*@@*/


PIXELFORMATDESCRIPTOR* new_PIXELFORMATDESCRIPTOR()
{
	PIXELFORMATDESCRIPTOR *result = PyMem_New(PIXELFORMATDESCRIPTOR, 1);
	memset(result, 0, sizeof(PIXELFORMATDESCRIPTOR));
	result->nSize = sizeof(PIXELFORMATDESCRIPTOR);
	result->nVersion = 1;
	return result;
}

void delete_PIXELFORMATDESCRIPTOR(PIXELFORMATDESCRIPTOR *x)
{
	PyMem_Del(x);
}


#include <float.h>
SWIGINTERN int
  SWIG_CheckDoubleInRange(double value, double min_value, 
			  double max_value, const char* errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is less than %s minimum %g", 
		   value, errmsg, min_value);
    }
    return 0;
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is greater than %s maximum %g", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_float(PyObject *obj, float *val)
{
  const char* errmsg = val ? "float" : (char*)0;
  double v;
  if (SWIG_AsVal_double(obj, &v)) {
    if (SWIG_CheckDoubleInRange(v, -FLT_MAX, FLT_MAX, errmsg)) {
      if (val) *val = (float)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNSHORT float
SWIG_As_float(PyObject* obj)
{
  float v;
  if (!SWIG_AsVal_float(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(float));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_float(PyObject* obj)
{
  return SWIG_AsVal_float(obj, (float*)0);
}


  /*@C:\\bin\\SWIG-1.3.23\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_float PyFloat_FromDouble
/*@@*/

POINTFLOAT *new_POINTFLOAT(){
		POINTFLOAT *result = PyMem_New(POINTFLOAT, 1);
		memset(result, 0, sizeof(POINTFLOAT));
		return result;
	}
void delete_POINTFLOAT(POINTFLOAT *self){
		PyMem_Del(self);
	}

GLYPHMETRICSFLOAT* new_GLYPHMETRICSFLOAT()
{
	GLYPHMETRICSFLOAT *result = PyMem_New(GLYPHMETRICSFLOAT, 1);
	memset(result, 0, sizeof(GLYPHMETRICSFLOAT));
	return result;
}

void delete_GLYPHMETRICSFLOAT(GLYPHMETRICSFLOAT *x)
{
	PyMem_Del(x);
}


LAYERPLANEDESCRIPTOR* new_LAYERPLANEDESCRIPTOR()
{
	LAYERPLANEDESCRIPTOR *result = PyMem_New(LAYERPLANEDESCRIPTOR, 1);
	memset(result, 0, sizeof(LAYERPLANEDESCRIPTOR));
	result->nSize = sizeof(LAYERPLANEDESCRIPTOR);
	result->nVersion = 1;
	return result;
}

void delete_LAYERPLANEDESCRIPTOR(LAYERPLANEDESCRIPTOR *x)
{
	PyMem_Del(x);
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


SWIGINTERNSHORT long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}

 static char _doc_ChoosePixelFormat[] = "ChoosePixelFormat(hdc, ppfd) -> int"; 

SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNSHORT int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}

 static char _doc_DescribePixelFormat[] = "DescribePixelFormat(hdc, iPixelFormat, nBytes, ppfd) -> int"; 
 static char _doc_GetPixelFormat[] = "GetPixelFormat(hdc) -> int"; 
 static char _doc_SetPixelFormat[] = "SetPixelFormat(hdc, iPixelFormat, ppfd) -> int"; 
 static char _doc_SwapBuffers[] = "SwapBuffers(hdc) -> BOOL"; 
 static char _doc_wglCreateContext[] = "wglCreateContext(hdc) -> HGLRC"; 
 static char _doc_wglCreateLayerContext[] = "wglCreateLayerContext(hdc, iLayerPlane) -> HGLRC"; 
 static char _doc_wglCopyContext[] = "wglCopyContext(hglrcSrc, hglrcDst, mask) -> BOOL"; 
 static char _doc_wglDeleteContext[] = "wglDeleteContext(hglrc) -> BOOL"; 
 static char _doc_wglDescribeLayerPlane[] = "wglDescribeLayerPlane(hdc, iPixelFormat, iLayerPlane, nBytes, plpd) -> BOOL"; 
 static char _doc_wglGetCurrentContext[] = "wglGetCurrentContext() -> HGLRC"; 
 static char _doc_wglGetCurrentDC[] = "wglGetCurrentDC() -> HDC"; 

PyObject* _wglGetLayerPaletteEntries(HDC hdc, int iLayerPlane, int iStart, int cEntries)
{
	COLORREF *pcr = PyMem_New(COLORREF, cEntries);
	int n = wglGetLayerPaletteEntries(hdc, iLayerPlane, iStart, cEntries, pcr);
	PyObject* result;
	
	if (n == 0)
	{
		Py_INCREF(Py_None);
		return Py_None;
	}
	
	result = _PyTuple_FromUnsignedIntArray(n, pcr);
	PyMem_Del(pcr);
	return result;
}

 static char _doc_wglGetLayerPaletteEntries[] = "wglGetLayerPaletteEntries(hdc, iLayerPlane, iStart, cEntries, pcr) -> cr"; 

/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERNSHORT int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  char* cptr = 0;
  if (SWIG_AsCharPtrAndSize(obj, &cptr, (size_t*)(0))) {
    if (val) *val = cptr;
    return 1;
  }
  if (val) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}

 static char _doc_wglGetProcAddress[] = "wglGetProcAddress(lpszProc) -> PROC"; 
 static char _doc_wglMakeCurrent[] = "wglMakeCurrent(hdc, hglrc) -> BOOL"; 
 static char _doc_wglRealizeLayerPalette[] = "wglRealizeLayerPalette(hdc, iLayerPlane, bRealize) -> BOOL"; 
 static char _doc_wglSetLayerPaletteEntries[] = "wglSetLayerPaletteEntries(hdc, iLayerPlane, iStart, cEntries, pcr) -> int"; 
 static char _doc_wglShareLists[] = "wglShareLists(hglrc1, hglrc2) -> BOOL"; 
 static char _doc_wglSwapLayerBuffers[] = "wglSwapLayerBuffers(hdc, fuPlanes) -> BOOL"; 
 static char _doc_wglUseFontBitmapsA[] = "wglUseFontBitmapsA(hdc, first, count, listBase) -> BOOL"; 
 static char _doc_wglUseFontBitmapsW[] = "wglUseFontBitmapsW(hdc, first, count, listBase) -> BOOL"; 
 static char _doc_wglUseFontOutlinesA[] = "wglUseFontOutlinesA(hdc, first, count, listBase, deviation, extrusion, formation, lpgmf) -> BOOL"; 
 static char _doc_wglUseFontOutlinesW[] = "wglUseFontOutlinesW(hdc, first, count, listBase, deviation, extrusion, formation, lpgmf) -> BOOL"; 
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_PIXELFORMATDESCRIPTOR_nSize_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    WORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_nSize_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (WORD)(SWIG_As_unsigned_SS_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nSize = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_nSize_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    WORD result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_nSize_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (WORD) ((arg1)->nSize);
    
    {
        resultobj = SWIG_From_unsigned_SS_short((unsigned short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_nVersion_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    WORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_nVersion_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (WORD)(SWIG_As_unsigned_SS_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nVersion = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_nVersion_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    WORD result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_nVersion_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (WORD) ((arg1)->nVersion);
    
    {
        resultobj = SWIG_From_unsigned_SS_short((unsigned short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_dwFlags_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    DWORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_dwFlags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dwFlags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_dwFlags_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    DWORD result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_dwFlags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DWORD) ((arg1)->dwFlags);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_iPixelType_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_iPixelType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->iPixelType = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_iPixelType_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_iPixelType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->iPixelType);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cColorBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cColorBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cColorBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cColorBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cColorBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cColorBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cRedBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cRedBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cRedBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cRedBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cRedBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cRedBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cRedShift_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cRedShift_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cRedShift = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cRedShift_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cRedShift_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cRedShift);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cGreenBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cGreenBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cGreenBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cGreenBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cGreenBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cGreenBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cGreenShift_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cGreenShift_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cGreenShift = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cGreenShift_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cGreenShift_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cGreenShift);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cBlueBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cBlueBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cBlueBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cBlueBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cBlueBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cBlueBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cBlueShift_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cBlueShift_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cBlueShift = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cBlueShift_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cBlueShift_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cBlueShift);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAlphaBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cAlphaBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAlphaBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAlphaBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cAlphaBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAlphaBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAlphaShift_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cAlphaShift_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAlphaShift = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAlphaShift_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cAlphaShift_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAlphaShift);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cAccumBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cAccumBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumRedBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cAccumRedBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumRedBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumRedBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cAccumRedBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumRedBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumGreenBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cAccumGreenBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumGreenBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumGreenBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cAccumGreenBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumGreenBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumBlueBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cAccumBlueBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumBlueBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumBlueBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cAccumBlueBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumBlueBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumAlphaBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cAccumAlphaBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumAlphaBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAccumAlphaBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cAccumAlphaBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumAlphaBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cDepthBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cDepthBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cDepthBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cDepthBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cDepthBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cDepthBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cStencilBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cStencilBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cStencilBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cStencilBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cStencilBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cStencilBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAuxBuffers_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_cAuxBuffers_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAuxBuffers = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_cAuxBuffers_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_cAuxBuffers_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAuxBuffers);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_iLayerType_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_iLayerType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->iLayerType = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_iLayerType_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_iLayerType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->iLayerType);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_bReserved_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_bReserved_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->bReserved = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_bReserved_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_bReserved_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->bReserved);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_dwLayerMask_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    DWORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_dwLayerMask_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dwLayerMask = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_dwLayerMask_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    DWORD result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_dwLayerMask_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DWORD) ((arg1)->dwLayerMask);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_dwVisibleMask_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    DWORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_dwVisibleMask_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dwVisibleMask = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_dwVisibleMask_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    DWORD result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_dwVisibleMask_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DWORD) ((arg1)->dwVisibleMask);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_dwDamageMask_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    DWORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PIXELFORMATDESCRIPTOR_dwDamageMask_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dwDamageMask = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PIXELFORMATDESCRIPTOR_dwDamageMask_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    DWORD result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PIXELFORMATDESCRIPTOR_dwDamageMask_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DWORD) ((arg1)->dwDamageMask);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PIXELFORMATDESCRIPTOR(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_PIXELFORMATDESCRIPTOR")) goto fail;
    {
        SetLastError(0);
        result = (PIXELFORMATDESCRIPTOR *)new_PIXELFORMATDESCRIPTOR();
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_PIXELFORMATDESCRIPTOR, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_PIXELFORMATDESCRIPTOR(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PIXELFORMATDESCRIPTOR *arg1 = (PIXELFORMATDESCRIPTOR *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_PIXELFORMATDESCRIPTOR",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SetLastError(0);
        delete_PIXELFORMATDESCRIPTOR(arg1);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PIXELFORMATDESCRIPTOR_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_PIXELFORMATDESCRIPTOR, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_POINTFLOAT_x_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    POINTFLOAT *arg1 = (POINTFLOAT *) 0 ;
    FLOAT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:POINTFLOAT_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_POINTFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (FLOAT)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_POINTFLOAT_x_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    POINTFLOAT *arg1 = (POINTFLOAT *) 0 ;
    FLOAT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:POINTFLOAT_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_POINTFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (FLOAT) ((arg1)->x);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_POINTFLOAT_y_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    POINTFLOAT *arg1 = (POINTFLOAT *) 0 ;
    FLOAT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:POINTFLOAT_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_POINTFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (FLOAT)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_POINTFLOAT_y_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    POINTFLOAT *arg1 = (POINTFLOAT *) 0 ;
    FLOAT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:POINTFLOAT_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_POINTFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (FLOAT) ((arg1)->y);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_POINTFLOAT(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    POINTFLOAT *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_POINTFLOAT")) goto fail;
    {
        SetLastError(0);
        result = (POINTFLOAT *)new_POINTFLOAT();
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_POINTFLOAT, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_POINTFLOAT(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    POINTFLOAT *arg1 = (POINTFLOAT *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_POINTFLOAT",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_POINTFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SetLastError(0);
        delete_POINTFLOAT(arg1);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * POINTFLOAT_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_POINTFLOAT, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfBlackBoxX_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    FLOAT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GLYPHMETRICSFLOAT_gmfBlackBoxX_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (FLOAT)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->gmfBlackBoxX = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfBlackBoxX_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    FLOAT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GLYPHMETRICSFLOAT_gmfBlackBoxX_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (FLOAT) ((arg1)->gmfBlackBoxX);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfBlackBoxY_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    FLOAT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GLYPHMETRICSFLOAT_gmfBlackBoxY_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (FLOAT)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->gmfBlackBoxY = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfBlackBoxY_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    FLOAT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GLYPHMETRICSFLOAT_gmfBlackBoxY_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (FLOAT) ((arg1)->gmfBlackBoxY);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfptGlyphOrigin_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    POINTFLOAT *arg2 = (POINTFLOAT *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GLYPHMETRICSFLOAT_gmfptGlyphOrigin_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_POINTFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->gmfptGlyphOrigin = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfptGlyphOrigin_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    POINTFLOAT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GLYPHMETRICSFLOAT_gmfptGlyphOrigin_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (POINTFLOAT *)& ((arg1)->gmfptGlyphOrigin);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_POINTFLOAT, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfCellIncX_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    FLOAT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GLYPHMETRICSFLOAT_gmfCellIncX_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (FLOAT)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->gmfCellIncX = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfCellIncX_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    FLOAT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GLYPHMETRICSFLOAT_gmfCellIncX_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (FLOAT) ((arg1)->gmfCellIncX);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfCellIncY_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    FLOAT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GLYPHMETRICSFLOAT_gmfCellIncY_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (FLOAT)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->gmfCellIncY = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GLYPHMETRICSFLOAT_gmfCellIncY_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    FLOAT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GLYPHMETRICSFLOAT_gmfCellIncY_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (FLOAT) ((arg1)->gmfCellIncY);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GLYPHMETRICSFLOAT(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_GLYPHMETRICSFLOAT")) goto fail;
    {
        SetLastError(0);
        result = (GLYPHMETRICSFLOAT *)new_GLYPHMETRICSFLOAT();
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GLYPHMETRICSFLOAT, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GLYPHMETRICSFLOAT(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GLYPHMETRICSFLOAT *arg1 = (GLYPHMETRICSFLOAT *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GLYPHMETRICSFLOAT",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SetLastError(0);
        delete_GLYPHMETRICSFLOAT(arg1);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GLYPHMETRICSFLOAT_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GLYPHMETRICSFLOAT, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_LAYERPLANEDESCRIPTOR_nSize_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    WORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_nSize_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (WORD)(SWIG_As_unsigned_SS_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nSize = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_nSize_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    WORD result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_nSize_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (WORD) ((arg1)->nSize);
    
    {
        resultobj = SWIG_From_unsigned_SS_short((unsigned short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_nVersion_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    WORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_nVersion_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (WORD)(SWIG_As_unsigned_SS_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nVersion = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_nVersion_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    WORD result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_nVersion_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (WORD) ((arg1)->nVersion);
    
    {
        resultobj = SWIG_From_unsigned_SS_short((unsigned short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_dwFlags_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    DWORD arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_dwFlags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dwFlags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_dwFlags_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    DWORD result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_dwFlags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DWORD) ((arg1)->dwFlags);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_iPixelType_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_iPixelType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->iPixelType = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_iPixelType_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_iPixelType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->iPixelType);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cColorBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cColorBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cColorBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cColorBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cColorBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cColorBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cRedBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cRedBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cRedBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cRedBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cRedBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cRedBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cRedShift_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cRedShift_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cRedShift = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cRedShift_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cRedShift_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cRedShift);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cGreenBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cGreenBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cGreenBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cGreenBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cGreenBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cGreenBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cGreenShift_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cGreenShift_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cGreenShift = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cGreenShift_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cGreenShift_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cGreenShift);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cBlueBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cBlueBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cBlueBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cBlueBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cBlueBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cBlueBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cBlueShift_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cBlueShift_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cBlueShift = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cBlueShift_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cBlueShift_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cBlueShift);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAlphaBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cAlphaBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAlphaBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAlphaBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cAlphaBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAlphaBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAlphaShift_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cAlphaShift_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAlphaShift = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAlphaShift_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cAlphaShift_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAlphaShift);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cAccumBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cAccumBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumRedBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cAccumRedBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumRedBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumRedBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cAccumRedBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumRedBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumGreenBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cAccumGreenBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumGreenBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumGreenBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cAccumGreenBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumGreenBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumBlueBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cAccumBlueBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumBlueBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumBlueBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cAccumBlueBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumBlueBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumAlphaBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cAccumAlphaBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAccumAlphaBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAccumAlphaBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cAccumAlphaBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAccumAlphaBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cDepthBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cDepthBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cDepthBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cDepthBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cDepthBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cDepthBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cStencilBits_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cStencilBits_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cStencilBits = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cStencilBits_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cStencilBits_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cStencilBits);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAuxBuffers_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_cAuxBuffers_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cAuxBuffers = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_cAuxBuffers_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_cAuxBuffers_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->cAuxBuffers);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_iLayerPlane_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_iLayerPlane_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->iLayerPlane = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_iLayerPlane_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_iLayerPlane_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->iLayerPlane);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_bReserved_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_bReserved_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (BYTE)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->bReserved = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_bReserved_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BYTE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_bReserved_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BYTE) ((arg1)->bReserved);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_crTransparent_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    COLORREF arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LAYERPLANEDESCRIPTOR_crTransparent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (COLORREF)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->crTransparent = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LAYERPLANEDESCRIPTOR_crTransparent_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    COLORREF result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LAYERPLANEDESCRIPTOR_crTransparent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (COLORREF) ((arg1)->crTransparent);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_LAYERPLANEDESCRIPTOR(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_LAYERPLANEDESCRIPTOR")) goto fail;
    {
        SetLastError(0);
        result = (LAYERPLANEDESCRIPTOR *)new_LAYERPLANEDESCRIPTOR();
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_LAYERPLANEDESCRIPTOR, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_LAYERPLANEDESCRIPTOR(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LAYERPLANEDESCRIPTOR *arg1 = (LAYERPLANEDESCRIPTOR *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LAYERPLANEDESCRIPTOR",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SetLastError(0);
        delete_LAYERPLANEDESCRIPTOR(arg1);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LAYERPLANEDESCRIPTOR_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_LAYERPLANEDESCRIPTOR, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ChoosePixelFormat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    PIXELFORMATDESCRIPTOR *arg2 = (PIXELFORMATDESCRIPTOR *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ChoosePixelFormat",&obj0,&obj1)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SetLastError(0);
        result = (int)ChoosePixelFormat(arg1,arg2);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DescribePixelFormat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    int arg2 ;
    UINT arg3 ;
    PIXELFORMATDESCRIPTOR *arg4 = (PIXELFORMATDESCRIPTOR *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DescribePixelFormat",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (UINT)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        SetLastError(0);
        result = (int)DescribePixelFormat(arg1,arg2,arg3,arg4);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetPixelFormat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetPixelFormat",&obj0)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (int)GetPixelFormat(arg1);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetPixelFormat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    int arg2 ;
    PIXELFORMATDESCRIPTOR *arg3 = (PIXELFORMATDESCRIPTOR *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SetPixelFormat",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_PIXELFORMATDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        SetLastError(0);
        result = (BOOL)SetPixelFormat(arg1,arg2,arg3);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SwapBuffers(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SwapBuffers",&obj0)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (BOOL)SwapBuffers(arg1);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglCreateContext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    HGLRC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:wglCreateContext",&obj0)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (HGLRC)wglCreateContext(arg1);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglCreateLayerContext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    int arg2 ;
    HGLRC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:wglCreateLayerContext",&obj0,&obj1)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (HGLRC)wglCreateLayerContext(arg1,arg2);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglCopyContext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HGLRC arg1 ;
    HGLRC arg2 ;
    UINT arg3 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:wglCopyContext",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (HGLRC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (HGLRC)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (UINT)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (BOOL)wglCopyContext(arg1,arg2,arg3);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglDeleteContext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HGLRC arg1 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:wglDeleteContext",&obj0)) goto fail;
    {
        arg1 = (HGLRC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (BOOL)wglDeleteContext(arg1);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglDescribeLayerPlane(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    int arg2 ;
    int arg3 ;
    UINT arg4 ;
    LAYERPLANEDESCRIPTOR *arg5 = (LAYERPLANEDESCRIPTOR *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:wglDescribeLayerPlane",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (UINT)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_LAYERPLANEDESCRIPTOR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        SetLastError(0);
        result = (BOOL)wglDescribeLayerPlane(arg1,arg2,arg3,arg4,arg5);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglGetCurrentContext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HGLRC result;
    
    if(!PyArg_ParseTuple(args,(char *)":wglGetCurrentContext")) goto fail;
    {
        SetLastError(0);
        result = (HGLRC)wglGetCurrentContext();
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglGetCurrentDC(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC result;
    
    if(!PyArg_ParseTuple(args,(char *)":wglGetCurrentDC")) goto fail;
    {
        SetLastError(0);
        result = (HDC)wglGetCurrentDC();
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglGetLayerPaletteEntries(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:wglGetLayerPaletteEntries",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (PyObject *)_wglGetLayerPaletteEntries(arg1,arg2,arg3,arg4);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglGetProcAddress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LPCSTR arg1 = (LPCSTR) 0 ;
    PROC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:wglGetProcAddress",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SetLastError(0);
        result = (PROC)wglGetProcAddress(arg1);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglMakeCurrent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    HGLRC arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:wglMakeCurrent",&obj0,&obj1)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (HGLRC)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (BOOL)wglMakeCurrent(arg1,arg2);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglRealizeLayerPalette(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    int arg2 ;
    BOOL arg3 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:wglRealizeLayerPalette",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (BOOL)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (BOOL)wglRealizeLayerPalette(arg1,arg2,arg3);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglSetLayerPaletteEntries(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    COLORREF *arg5 = (COLORREF *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:wglSetLayerPaletteEntries",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_COLORREF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        SetLastError(0);
        result = (int)wglSetLayerPaletteEntries(arg1,arg2,arg3,arg4,(COLORREF const *)arg5);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglShareLists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HGLRC arg1 ;
    HGLRC arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:wglShareLists",&obj0,&obj1)) goto fail;
    {
        arg1 = (HGLRC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (HGLRC)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (BOOL)wglShareLists(arg1,arg2);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglSwapLayerBuffers(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    UINT arg2 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:wglSwapLayerBuffers",&obj0,&obj1)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (UINT)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (BOOL)wglSwapLayerBuffers(arg1,arg2);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglUseFontBitmapsA(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    DWORD arg2 ;
    DWORD arg3 ;
    DWORD arg4 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:wglUseFontBitmapsA",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (DWORD)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (DWORD)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (BOOL)wglUseFontBitmapsA(arg1,arg2,arg3,arg4);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglUseFontBitmapsW(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    DWORD arg2 ;
    DWORD arg3 ;
    DWORD arg4 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:wglUseFontBitmapsW",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (DWORD)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (DWORD)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SetLastError(0);
        result = (BOOL)wglUseFontBitmapsW(arg1,arg2,arg3,arg4);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglUseFontOutlinesA(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    DWORD arg2 ;
    DWORD arg3 ;
    DWORD arg4 ;
    FLOAT arg5 ;
    FLOAT arg6 ;
    int arg7 ;
    GLYPHMETRICSFLOAT *arg8 = (GLYPHMETRICSFLOAT *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:wglUseFontOutlinesA",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (DWORD)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (DWORD)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (FLOAT)(SWIG_As_float(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (FLOAT)(SWIG_As_float(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(8)) SWIG_fail;
    {
        SetLastError(0);
        result = (BOOL)wglUseFontOutlinesA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wglUseFontOutlinesW(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HDC arg1 ;
    DWORD arg2 ;
    DWORD arg3 ;
    DWORD arg4 ;
    FLOAT arg5 ;
    FLOAT arg6 ;
    int arg7 ;
    GLYPHMETRICSFLOAT *arg8 = (GLYPHMETRICSFLOAT *) 0 ;
    BOOL result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:wglUseFontOutlinesW",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        arg1 = (HDC)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (DWORD)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (DWORD)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (DWORD)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (FLOAT)(SWIG_As_float(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (FLOAT)(SWIG_As_float(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_GLYPHMETRICSFLOAT, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(8)) SWIG_fail;
    {
        SetLastError(0);
        result = (BOOL)wglUseFontOutlinesW(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        
        if (WGLErrOccurred()) {
            return NULL; 
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"PIXELFORMATDESCRIPTOR_nSize_set", _wrap_PIXELFORMATDESCRIPTOR_nSize_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_nSize_get", _wrap_PIXELFORMATDESCRIPTOR_nSize_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_nVersion_set", _wrap_PIXELFORMATDESCRIPTOR_nVersion_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_nVersion_get", _wrap_PIXELFORMATDESCRIPTOR_nVersion_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_dwFlags_set", _wrap_PIXELFORMATDESCRIPTOR_dwFlags_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_dwFlags_get", _wrap_PIXELFORMATDESCRIPTOR_dwFlags_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_iPixelType_set", _wrap_PIXELFORMATDESCRIPTOR_iPixelType_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_iPixelType_get", _wrap_PIXELFORMATDESCRIPTOR_iPixelType_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cColorBits_set", _wrap_PIXELFORMATDESCRIPTOR_cColorBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cColorBits_get", _wrap_PIXELFORMATDESCRIPTOR_cColorBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cRedBits_set", _wrap_PIXELFORMATDESCRIPTOR_cRedBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cRedBits_get", _wrap_PIXELFORMATDESCRIPTOR_cRedBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cRedShift_set", _wrap_PIXELFORMATDESCRIPTOR_cRedShift_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cRedShift_get", _wrap_PIXELFORMATDESCRIPTOR_cRedShift_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cGreenBits_set", _wrap_PIXELFORMATDESCRIPTOR_cGreenBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cGreenBits_get", _wrap_PIXELFORMATDESCRIPTOR_cGreenBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cGreenShift_set", _wrap_PIXELFORMATDESCRIPTOR_cGreenShift_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cGreenShift_get", _wrap_PIXELFORMATDESCRIPTOR_cGreenShift_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cBlueBits_set", _wrap_PIXELFORMATDESCRIPTOR_cBlueBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cBlueBits_get", _wrap_PIXELFORMATDESCRIPTOR_cBlueBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cBlueShift_set", _wrap_PIXELFORMATDESCRIPTOR_cBlueShift_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cBlueShift_get", _wrap_PIXELFORMATDESCRIPTOR_cBlueShift_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAlphaBits_set", _wrap_PIXELFORMATDESCRIPTOR_cAlphaBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAlphaBits_get", _wrap_PIXELFORMATDESCRIPTOR_cAlphaBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAlphaShift_set", _wrap_PIXELFORMATDESCRIPTOR_cAlphaShift_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAlphaShift_get", _wrap_PIXELFORMATDESCRIPTOR_cAlphaShift_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumBits_set", _wrap_PIXELFORMATDESCRIPTOR_cAccumBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumBits_get", _wrap_PIXELFORMATDESCRIPTOR_cAccumBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumRedBits_set", _wrap_PIXELFORMATDESCRIPTOR_cAccumRedBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumRedBits_get", _wrap_PIXELFORMATDESCRIPTOR_cAccumRedBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumGreenBits_set", _wrap_PIXELFORMATDESCRIPTOR_cAccumGreenBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumGreenBits_get", _wrap_PIXELFORMATDESCRIPTOR_cAccumGreenBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumBlueBits_set", _wrap_PIXELFORMATDESCRIPTOR_cAccumBlueBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumBlueBits_get", _wrap_PIXELFORMATDESCRIPTOR_cAccumBlueBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumAlphaBits_set", _wrap_PIXELFORMATDESCRIPTOR_cAccumAlphaBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAccumAlphaBits_get", _wrap_PIXELFORMATDESCRIPTOR_cAccumAlphaBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cDepthBits_set", _wrap_PIXELFORMATDESCRIPTOR_cDepthBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cDepthBits_get", _wrap_PIXELFORMATDESCRIPTOR_cDepthBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cStencilBits_set", _wrap_PIXELFORMATDESCRIPTOR_cStencilBits_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cStencilBits_get", _wrap_PIXELFORMATDESCRIPTOR_cStencilBits_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAuxBuffers_set", _wrap_PIXELFORMATDESCRIPTOR_cAuxBuffers_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_cAuxBuffers_get", _wrap_PIXELFORMATDESCRIPTOR_cAuxBuffers_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_iLayerType_set", _wrap_PIXELFORMATDESCRIPTOR_iLayerType_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_iLayerType_get", _wrap_PIXELFORMATDESCRIPTOR_iLayerType_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_bReserved_set", _wrap_PIXELFORMATDESCRIPTOR_bReserved_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_bReserved_get", _wrap_PIXELFORMATDESCRIPTOR_bReserved_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_dwLayerMask_set", _wrap_PIXELFORMATDESCRIPTOR_dwLayerMask_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_dwLayerMask_get", _wrap_PIXELFORMATDESCRIPTOR_dwLayerMask_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_dwVisibleMask_set", _wrap_PIXELFORMATDESCRIPTOR_dwVisibleMask_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_dwVisibleMask_get", _wrap_PIXELFORMATDESCRIPTOR_dwVisibleMask_get, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_dwDamageMask_set", _wrap_PIXELFORMATDESCRIPTOR_dwDamageMask_set, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_dwDamageMask_get", _wrap_PIXELFORMATDESCRIPTOR_dwDamageMask_get, METH_VARARGS, NULL},
	 { (char *)"new_PIXELFORMATDESCRIPTOR", _wrap_new_PIXELFORMATDESCRIPTOR, METH_VARARGS, NULL},
	 { (char *)"delete_PIXELFORMATDESCRIPTOR", _wrap_delete_PIXELFORMATDESCRIPTOR, METH_VARARGS, NULL},
	 { (char *)"PIXELFORMATDESCRIPTOR_swigregister", PIXELFORMATDESCRIPTOR_swigregister, METH_VARARGS, NULL},
	 { (char *)"POINTFLOAT_x_set", _wrap_POINTFLOAT_x_set, METH_VARARGS, NULL},
	 { (char *)"POINTFLOAT_x_get", _wrap_POINTFLOAT_x_get, METH_VARARGS, NULL},
	 { (char *)"POINTFLOAT_y_set", _wrap_POINTFLOAT_y_set, METH_VARARGS, NULL},
	 { (char *)"POINTFLOAT_y_get", _wrap_POINTFLOAT_y_get, METH_VARARGS, NULL},
	 { (char *)"new_POINTFLOAT", _wrap_new_POINTFLOAT, METH_VARARGS, NULL},
	 { (char *)"delete_POINTFLOAT", _wrap_delete_POINTFLOAT, METH_VARARGS, NULL},
	 { (char *)"POINTFLOAT_swigregister", POINTFLOAT_swigregister, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfBlackBoxX_set", _wrap_GLYPHMETRICSFLOAT_gmfBlackBoxX_set, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfBlackBoxX_get", _wrap_GLYPHMETRICSFLOAT_gmfBlackBoxX_get, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfBlackBoxY_set", _wrap_GLYPHMETRICSFLOAT_gmfBlackBoxY_set, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfBlackBoxY_get", _wrap_GLYPHMETRICSFLOAT_gmfBlackBoxY_get, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfptGlyphOrigin_set", _wrap_GLYPHMETRICSFLOAT_gmfptGlyphOrigin_set, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfptGlyphOrigin_get", _wrap_GLYPHMETRICSFLOAT_gmfptGlyphOrigin_get, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfCellIncX_set", _wrap_GLYPHMETRICSFLOAT_gmfCellIncX_set, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfCellIncX_get", _wrap_GLYPHMETRICSFLOAT_gmfCellIncX_get, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfCellIncY_set", _wrap_GLYPHMETRICSFLOAT_gmfCellIncY_set, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_gmfCellIncY_get", _wrap_GLYPHMETRICSFLOAT_gmfCellIncY_get, METH_VARARGS, NULL},
	 { (char *)"new_GLYPHMETRICSFLOAT", _wrap_new_GLYPHMETRICSFLOAT, METH_VARARGS, NULL},
	 { (char *)"delete_GLYPHMETRICSFLOAT", _wrap_delete_GLYPHMETRICSFLOAT, METH_VARARGS, NULL},
	 { (char *)"GLYPHMETRICSFLOAT_swigregister", GLYPHMETRICSFLOAT_swigregister, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_nSize_set", _wrap_LAYERPLANEDESCRIPTOR_nSize_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_nSize_get", _wrap_LAYERPLANEDESCRIPTOR_nSize_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_nVersion_set", _wrap_LAYERPLANEDESCRIPTOR_nVersion_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_nVersion_get", _wrap_LAYERPLANEDESCRIPTOR_nVersion_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_dwFlags_set", _wrap_LAYERPLANEDESCRIPTOR_dwFlags_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_dwFlags_get", _wrap_LAYERPLANEDESCRIPTOR_dwFlags_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_iPixelType_set", _wrap_LAYERPLANEDESCRIPTOR_iPixelType_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_iPixelType_get", _wrap_LAYERPLANEDESCRIPTOR_iPixelType_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cColorBits_set", _wrap_LAYERPLANEDESCRIPTOR_cColorBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cColorBits_get", _wrap_LAYERPLANEDESCRIPTOR_cColorBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cRedBits_set", _wrap_LAYERPLANEDESCRIPTOR_cRedBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cRedBits_get", _wrap_LAYERPLANEDESCRIPTOR_cRedBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cRedShift_set", _wrap_LAYERPLANEDESCRIPTOR_cRedShift_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cRedShift_get", _wrap_LAYERPLANEDESCRIPTOR_cRedShift_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cGreenBits_set", _wrap_LAYERPLANEDESCRIPTOR_cGreenBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cGreenBits_get", _wrap_LAYERPLANEDESCRIPTOR_cGreenBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cGreenShift_set", _wrap_LAYERPLANEDESCRIPTOR_cGreenShift_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cGreenShift_get", _wrap_LAYERPLANEDESCRIPTOR_cGreenShift_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cBlueBits_set", _wrap_LAYERPLANEDESCRIPTOR_cBlueBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cBlueBits_get", _wrap_LAYERPLANEDESCRIPTOR_cBlueBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cBlueShift_set", _wrap_LAYERPLANEDESCRIPTOR_cBlueShift_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cBlueShift_get", _wrap_LAYERPLANEDESCRIPTOR_cBlueShift_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAlphaBits_set", _wrap_LAYERPLANEDESCRIPTOR_cAlphaBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAlphaBits_get", _wrap_LAYERPLANEDESCRIPTOR_cAlphaBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAlphaShift_set", _wrap_LAYERPLANEDESCRIPTOR_cAlphaShift_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAlphaShift_get", _wrap_LAYERPLANEDESCRIPTOR_cAlphaShift_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumBits_set", _wrap_LAYERPLANEDESCRIPTOR_cAccumBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumBits_get", _wrap_LAYERPLANEDESCRIPTOR_cAccumBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumRedBits_set", _wrap_LAYERPLANEDESCRIPTOR_cAccumRedBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumRedBits_get", _wrap_LAYERPLANEDESCRIPTOR_cAccumRedBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumGreenBits_set", _wrap_LAYERPLANEDESCRIPTOR_cAccumGreenBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumGreenBits_get", _wrap_LAYERPLANEDESCRIPTOR_cAccumGreenBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumBlueBits_set", _wrap_LAYERPLANEDESCRIPTOR_cAccumBlueBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumBlueBits_get", _wrap_LAYERPLANEDESCRIPTOR_cAccumBlueBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumAlphaBits_set", _wrap_LAYERPLANEDESCRIPTOR_cAccumAlphaBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAccumAlphaBits_get", _wrap_LAYERPLANEDESCRIPTOR_cAccumAlphaBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cDepthBits_set", _wrap_LAYERPLANEDESCRIPTOR_cDepthBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cDepthBits_get", _wrap_LAYERPLANEDESCRIPTOR_cDepthBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cStencilBits_set", _wrap_LAYERPLANEDESCRIPTOR_cStencilBits_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cStencilBits_get", _wrap_LAYERPLANEDESCRIPTOR_cStencilBits_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAuxBuffers_set", _wrap_LAYERPLANEDESCRIPTOR_cAuxBuffers_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_cAuxBuffers_get", _wrap_LAYERPLANEDESCRIPTOR_cAuxBuffers_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_iLayerPlane_set", _wrap_LAYERPLANEDESCRIPTOR_iLayerPlane_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_iLayerPlane_get", _wrap_LAYERPLANEDESCRIPTOR_iLayerPlane_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_bReserved_set", _wrap_LAYERPLANEDESCRIPTOR_bReserved_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_bReserved_get", _wrap_LAYERPLANEDESCRIPTOR_bReserved_get, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_crTransparent_set", _wrap_LAYERPLANEDESCRIPTOR_crTransparent_set, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_crTransparent_get", _wrap_LAYERPLANEDESCRIPTOR_crTransparent_get, METH_VARARGS, NULL},
	 { (char *)"new_LAYERPLANEDESCRIPTOR", _wrap_new_LAYERPLANEDESCRIPTOR, METH_VARARGS, NULL},
	 { (char *)"delete_LAYERPLANEDESCRIPTOR", _wrap_delete_LAYERPLANEDESCRIPTOR, METH_VARARGS, NULL},
	 { (char *)"LAYERPLANEDESCRIPTOR_swigregister", LAYERPLANEDESCRIPTOR_swigregister, METH_VARARGS, NULL},
	 { (char *)"ChoosePixelFormat", _wrap_ChoosePixelFormat, METH_VARARGS, NULL},
	 { (char *)"DescribePixelFormat", _wrap_DescribePixelFormat, METH_VARARGS, NULL},
	 { (char *)"GetPixelFormat", _wrap_GetPixelFormat, METH_VARARGS, NULL},
	 { (char *)"SetPixelFormat", _wrap_SetPixelFormat, METH_VARARGS, NULL},
	 { (char *)"SwapBuffers", _wrap_SwapBuffers, METH_VARARGS, NULL},
	 { (char *)"wglCreateContext", _wrap_wglCreateContext, METH_VARARGS, NULL},
	 { (char *)"wglCreateLayerContext", _wrap_wglCreateLayerContext, METH_VARARGS, NULL},
	 { (char *)"wglCopyContext", _wrap_wglCopyContext, METH_VARARGS, NULL},
	 { (char *)"wglDeleteContext", _wrap_wglDeleteContext, METH_VARARGS, NULL},
	 { (char *)"wglDescribeLayerPlane", _wrap_wglDescribeLayerPlane, METH_VARARGS, NULL},
	 { (char *)"wglGetCurrentContext", _wrap_wglGetCurrentContext, METH_VARARGS, NULL},
	 { (char *)"wglGetCurrentDC", _wrap_wglGetCurrentDC, METH_VARARGS, NULL},
	 { (char *)"wglGetLayerPaletteEntries", _wrap_wglGetLayerPaletteEntries, METH_VARARGS, NULL},
	 { (char *)"wglGetProcAddress", _wrap_wglGetProcAddress, METH_VARARGS, NULL},
	 { (char *)"wglMakeCurrent", _wrap_wglMakeCurrent, METH_VARARGS, NULL},
	 { (char *)"wglRealizeLayerPalette", _wrap_wglRealizeLayerPalette, METH_VARARGS, NULL},
	 { (char *)"wglSetLayerPaletteEntries", _wrap_wglSetLayerPaletteEntries, METH_VARARGS, NULL},
	 { (char *)"wglShareLists", _wrap_wglShareLists, METH_VARARGS, NULL},
	 { (char *)"wglSwapLayerBuffers", _wrap_wglSwapLayerBuffers, METH_VARARGS, NULL},
	 { (char *)"wglUseFontBitmapsA", _wrap_wglUseFontBitmapsA, METH_VARARGS, NULL},
	 { (char *)"wglUseFontBitmapsW", _wrap_wglUseFontBitmapsW, METH_VARARGS, NULL},
	 { (char *)"wglUseFontOutlinesA", _wrap_wglUseFontOutlinesA, METH_VARARGS, NULL},
	 { (char *)"wglUseFontOutlinesW", _wrap_wglUseFontOutlinesW, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_BOOL[] = {{"_p_BOOL", 0, "int *|BOOL *", 0, 0, 0, 0},{"_p_BOOL", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_GLYPHMETRICSFLOAT[] = {{"_p_GLYPHMETRICSFLOAT", 0, "struct _GLYPHMETRICSFLOAT *|GLYPHMETRICSFLOAT *", 0, 0, 0, 0},{"_p_GLYPHMETRICSFLOAT", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_HGLRC[] = {{"_p_HGLRC", 0, "long *|HGLRC *", 0, 0, 0, 0},{"_p_HENHMETAFILE", 0, 0, 0, 0, 0, 0},{"_p_HGLRC", 0, 0, 0, 0, 0, 0},{"_p_HDC", 0, 0, 0, 0, 0, 0},{"_p_PROC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_DOUBLE[] = {{"_p_DOUBLE", 0, "double *|DOUBLE *", 0, 0, 0, 0},{"_p_DOUBLE", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_UINT[] = {{"_p_UINT", 0, "unsigned int *|UINT *", 0, 0, 0, 0},{"_p_DWORD", 0, 0, 0, 0, 0, 0},{"_p_COLORREF", 0, 0, 0, 0, 0, 0},{"_p_UINT", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_HDC[] = {{"_p_HDC", 0, "long *|HDC *", 0, 0, 0, 0},{"_p_HENHMETAFILE", 0, 0, 0, 0, 0, 0},{"_p_HGLRC", 0, 0, 0, 0, 0, 0},{"_p_HDC", 0, 0, 0, 0, 0, 0},{"_p_PROC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_COLORREF[] = {{"_p_COLORREF", 0, "unsigned int *|COLORREF *", 0, 0, 0, 0},{"_p_COLORREF", 0, 0, 0, 0, 0, 0},{"_p_DWORD", 0, 0, 0, 0, 0, 0},{"_p_UINT", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PIXELFORMATDESCRIPTOR[] = {{"_p_PIXELFORMATDESCRIPTOR", 0, "struct tagPIXELFORMATDESCRIPTOR *|PIXELFORMATDESCRIPTOR *", 0, 0, 0, 0},{"_p_PIXELFORMATDESCRIPTOR", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_LAYERPLANEDESCRIPTOR[] = {{"_p_LAYERPLANEDESCRIPTOR", 0, "struct tagLAYERPLANEDESCRIPTOR *|LAYERPLANEDESCRIPTOR *", 0, 0, 0, 0},{"_p_LAYERPLANEDESCRIPTOR", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_WORD[] = {{"_p_WORD", 0, "unsigned short *|WORD *", 0, 0, 0, 0},{"_p_WORD", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_BYTE[] = {{"_p_BYTE", 0, "unsigned char *|BYTE *", 0, 0, 0, 0},{"_p_BYTE", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_POINTFLOAT[] = {{"_p_POINTFLOAT", 0, "struct _POINTFLOAT *|POINTFLOAT *", 0, 0, 0, 0},{"_p_POINTFLOAT", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PROC[] = {{"_p_PROC", 0, "long *|PROC *", 0, 0, 0, 0},{"_p_HENHMETAFILE", 0, 0, 0, 0, 0, 0},{"_p_HGLRC", 0, 0, 0, 0, 0, 0},{"_p_PROC", 0, 0, 0, 0, 0, 0},{"_p_HDC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_FLOAT[] = {{"_p_FLOAT", 0, "float *|FLOAT *", 0, 0, 0, 0},{"_p_FLOAT", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_DWORD[] = {{"_p_DWORD", 0, "unsigned int *|DWORD *", 0, 0, 0, 0},{"_p_DWORD", 0, 0, 0, 0, 0, 0},{"_p_COLORREF", 0, 0, 0, 0, 0, 0},{"_p_UINT", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_HENHMETAFILE[] = {{"_p_HENHMETAFILE", 0, "long *|HENHMETAFILE *", 0, 0, 0, 0},{"_p_HENHMETAFILE", 0, 0, 0, 0, 0, 0},{"_p_HGLRC", 0, 0, 0, 0, 0, 0},{"_p_HDC", 0, 0, 0, 0, 0, 0},{"_p_PROC", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_VOID[] = {{"_p_VOID", 0, "void *|VOID *", 0, 0, 0, 0},{"_p_VOID", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_BOOL, 
_swigt__p_GLYPHMETRICSFLOAT, 
_swigt__size_t, 
_swigt__p_HGLRC, 
_swigt__p_DOUBLE, 
_swigt__p_UINT, 
_swigt__p_HDC, 
_swigt__p_COLORREF, 
_swigt__p_PIXELFORMATDESCRIPTOR, 
_swigt__p_LAYERPLANEDESCRIPTOR, 
_swigt__p_WORD, 
_swigt__p_BYTE, 
_swigt__p_POINTFLOAT, 
_swigt__p_char, 
_swigt__p_PROC, 
_swigt__p_FLOAT, 
_swigt__p_DWORD, 
_swigt__p_HENHMETAFILE, 
_swigt__ptrdiff_t, 
_swigt__p_VOID, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"__version__", 0, 0, (void *)"1.1.4.1", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"__date__", 0, 0, (void *)"2004/11/14 23:21:40", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"__author__", 0, 0, (void *)"Tarn Weisner Burton <twburton@users.sourceforge.net>", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"__doc__", 0, 0, (void *)"This module provides access to the WGL API.\n\nDocumentation:\n    MSDN:  http://msdn.microsoft.com/library/?url=/library/en-us/opengl/hh/opengl/ntopnglo_0e0o.asp?frame=true", &SWIGTYPE_p_char},
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif


#ifdef SWIG_LINK_RUNTIME
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    define SWIGIMPORT(a) extern a
#  else
#    if defined(__BORLANDC__)
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGIMPORT(a) a
#endif
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void *) SWIG_ReturnGlobalTypeList(void *);
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_types_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
#ifdef SWIG_LINK_RUNTIME
        swig_type_list_handle = (swig_type_info **) SWIG_ReturnGlobalTypeList(swig_type_list_handle);
#else
#  ifndef SWIG_STATIC_RUNTIME
        SWIG_Python_LookupTypePointer(&swig_type_list_handle);
#  endif
#endif
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,"__version__", SWIG_FromCharPtr("1.1.4.1"));
    PyDict_SetItemString(d,"__date__", SWIG_FromCharPtr("2004/11/14 23:21:40"));
    {
        PyDict_SetItemString(d,"__api_version__", SWIG_From_int((int)(1024))); 
    }
    PyDict_SetItemString(d,"__author__", SWIG_FromCharPtr("Tarn Weisner Burton <twburton@users.sourceforge.net>"));
    PyDict_SetItemString(d,"__doc__", SWIG_FromCharPtr("This module provides access to the WGL API.\n\nDocumentation:\n    MSDN:  http://msdn.microsoft.com/library/?url=/library/en-us/opengl/hh/opengl/ntopnglo_0e0o.asp?frame=true"));
    {
        PyDict_SetItemString(d,"PFD_TYPE_RGBA", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"PFD_TYPE_COLORINDEX", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"PFD_MAIN_PLANE", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"PFD_OVERLAY_PLANE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"PFD_UNDERLAY_PLANE", SWIG_From_int((int)((-1)))); 
    }
    {
        PyDict_SetItemString(d,"PFD_DOUBLEBUFFER", SWIG_From_int((int)(0x00000001))); 
    }
    {
        PyDict_SetItemString(d,"PFD_STEREO", SWIG_From_int((int)(0x00000002))); 
    }
    {
        PyDict_SetItemString(d,"PFD_DRAW_TO_WINDOW", SWIG_From_int((int)(0x00000004))); 
    }
    {
        PyDict_SetItemString(d,"PFD_DRAW_TO_BITMAP", SWIG_From_int((int)(0x00000008))); 
    }
    {
        PyDict_SetItemString(d,"PFD_SUPPORT_GDI", SWIG_From_int((int)(0x00000010))); 
    }
    {
        PyDict_SetItemString(d,"PFD_SUPPORT_OPENGL", SWIG_From_int((int)(0x00000020))); 
    }
    {
        PyDict_SetItemString(d,"PFD_GENERIC_FORMAT", SWIG_From_int((int)(0x00000040))); 
    }
    {
        PyDict_SetItemString(d,"PFD_NEED_PALETTE", SWIG_From_int((int)(0x00000080))); 
    }
    {
        PyDict_SetItemString(d,"PFD_NEED_SYSTEM_PALETTE", SWIG_From_int((int)(0x00000100))); 
    }
    {
        PyDict_SetItemString(d,"PFD_SWAP_EXCHANGE", SWIG_From_int((int)(0x00000200))); 
    }
    {
        PyDict_SetItemString(d,"PFD_SWAP_COPY", SWIG_From_int((int)(0x00000400))); 
    }
    {
        PyDict_SetItemString(d,"PFD_SWAP_LAYER_BUFFERS", SWIG_From_int((int)(0x00000800))); 
    }
    {
        PyDict_SetItemString(d,"PFD_GENERIC_ACCELERATED", SWIG_From_int((int)(0x00001000))); 
    }
    {
        PyDict_SetItemString(d,"PFD_SUPPORT_DIRECTDRAW", SWIG_From_int((int)(0x00002000))); 
    }
    {
        PyDict_SetItemString(d,"PFD_DEPTH_DONTCARE", SWIG_From_int((int)(0x20000000))); 
    }
    {
        PyDict_SetItemString(d,"PFD_DOUBLEBUFFER_DONTCARE", SWIG_From_int((int)(0x40000000))); 
    }
    {
        PyDict_SetItemString(d,"PFD_STEREO_DONTCARE", SWIG_From_int((int)(0x80000000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_FONT_LINES", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"WGL_FONT_POLYGONS", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"LPD_DOUBLEBUFFER", SWIG_From_int((int)(0x00000001))); 
    }
    {
        PyDict_SetItemString(d,"LPD_STEREO", SWIG_From_int((int)(0x00000002))); 
    }
    {
        PyDict_SetItemString(d,"LPD_SUPPORT_GDI", SWIG_From_int((int)(0x00000010))); 
    }
    {
        PyDict_SetItemString(d,"LPD_SUPPORT_OPENGL", SWIG_From_int((int)(0x00000020))); 
    }
    {
        PyDict_SetItemString(d,"LPD_SHARE_DEPTH", SWIG_From_int((int)(0x00000040))); 
    }
    {
        PyDict_SetItemString(d,"LPD_SHARE_STENCIL", SWIG_From_int((int)(0x00000080))); 
    }
    {
        PyDict_SetItemString(d,"LPD_SHARE_ACCUM", SWIG_From_int((int)(0x00000100))); 
    }
    {
        PyDict_SetItemString(d,"LPD_SWAP_EXCHANGE", SWIG_From_int((int)(0x00000200))); 
    }
    {
        PyDict_SetItemString(d,"LPD_SWAP_COPY", SWIG_From_int((int)(0x00000400))); 
    }
    {
        PyDict_SetItemString(d,"LPD_TRANSPARENT", SWIG_From_int((int)(0x00001000))); 
    }
    {
        PyDict_SetItemString(d,"LPD_TYPE_RGBA", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"LPD_TYPE_COLORINDEX", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_MAIN_PLANE", SWIG_From_int((int)(0x00000001))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY1", SWIG_From_int((int)(0x00000002))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY2", SWIG_From_int((int)(0x00000004))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY3", SWIG_From_int((int)(0x00000008))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY4", SWIG_From_int((int)(0x00000010))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY5", SWIG_From_int((int)(0x00000020))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY6", SWIG_From_int((int)(0x00000040))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY7", SWIG_From_int((int)(0x00000080))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY8", SWIG_From_int((int)(0x00000100))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY9", SWIG_From_int((int)(0x00000200))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY10", SWIG_From_int((int)(0x00000400))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY11", SWIG_From_int((int)(0x00000800))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY12", SWIG_From_int((int)(0x00001000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY13", SWIG_From_int((int)(0x00002000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY14", SWIG_From_int((int)(0x00004000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_OVERLAY15", SWIG_From_int((int)(0x00008000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY1", SWIG_From_int((int)(0x00010000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY2", SWIG_From_int((int)(0x00020000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY3", SWIG_From_int((int)(0x00040000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY4", SWIG_From_int((int)(0x00080000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY5", SWIG_From_int((int)(0x00100000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY6", SWIG_From_int((int)(0x00200000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY7", SWIG_From_int((int)(0x00400000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY8", SWIG_From_int((int)(0x00800000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY9", SWIG_From_int((int)(0x01000000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY10", SWIG_From_int((int)(0x02000000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY11", SWIG_From_int((int)(0x04000000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY12", SWIG_From_int((int)(0x08000000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY13", SWIG_From_int((int)(0x10000000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY14", SWIG_From_int((int)(0x20000000))); 
    }
    {
        PyDict_SetItemString(d,"WGL_SWAP_UNDERLAY15", SWIG_From_int((int)(0x40000000))); 
    }
}

