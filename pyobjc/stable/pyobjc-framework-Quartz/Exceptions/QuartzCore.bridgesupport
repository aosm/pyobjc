<?xml version='1.0'?>
<!DOCTYPE signatures SYSTEM "file://localhost/System/Library/DTDs/BridgeSupport.dtd">
<signatures version='1.0'>
  <struct name='CATransform3D' />
  <struct name='LKTransform' />
  <enum ignore='true' name='CGFLOAT_DEFINED' />
  <enum ignore='true' name='CGFLOAT_DEFINED' />
  <enum ignore='true' name='CGFLOAT_IS_DOUBLE' />
  <enum ignore='true' name='CGFLOAT_IS_DOUBLE' />
  <enum ignore='true' name='LK_WARN_DEPRECATED' />
  <class name='CALayer'>
    <method selector='drawInContext:'>
      <arg index='0' type='^{CGContext=}' />
    </method>
    <method selector='renderInContext:'>
      <arg index='0' type='^{CGContext=}' />
    </method>
  </class>
  <class name='CAOpenGLLayer'>
    <method selector='canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:'>
      <arg index='0' type='^{_CGLContextObject=}' />
      <arg index='1' type='^{_CGLPixelFormatObject=}' />
      <arg index='3' type='r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}' />
    </method>
    <method selector='copyCGLContextForPixelFormat:'>
      <retval type='^{_CGLContextObject=}' />
      <arg index='0' type='^{_CGLPixelFormatObject=}' />
    </method>
    <method selector='copyCGLPixelFormatForDisplayMask:'>
      <retval type='^{_CGLPixelFormatObject=}' />
    </method>
    <method selector='drawInCGLContext:pixelFormat:forLayerTime:displayTime:'>
      <arg index='0' type='^{_CGLContextObject=}' />
      <arg index='1' type='^{_CGLPixelFormatObject=}' />
      <arg index='3' type='r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}' />
    </method>
    <method selector='releaseCGLContext:'>
      <arg index='0' type='^{_CGLContextObject=}' />
    </method>
    <method selector='releaseCGLPixelFormat:'>
      <arg index='0' type='^{_CGLPixelFormatObject=}' />
    </method>
  </class>
  <class name='CARenderer'>
    <method selector='beginFrameAtTime:timeStamp:'>
      <arg index='1' type='r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}' />
    </method>
    <method class_method='true' selector='rendererWithCGLContext:options:'>
      <arg index='0' type='^v' />
    </method>
  </class>
  <class name='CIColor'>
    <method selector='colorSpace'>
      <retval type='^{CGColorSpace=}' />
    </method>
    <method class_method='true' selector='colorWithCGColor:'>
      <arg index='0' type='^{CGColor=}' />
    </method>
    <method selector='components'>
      <retval c_array_of_variable_length='true' type='r^f' type64='r^d' />
    </method>
    <method selector='initWithCGColor:'>
      <arg index='0' type='^{CGColor=}' />
    </method>
  </class>
  <class name='CIContext'>
    <method class_method='true' selector='contextWithCGContext:options:'>
      <arg index='0' type='^{CGContext=}' />
    </method>
    <method class_method='true' selector='contextWithCGLContext:pixelFormat:options:'>
      <arg index='0' type='^{_CGLContextObject=}' />
      <arg index='1' type='^{_CGLPixelFormatObject=}' />
    </method>
    <method selector='createCGImage:fromRect:'>
      <retval type='^{CGImage=}' />
    </method>
    <method selector='createCGImage:fromRect:format:colorSpace:'>
      <retval type='^{CGImage=}' />
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
    <method selector='createCGLayerWithSize:info:'>
      <retval type='^{CGLayer=}' />
      <arg index='1' type='^{__CFDictionary=}' />
    </method>
    <method selector='render:toBitmap:rowBytes:bounds:format:colorSpace:'>
      <arg index='1' type='^v' />
      <arg index='5' type='^{CGColorSpace=}' />
    </method>
  </class>
  <class name='CIFilter'>
    <method selector='apply:' variadic='true' />
    <method c_array_delimited_by_null='true' selector='filterWithName:keysAndValues:' variadic='true' />
  </class>
  <class name='CIImage'>
    <method class_method='true' selector='imageWithBitmapData:bytesPerRow:size:format:colorSpace:'>
      <arg index='4' type='^{CGColorSpace=}' />
    </method>
    <method class_method='true' selector='imageWithCGImage:'>
      <arg index='0' type='^{CGImage=}' />
    </method>
    <method class_method='true' selector='imageWithCGImage:options:'>
      <arg index='0' type='^{CGImage=}' />
    </method>
    <method class_method='true' selector='imageWithCGLayer:'>
      <arg index='0' type='^{CGLayer=}' />
    </method>
    <method class_method='true' selector='imageWithCGLayer:options:'>
      <arg index='0' type='^{CGLayer=}' />
    </method>
    <method class_method='true' selector='imageWithCVImageBuffer:'>
      <arg index='0' type='^{__CVBuffer=}' />
    </method>
    <method class_method='true' selector='imageWithCVImageBuffer:options:'>
      <arg index='0' type='^{__CVBuffer=}' />
    </method>
    <method class_method='true' selector='imageWithImageProvider:size:format:colorSpace:options:'>
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
    <method class_method='true' selector='imageWithTexture:size:flipped:colorSpace:'>
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
    <method selector='initWithBitmapData:bytesPerRow:size:format:colorSpace:'>
      <arg index='4' type='^{CGColorSpace=}' />
    </method>
    <method selector='initWithCGImage:'>
      <arg index='0' type='^{CGImage=}' />
    </method>
    <method selector='initWithCGImage:options:'>
      <arg index='0' type='^{CGImage=}' />
    </method>
    <method selector='initWithCGLayer:'>
      <arg index='0' type='^{CGLayer=}' />
    </method>
    <method selector='initWithCGLayer:options:'>
      <arg index='0' type='^{CGLayer=}' />
    </method>
    <method selector='initWithCVImageBuffer:'>
      <arg index='0' type='^{__CVBuffer=}' />
    </method>
    <method selector='initWithCVImageBuffer:options:'>
      <arg index='0' type='^{__CVBuffer=}' />
    </method>
    <method selector='initWithImageProvider:size:format:colorSpace:options:'>
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
    <method selector='initWithTexture:size:flipped:colorSpace:'>
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
  </class>
  <class name='CIKernel'>
    <method selector='setROISelector:'>
      <arg index='0' sel_of_type='{CGRect={CGPoint=ff}{CGSize=ff}}@:i{CGRect={CGPoint=ff}{CGSize=ff}}@' />
    </method>
  </class>
  <class name='CISampler'>
    <method c_array_delimited_by_null='true' selector='initWithImage:keysAndValues:' variadic='true' />
    <method c_array_delimited_by_null='true' selector='samplerWithImage:keysAndValues:' variadic='true' />
  </class>
  <class name='CIVector'>
    <method selector='initWithValues:count:'>
      <arg c_array_length_in_arg='1' index='0' type='r^f' type64='r^d' type_modifier='n' />
    </method>
    <method class_method='true' selector='vectorWithValues:count:'>
      <arg c_array_length_in_arg='1' index='0' type='r^f' type64='r^d' type_modifier='n' />
    </method>
  </class>
  <class name='NSObject'>
    <method selector='drawLayer:inContext:'>
      <arg index='1' type='^{CGContext=}' />
    </method>
    <method selector='load:'>
      <arg index='0' type='^v' />
    </method>
    <method selector='provideImageData:bytesPerRow:origin:size:userInfo:'>
      <arg index='0' type='^v' />
    </method>
  </class>
  <class name='CALayer'>
    <method selector='drawInContext:'>
      <arg index='0' type='^{CGContext=}' />
    </method>
    <method selector='renderInContext:'>
      <arg index='0' type='^{CGContext=}' />
    </method>
  </class>
  <class name='CAOpenGLLayer'>
    <method selector='canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:'>
      <arg index='0' type='^{_CGLContextObject=}' />
      <arg index='1' type='^{_CGLPixelFormatObject=}' />
      <arg index='3' type='r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}' />
    </method>
    <method selector='copyCGLContextForPixelFormat:'>
      <retval type='^{_CGLContextObject=}' />
      <arg index='0' type='^{_CGLPixelFormatObject=}' />
    </method>
    <method selector='copyCGLPixelFormatForDisplayMask:'>
      <retval type='^{_CGLPixelFormatObject=}' />
    </method>
    <method selector='drawInCGLContext:pixelFormat:forLayerTime:displayTime:'>
      <arg index='0' type='^{_CGLContextObject=}' />
      <arg index='1' type='^{_CGLPixelFormatObject=}' />
      <arg index='3' type='r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}' />
    </method>
    <method selector='releaseCGLContext:'>
      <arg index='0' type='^{_CGLContextObject=}' />
    </method>
    <method selector='releaseCGLPixelFormat:'>
      <arg index='0' type='^{_CGLPixelFormatObject=}' />
    </method>
  </class>
  <class name='CARenderer'>
    <method selector='beginFrameAtTime:timeStamp:'>
      <arg index='1' type='r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}' />
    </method>
    <method class_method='true' selector='rendererWithCGLContext:options:'>
      <arg index='0' type='^v' />
    </method>
  </class>
  <class name='CIColor'>
    <method selector='colorSpace'>
      <retval type='^{CGColorSpace=}' />
    </method>
    <method class_method='true' selector='colorWithCGColor:'>
      <arg index='0' type='^{CGColor=}' />
    </method>
    <method selector='components'>
      <retval c_array_of_variable_length='true' type='r^f' type64='r^d' />
    </method>
    <method selector='initWithCGColor:'>
      <arg index='0' type='^{CGColor=}' />
    </method>
  </class>
  <class name='CIContext'>
    <method class_method='true' selector='contextWithCGContext:options:'>
      <arg index='0' type='^{CGContext=}' />
    </method>
    <method class_method='true' selector='contextWithCGLContext:pixelFormat:options:'>
      <arg index='0' type='^{_CGLContextObject=}' />
      <arg index='1' type='^{_CGLPixelFormatObject=}' />
    </method>
    <method selector='createCGImage:fromRect:'>
      <retval type='^{CGImage=}' />
    </method>
    <method selector='createCGImage:fromRect:format:colorSpace:'>
      <retval type='^{CGImage=}' />
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
    <method selector='createCGLayerWithSize:info:'>
      <retval type='^{CGLayer=}' />
      <arg index='1' type='^{__CFDictionary=}' />
    </method>
    <method selector='render:toBitmap:rowBytes:bounds:format:colorSpace:'>
      <arg index='1' type='^v' />
      <arg index='5' type='^{CGColorSpace=}' />
    </method>
  </class>
  <class name='CIFilter'>
    <method selector='apply:' variadic='true' />
    <method c_array_delimited_by_null='true' selector='filterWithName:keysAndValues:' variadic='true' />
  </class>
  <class name='CIImage'>
    <method class_method='true' selector='imageWithBitmapData:bytesPerRow:size:format:colorSpace:'>
      <arg index='4' type='^{CGColorSpace=}' />
    </method>
    <method class_method='true' selector='imageWithCGImage:'>
      <arg index='0' type='^{CGImage=}' />
    </method>
    <method class_method='true' selector='imageWithCGImage:options:'>
      <arg index='0' type='^{CGImage=}' />
    </method>
    <method class_method='true' selector='imageWithCGLayer:'>
      <arg index='0' type='^{CGLayer=}' />
    </method>
    <method class_method='true' selector='imageWithCGLayer:options:'>
      <arg index='0' type='^{CGLayer=}' />
    </method>
    <method class_method='true' selector='imageWithCVImageBuffer:'>
      <arg index='0' type='^{__CVBuffer=}' />
    </method>
    <method class_method='true' selector='imageWithCVImageBuffer:options:'>
      <arg index='0' type='^{__CVBuffer=}' />
    </method>
    <method class_method='true' selector='imageWithImageProvider:size:format:colorSpace:options:'>
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
    <method class_method='true' selector='imageWithTexture:size:flipped:colorSpace:'>
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
    <method selector='initWithBitmapData:bytesPerRow:size:format:colorSpace:'>
      <arg index='4' type='^{CGColorSpace=}' />
    </method>
    <method selector='initWithCGImage:'>
      <arg index='0' type='^{CGImage=}' />
    </method>
    <method selector='initWithCGImage:options:'>
      <arg index='0' type='^{CGImage=}' />
    </method>
    <method selector='initWithCGLayer:'>
      <arg index='0' type='^{CGLayer=}' />
    </method>
    <method selector='initWithCGLayer:options:'>
      <arg index='0' type='^{CGLayer=}' />
    </method>
    <method selector='initWithCVImageBuffer:'>
      <arg index='0' type='^{__CVBuffer=}' />
    </method>
    <method selector='initWithCVImageBuffer:options:'>
      <arg index='0' type='^{__CVBuffer=}' />
    </method>
    <method selector='initWithImageProvider:size:format:colorSpace:options:'>
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
    <method selector='initWithTexture:size:flipped:colorSpace:'>
      <arg index='3' type='^{CGColorSpace=}' />
    </method>
  </class>
  <class name='CIKernel'>
    <method selector='setROISelector:'>
      <arg index='0' sel_of_type='{CGRect={CGPoint=ff}{CGSize=ff}}@:i{CGRect={CGPoint=ff}{CGSize=ff}}@' />
    </method>
  </class>
  <class name='CISampler'>
    <method c_array_delimited_by_null='true' selector='initWithImage:keysAndValues:' variadic='true' />
    <method c_array_delimited_by_null='true' selector='samplerWithImage:keysAndValues:' variadic='true' />
  </class>
  <class name='CIVector'>
    <method selector='initWithValues:count:'>
      <arg c_array_length_in_arg='1' index='0' type='r^f' type64='r^d' type_modifier='n' />
    </method>
    <method class_method='true' selector='vectorWithValues:count:'>
      <arg c_array_length_in_arg='1' index='0' type='r^f' type64='r^d' type_modifier='n' />
    </method>
  </class>
  <class name='NSObject'>
    <method selector='drawLayer:inContext:'>
      <arg index='1' type='^{CGContext=}' />
    </method>
    <method selector='load:'>
      <arg index='0' type='^v' />
    </method>
    <method selector='provideImageData:bytesPerRow:origin:size:userInfo:'>
      <arg index='0' type='^v' />
    </method>
  </class>
</signatures>
