/*
# AUTOGENERATED DO NOT EDIT

# If you edit this file, delete the AUTOGENERATED line to prevent re-generation
# BUILD api_versions [0x001]
*/

%module vertex_buffer_object

#define __version__ "$Revision: 1.1.2.1 $"
#define __date__ "$Date: 2004/11/15 07:38:07 $"
#define __api_version__ API_VERSION
#define __author__ "PyOpenGL Developers <pyopengl-devel@lists.sourceforge.net>"
#define __doc__ ""

%{
/**
 *
 * GL.ARB.vertex_buffer_object Module for PyOpenGL
 * 
 * Authors: PyOpenGL Developers <pyopengl-devel@lists.sourceforge.net>
 * 
***/
%}

%include util.inc
%include gl_exception_handler.inc

%{
#ifdef CGL_PLATFORM
# include <OpenGL/glext.h>
#else
# include <GL/glext.h>
#endif

#if !EXT_DEFINES_PROTO || !defined(GL_ARB_vertex_buffer_object)
DECLARE_VOID_EXT(glBindBufferARB, (GLenum target, GLuint buffer), (target, buffer))
DECLARE_VOID_EXT(glDeleteBuffersARB, (GLsizei n, const GLuint *buffers), (n, buffers))
DECLARE_VOID_EXT(glGenBuffersARB, (GLsizei n, GLuint *buffers), (n, buffers))
DECLARE_EXT(glIsBufferARB, GLboolean, 0, (GLuint buffer), (buffer))
DECLARE_VOID_EXT(glBufferDataARB, (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage), (target, size, data, usage))
DECLARE_VOID_EXT(glBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data), (target, offset, size, data))
DECLARE_VOID_EXT(glGetBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data), (target, offset, size, data))
DECLARE_EXT(glMapBufferARB, GLvoid*, 0, (GLenum target, GLenum access), (target, access))
DECLARE_EXT(glUnmapBufferARB, GLboolean, 0, (GLenum target), (target))
DECLARE_VOID_EXT(glGetBufferParameterivARB, (GLenum target, GLenum pname, GLint *params), (target, pname, params))
DECLARE_VOID_EXT(glGetBufferPointervARB, (GLenum target, GLenum pname, GLvoid* *params), (target, pname, params))
#endif
%}

/* FUNCTION DECLARATIONS */
typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;
void glBindBufferARB(GLenum target, GLuint buffer);
DOC(glBindBufferARB, "glBindBufferARB(target, buffer)")
void glDeleteBuffersARB(GLsizei n, const GLuint *buffers);
DOC(glDeleteBuffersARB, "glDeleteBuffersARB(n, buffers)")
void glGenBuffersARB(GLsizei n, GLuint *buffers);
DOC(glGenBuffersARB, "glGenBuffersARB(n, buffers)")
GLboolean glIsBufferARB(GLuint buffer);
DOC(glIsBufferARB, "glIsBufferARB(buffer)")
void glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
DOC(glBufferDataARB, "glBufferDataARB(target, size, data, usage)")
void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
DOC(glBufferSubDataARB, "glBufferSubDataARB(target, offset, size, data)")
void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
DOC(glGetBufferSubDataARB, "glGetBufferSubDataARB(target, offset, size, data)")
GLvoid* glMapBufferARB(GLenum target, GLenum access);
DOC(glMapBufferARB, "glMapBufferARB(target, access)")
GLboolean glUnmapBufferARB(GLenum target);
DOC(glUnmapBufferARB, "glUnmapBufferARB(target)")
void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params);
DOC(glGetBufferParameterivARB, "glGetBufferParameterivARB(target, pname, params)")
void glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid* *params);
DOC(glGetBufferPointervARB, "glGetBufferPointervARB(target, pname, params)")

/* CONSTANT DECLARATIONS */
#define             GL_BUFFER_SIZE_ARB 0x8764
#define            GL_BUFFER_USAGE_ARB 0x8765
#define            GL_ARRAY_BUFFER_ARB 0x8892
#define    GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define    GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define               GL_READ_ONLY_ARB 0x88B8
#define              GL_WRITE_ONLY_ARB 0x88B9
#define              GL_READ_WRITE_ARB 0x88BA
#define           GL_BUFFER_ACCESS_ARB 0x88BB
#define           GL_BUFFER_MAPPED_ARB 0x88BC
#define      GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define             GL_STREAM_DRAW_ARB 0x88E0
#define             GL_STREAM_READ_ARB 0x88E1
#define             GL_STREAM_COPY_ARB 0x88E2
#define             GL_STATIC_DRAW_ARB 0x88E4
#define             GL_STATIC_READ_ARB 0x88E5
#define             GL_STATIC_COPY_ARB 0x88E6
#define            GL_DYNAMIC_DRAW_ARB 0x88E8
#define            GL_DYNAMIC_READ_ARB 0x88E9
#define            GL_DYNAMIC_COPY_ARB 0x88EA


%{
static char *proc_names[] =
{
#if !EXT_DEFINES_PROTO || !defined(GL_ARB_vertex_buffer_object)
"glBindBufferARB",
"glDeleteBuffersARB",
"glGenBuffersARB",
"glIsBufferARB",
"glBufferDataARB",
"glBufferSubDataARB",
"glGetBufferSubDataARB",
"glMapBufferARB",
"glUnmapBufferARB",
"glGetBufferParameterivARB",
"glGetBufferPointervARB",
#endif
	NULL
};

#define glInitVertexBufferObjectARB() InitExtension("GL_ARB_vertex_buffer_object", proc_names)
%}

int glInitVertexBufferObjectARB();
DOC(glInitVertexBufferObjectARB, "glInitVertexBufferObjectARB() -> bool")

%{
PyObject *__info()
{
	if (glInitVertexBufferObjectARB())
	{
		PyObject *info = PyList_New(0);
		return info;
	}
	
	Py_INCREF(Py_None);
	return Py_None;
}
%}

PyObject *__info();

